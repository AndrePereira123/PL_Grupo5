Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    DOT
    FUNCTION
    NOT
    PROCEDURE

Grammar

Rule 0     S' -> file
Rule 1     file -> PROGRAM name vars code
Rule 2     name -> IDENTIFIER SEMICOLON
Rule 3     vars -> VAR varstail
Rule 4     vars -> empty
Rule 5     varstail -> vardecl varstail
Rule 6     varstail -> empty
Rule 7     vardecl -> idlist COLON type SEMICOLON
Rule 8     idlist -> IDENTIFIER idlistTail
Rule 9     idlistTail -> COMMA IDENTIFIER idlistTail
Rule 10    idlistTail -> empty
Rule 11    type -> TYPE_INTEGER
Rule 12    type -> TYPE_REAL
Rule 13    type -> BOOLEAN
Rule 14    type -> TYPE_STRING
Rule 15    type -> ARRAY LBRACKET INTEGER RBRACKET OF type
Rule 16    code -> BEGIN expressions END_DOT
Rule 17    dotless_code -> BEGIN expressions END
Rule 18    expressions -> statement expressions_tail
Rule 19    expressions -> empty
Rule 20    expressions_tail -> SEMICOLON expressions
Rule 21    expressions_tail -> empty
Rule 22    statement -> IDENTIFIER ASSIGN assign_expression
Rule 23    statement -> WRITELN write_statement
Rule 24    statement -> WRITE write_statement
Rule 25    statement -> READLN readln_statement
Rule 26    statement -> IF if_condition THEN if_code
Rule 27    statement -> FOR for_condition DO for_code
Rule 28    statement -> WHILE if_condition DO while_code
Rule 29    while_code -> dotless_code
Rule 30    while_code -> statement
Rule 31    while_code -> empty
Rule 32    if_code -> dotless_code opt_else
Rule 33    if_code -> statement opt_else
Rule 34    if_code -> empty
Rule 35    for_condition -> expression ASSIGN expression to_expression
Rule 36    to_expression -> TO expression
Rule 37    to_expression -> DOWNTO expression
Rule 38    for_code -> dotless_code
Rule 39    for_code -> statement
Rule 40    for_code -> empty
Rule 41    opt_else -> ELSE code_or_statement
Rule 42    opt_else -> empty
Rule 43    code_or_statement -> dotless_code
Rule 44    code_or_statement -> statement
Rule 45    if_condition -> expression if_condition_tail
Rule 46    if_condition_tail -> OR if_condition_tail_2
Rule 47    if_condition_tail -> if_condition_tail_2
Rule 48    if_condition_tail_2 -> AND if_condition
Rule 49    if_condition_tail_2 -> empty
Rule 50    write_statement -> LPAREN string_statement RPAREN
Rule 51    readln_statement -> LPAREN string_statement RPAREN
Rule 52    string_statement -> assign_expression
Rule 53    string_statement -> assign_expression COMMA string_statement
Rule 54    assign_expression -> expression
Rule 55    assign_expression -> STRING
Rule 56    expression -> expression OR and_expression
Rule 57    expression -> and_expression
Rule 58    and_expression -> and_expression AND relation_expression
Rule 59    and_expression -> relation_expression
Rule 60    relation_expression -> simple_expression expression_tail
Rule 61    expression_tail -> LT simple_expression
Rule 62    expression_tail -> GT simple_expression
Rule 63    expression_tail -> LE simple_expression
Rule 64    expression_tail -> GE simple_expression
Rule 65    expression_tail -> NE simple_expression
Rule 66    expression_tail -> EQUAL simple_expression
Rule 67    expression_tail -> empty
Rule 68    simple_expression -> term simple_expression_tail
Rule 69    simple_expression_tail -> PLUS term simple_expression_tail
Rule 70    simple_expression_tail -> MINUS term simple_expression_tail
Rule 71    simple_expression_tail -> empty
Rule 72    term -> factor term_tail
Rule 73    term_tail -> TIMES factor term_tail
Rule 74    term_tail -> DIVIDE factor term_tail
Rule 75    term_tail -> MOD factor term_tail
Rule 76    term_tail -> REAL_DIVIDE factor term_tail
Rule 77    term_tail -> empty
Rule 78    factor -> PLUS factor
Rule 79    factor -> MINUS factor
Rule 80    factor -> LPAREN expression RPAREN
Rule 81    factor -> INTEGER
Rule 82    factor -> REAL
Rule 83    factor -> IDENTIFIER
Rule 84    factor -> TRUE
Rule 85    factor -> FALSE
Rule 86    empty -> <empty>

Terminals, with rules where they appear

AND                  : 48 58
ARRAY                : 15
ASSIGN               : 22 35
BEGIN                : 16 17
BOOLEAN              : 13
COLON                : 7
COMMA                : 9 53
COMMENT              : 
DIVIDE               : 74
DO                   : 27 28
DOT                  : 
DOWNTO               : 37
ELSE                 : 41
END                  : 17
END_DOT              : 16
EQUAL                : 66
FALSE                : 85
FOR                  : 27
FUNCTION             : 
GE                   : 64
GT                   : 62
IDENTIFIER           : 2 8 9 22 83
IF                   : 26
INTEGER              : 15 81
LBRACKET             : 15
LE                   : 63
LPAREN               : 50 51 80
LT                   : 61
MINUS                : 70 79
MOD                  : 75
NE                   : 65
NOT                  : 
OF                   : 15
OR                   : 46 56
PLUS                 : 69 78
PROCEDURE            : 
PROGRAM              : 1
RBRACKET             : 15
READLN               : 25
REAL                 : 82
REAL_DIVIDE          : 76
RPAREN               : 50 51 80
SEMICOLON            : 2 7 20
STRING               : 55
THEN                 : 26
TIMES                : 73
TO                   : 36
TRUE                 : 84
TYPE_INTEGER         : 11
TYPE_REAL            : 12
TYPE_STRING          : 14
VAR                  : 3
WHILE                : 28
WRITE                : 24
WRITELN              : 23
error                : 

Nonterminals, with rules where they appear

and_expression       : 56 57 58
assign_expression    : 22 52 53
code                 : 1
code_or_statement    : 41
dotless_code         : 29 32 38 43
empty                : 4 6 10 19 21 31 34 40 42 49 67 71 77
expression           : 35 35 36 37 45 54 56 80
expression_tail      : 60
expressions          : 16 17 20
expressions_tail     : 18
factor               : 72 73 74 75 76 78 79
file                 : 0
for_code             : 27
for_condition        : 27
idlist               : 7
idlistTail           : 8 9
if_code              : 26
if_condition         : 26 28 48
if_condition_tail    : 45
if_condition_tail_2  : 46 47
name                 : 1
opt_else             : 32 33
readln_statement     : 25
relation_expression  : 58 59
simple_expression    : 60 61 62 63 64 65 66
simple_expression_tail : 68 69 70
statement            : 18 30 33 39 44
string_statement     : 50 51 53
term                 : 68 69 70
term_tail            : 72 73 74 75 76
to_expression        : 35
type                 : 7 15
vardecl              : 5
vars                 : 1
varstail             : 3 5
while_code           : 28
write_statement      : 23 24

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . PROGRAM name vars code

    PROGRAM         shift and go to state 2

    file                           shift and go to state 1

state 1

    (0) S' -> file .



state 2

    (1) file -> PROGRAM . name vars code
    (2) name -> . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 4

    name                           shift and go to state 3

state 3

    (1) file -> PROGRAM name . vars code
    (3) vars -> . VAR varstail
    (4) vars -> . empty
    (86) empty -> .

    VAR             shift and go to state 6
    BEGIN           reduce using rule 86 (empty -> .)

    vars                           shift and go to state 5
    empty                          shift and go to state 7

state 4

    (2) name -> IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 8


state 5

    (1) file -> PROGRAM name vars . code
    (16) code -> . BEGIN expressions END_DOT

    BEGIN           shift and go to state 10

    code                           shift and go to state 9

state 6

    (3) vars -> VAR . varstail
    (5) varstail -> . vardecl varstail
    (6) varstail -> . empty
    (7) vardecl -> . idlist COLON type SEMICOLON
    (86) empty -> .
    (8) idlist -> . IDENTIFIER idlistTail

    BEGIN           reduce using rule 86 (empty -> .)
    IDENTIFIER      shift and go to state 15

    varstail                       shift and go to state 11
    vardecl                        shift and go to state 12
    empty                          shift and go to state 13
    idlist                         shift and go to state 14

state 7

    (4) vars -> empty .

    BEGIN           reduce using rule 4 (vars -> empty .)


state 8

    (2) name -> IDENTIFIER SEMICOLON .

    VAR             reduce using rule 2 (name -> IDENTIFIER SEMICOLON .)
    BEGIN           reduce using rule 2 (name -> IDENTIFIER SEMICOLON .)


state 9

    (1) file -> PROGRAM name vars code .

    $end            reduce using rule 1 (file -> PROGRAM name vars code .)


state 10

    (16) code -> BEGIN . expressions END_DOT
    (18) expressions -> . statement expressions_tail
    (19) expressions -> . empty
    (22) statement -> . IDENTIFIER ASSIGN assign_expression
    (23) statement -> . WRITELN write_statement
    (24) statement -> . WRITE write_statement
    (25) statement -> . READLN readln_statement
    (26) statement -> . IF if_condition THEN if_code
    (27) statement -> . FOR for_condition DO for_code
    (28) statement -> . WHILE if_condition DO while_code
    (86) empty -> .

    IDENTIFIER      shift and go to state 19
    WRITELN         shift and go to state 20
    WRITE           shift and go to state 21
    READLN          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    END_DOT         reduce using rule 86 (empty -> .)

    expressions                    shift and go to state 16
    statement                      shift and go to state 17
    empty                          shift and go to state 18

state 11

    (3) vars -> VAR varstail .

    BEGIN           reduce using rule 3 (vars -> VAR varstail .)


state 12

    (5) varstail -> vardecl . varstail
    (5) varstail -> . vardecl varstail
    (6) varstail -> . empty
    (7) vardecl -> . idlist COLON type SEMICOLON
    (86) empty -> .
    (8) idlist -> . IDENTIFIER idlistTail

    BEGIN           reduce using rule 86 (empty -> .)
    IDENTIFIER      shift and go to state 15

    vardecl                        shift and go to state 12
    varstail                       shift and go to state 26
    empty                          shift and go to state 13
    idlist                         shift and go to state 14

state 13

    (6) varstail -> empty .

    BEGIN           reduce using rule 6 (varstail -> empty .)


state 14

    (7) vardecl -> idlist . COLON type SEMICOLON

    COLON           shift and go to state 27


state 15

    (8) idlist -> IDENTIFIER . idlistTail
    (9) idlistTail -> . COMMA IDENTIFIER idlistTail
    (10) idlistTail -> . empty
    (86) empty -> .

    COMMA           shift and go to state 29
    COLON           reduce using rule 86 (empty -> .)

    idlistTail                     shift and go to state 28
    empty                          shift and go to state 30

state 16

    (16) code -> BEGIN expressions . END_DOT

    END_DOT         shift and go to state 31


state 17

    (18) expressions -> statement . expressions_tail
    (20) expressions_tail -> . SEMICOLON expressions
    (21) expressions_tail -> . empty
    (86) empty -> .

    SEMICOLON       shift and go to state 33
    END_DOT         reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)

    expressions_tail               shift and go to state 32
    empty                          shift and go to state 34

state 18

    (19) expressions -> empty .

    END_DOT         reduce using rule 19 (expressions -> empty .)
    END             reduce using rule 19 (expressions -> empty .)


state 19

    (22) statement -> IDENTIFIER . ASSIGN assign_expression

    ASSIGN          shift and go to state 35


state 20

    (23) statement -> WRITELN . write_statement
    (50) write_statement -> . LPAREN string_statement RPAREN

    LPAREN          shift and go to state 37

    write_statement                shift and go to state 36

state 21

    (24) statement -> WRITE . write_statement
    (50) write_statement -> . LPAREN string_statement RPAREN

    LPAREN          shift and go to state 37

    write_statement                shift and go to state 38

state 22

    (25) statement -> READLN . readln_statement
    (51) readln_statement -> . LPAREN string_statement RPAREN

    LPAREN          shift and go to state 40

    readln_statement               shift and go to state 39

state 23

    (26) statement -> IF . if_condition THEN if_code
    (45) if_condition -> . expression if_condition_tail
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    if_condition                   shift and go to state 41
    expression                     shift and go to state 42
    and_expression                 shift and go to state 43
    relation_expression            shift and go to state 44
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 24

    (27) statement -> FOR . for_condition DO for_code
    (35) for_condition -> . expression ASSIGN expression to_expression
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    for_condition                  shift and go to state 56
    expression                     shift and go to state 57
    and_expression                 shift and go to state 43
    relation_expression            shift and go to state 44
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 25

    (28) statement -> WHILE . if_condition DO while_code
    (45) if_condition -> . expression if_condition_tail
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    if_condition                   shift and go to state 58
    expression                     shift and go to state 42
    and_expression                 shift and go to state 43
    relation_expression            shift and go to state 44
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 26

    (5) varstail -> vardecl varstail .

    BEGIN           reduce using rule 5 (varstail -> vardecl varstail .)


state 27

    (7) vardecl -> idlist COLON . type SEMICOLON
    (11) type -> . TYPE_INTEGER
    (12) type -> . TYPE_REAL
    (13) type -> . BOOLEAN
    (14) type -> . TYPE_STRING
    (15) type -> . ARRAY LBRACKET INTEGER RBRACKET OF type

    TYPE_INTEGER    shift and go to state 60
    TYPE_REAL       shift and go to state 61
    BOOLEAN         shift and go to state 62
    TYPE_STRING     shift and go to state 63
    ARRAY           shift and go to state 64

    type                           shift and go to state 59

state 28

    (8) idlist -> IDENTIFIER idlistTail .

    COLON           reduce using rule 8 (idlist -> IDENTIFIER idlistTail .)


state 29

    (9) idlistTail -> COMMA . IDENTIFIER idlistTail

    IDENTIFIER      shift and go to state 65


state 30

    (10) idlistTail -> empty .

    COLON           reduce using rule 10 (idlistTail -> empty .)


state 31

    (16) code -> BEGIN expressions END_DOT .

    $end            reduce using rule 16 (code -> BEGIN expressions END_DOT .)


state 32

    (18) expressions -> statement expressions_tail .

    END_DOT         reduce using rule 18 (expressions -> statement expressions_tail .)
    END             reduce using rule 18 (expressions -> statement expressions_tail .)


state 33

    (20) expressions_tail -> SEMICOLON . expressions
    (18) expressions -> . statement expressions_tail
    (19) expressions -> . empty
    (22) statement -> . IDENTIFIER ASSIGN assign_expression
    (23) statement -> . WRITELN write_statement
    (24) statement -> . WRITE write_statement
    (25) statement -> . READLN readln_statement
    (26) statement -> . IF if_condition THEN if_code
    (27) statement -> . FOR for_condition DO for_code
    (28) statement -> . WHILE if_condition DO while_code
    (86) empty -> .

    IDENTIFIER      shift and go to state 19
    WRITELN         shift and go to state 20
    WRITE           shift and go to state 21
    READLN          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    END_DOT         reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)

    expressions                    shift and go to state 66
    statement                      shift and go to state 17
    empty                          shift and go to state 18

state 34

    (21) expressions_tail -> empty .

    END_DOT         reduce using rule 21 (expressions_tail -> empty .)
    END             reduce using rule 21 (expressions_tail -> empty .)


state 35

    (22) statement -> IDENTIFIER ASSIGN . assign_expression
    (54) assign_expression -> . expression
    (55) assign_expression -> . STRING
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    STRING          shift and go to state 69
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    assign_expression              shift and go to state 67
    expression                     shift and go to state 68
    and_expression                 shift and go to state 43
    relation_expression            shift and go to state 44
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 36

    (23) statement -> WRITELN write_statement .

    SEMICOLON       reduce using rule 23 (statement -> WRITELN write_statement .)
    END_DOT         reduce using rule 23 (statement -> WRITELN write_statement .)
    END             reduce using rule 23 (statement -> WRITELN write_statement .)
    ELSE            reduce using rule 23 (statement -> WRITELN write_statement .)


state 37

    (50) write_statement -> LPAREN . string_statement RPAREN
    (52) string_statement -> . assign_expression
    (53) string_statement -> . assign_expression COMMA string_statement
    (54) assign_expression -> . expression
    (55) assign_expression -> . STRING
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    STRING          shift and go to state 69
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    string_statement               shift and go to state 70
    assign_expression              shift and go to state 71
    expression                     shift and go to state 68
    and_expression                 shift and go to state 43
    relation_expression            shift and go to state 44
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 38

    (24) statement -> WRITE write_statement .

    SEMICOLON       reduce using rule 24 (statement -> WRITE write_statement .)
    END_DOT         reduce using rule 24 (statement -> WRITE write_statement .)
    END             reduce using rule 24 (statement -> WRITE write_statement .)
    ELSE            reduce using rule 24 (statement -> WRITE write_statement .)


state 39

    (25) statement -> READLN readln_statement .

    SEMICOLON       reduce using rule 25 (statement -> READLN readln_statement .)
    END_DOT         reduce using rule 25 (statement -> READLN readln_statement .)
    END             reduce using rule 25 (statement -> READLN readln_statement .)
    ELSE            reduce using rule 25 (statement -> READLN readln_statement .)


state 40

    (51) readln_statement -> LPAREN . string_statement RPAREN
    (52) string_statement -> . assign_expression
    (53) string_statement -> . assign_expression COMMA string_statement
    (54) assign_expression -> . expression
    (55) assign_expression -> . STRING
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    STRING          shift and go to state 69
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    string_statement               shift and go to state 72
    assign_expression              shift and go to state 71
    expression                     shift and go to state 68
    and_expression                 shift and go to state 43
    relation_expression            shift and go to state 44
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 41

    (26) statement -> IF if_condition . THEN if_code

    THEN            shift and go to state 73


state 42

    (45) if_condition -> expression . if_condition_tail
    (56) expression -> expression . OR and_expression
    (46) if_condition_tail -> . OR if_condition_tail_2
    (47) if_condition_tail -> . if_condition_tail_2
    (48) if_condition_tail_2 -> . AND if_condition
    (49) if_condition_tail_2 -> . empty
    (86) empty -> .

    OR              shift and go to state 75
    AND             shift and go to state 77
    THEN            reduce using rule 86 (empty -> .)
    DO              reduce using rule 86 (empty -> .)

    if_condition_tail              shift and go to state 74
    if_condition_tail_2            shift and go to state 76
    empty                          shift and go to state 78

state 43

    (57) expression -> and_expression .
    (58) and_expression -> and_expression . AND relation_expression

  ! shift/reduce conflict for AND resolved as shift
    OR              reduce using rule 57 (expression -> and_expression .)
    THEN            reduce using rule 57 (expression -> and_expression .)
    ASSIGN          reduce using rule 57 (expression -> and_expression .)
    DO              reduce using rule 57 (expression -> and_expression .)
    SEMICOLON       reduce using rule 57 (expression -> and_expression .)
    END_DOT         reduce using rule 57 (expression -> and_expression .)
    END             reduce using rule 57 (expression -> and_expression .)
    ELSE            reduce using rule 57 (expression -> and_expression .)
    COMMA           reduce using rule 57 (expression -> and_expression .)
    RPAREN          reduce using rule 57 (expression -> and_expression .)
    TO              reduce using rule 57 (expression -> and_expression .)
    DOWNTO          reduce using rule 57 (expression -> and_expression .)
    AND             shift and go to state 79

  ! AND             [ reduce using rule 57 (expression -> and_expression .) ]


state 44

    (59) and_expression -> relation_expression .

    AND             reduce using rule 59 (and_expression -> relation_expression .)
    OR              reduce using rule 59 (and_expression -> relation_expression .)
    THEN            reduce using rule 59 (and_expression -> relation_expression .)
    ASSIGN          reduce using rule 59 (and_expression -> relation_expression .)
    DO              reduce using rule 59 (and_expression -> relation_expression .)
    SEMICOLON       reduce using rule 59 (and_expression -> relation_expression .)
    END_DOT         reduce using rule 59 (and_expression -> relation_expression .)
    END             reduce using rule 59 (and_expression -> relation_expression .)
    ELSE            reduce using rule 59 (and_expression -> relation_expression .)
    COMMA           reduce using rule 59 (and_expression -> relation_expression .)
    RPAREN          reduce using rule 59 (and_expression -> relation_expression .)
    TO              reduce using rule 59 (and_expression -> relation_expression .)
    DOWNTO          reduce using rule 59 (and_expression -> relation_expression .)


state 45

    (60) relation_expression -> simple_expression . expression_tail
    (61) expression_tail -> . LT simple_expression
    (62) expression_tail -> . GT simple_expression
    (63) expression_tail -> . LE simple_expression
    (64) expression_tail -> . GE simple_expression
    (65) expression_tail -> . NE simple_expression
    (66) expression_tail -> . EQUAL simple_expression
    (67) expression_tail -> . empty
    (86) empty -> .

    LT              shift and go to state 81
    GT              shift and go to state 82
    LE              shift and go to state 83
    GE              shift and go to state 84
    NE              shift and go to state 85
    EQUAL           shift and go to state 86
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    THEN            reduce using rule 86 (empty -> .)
    ASSIGN          reduce using rule 86 (empty -> .)
    DO              reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    END_DOT         reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    TO              reduce using rule 86 (empty -> .)
    DOWNTO          reduce using rule 86 (empty -> .)

    expression_tail                shift and go to state 80
    empty                          shift and go to state 87

state 46

    (68) simple_expression -> term . simple_expression_tail
    (69) simple_expression_tail -> . PLUS term simple_expression_tail
    (70) simple_expression_tail -> . MINUS term simple_expression_tail
    (71) simple_expression_tail -> . empty
    (86) empty -> .

    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    EQUAL           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    THEN            reduce using rule 86 (empty -> .)
    ASSIGN          reduce using rule 86 (empty -> .)
    DO              reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    END_DOT         reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    TO              reduce using rule 86 (empty -> .)
    DOWNTO          reduce using rule 86 (empty -> .)

    simple_expression_tail         shift and go to state 88
    empty                          shift and go to state 91

state 47

    (72) term -> factor . term_tail
    (73) term_tail -> . TIMES factor term_tail
    (74) term_tail -> . DIVIDE factor term_tail
    (75) term_tail -> . MOD factor term_tail
    (76) term_tail -> . REAL_DIVIDE factor term_tail
    (77) term_tail -> . empty
    (86) empty -> .

    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94
    MOD             shift and go to state 95
    REAL_DIVIDE     shift and go to state 96
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    EQUAL           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    THEN            reduce using rule 86 (empty -> .)
    ASSIGN          reduce using rule 86 (empty -> .)
    DO              reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    END_DOT         reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    TO              reduce using rule 86 (empty -> .)
    DOWNTO          reduce using rule 86 (empty -> .)

    term_tail                      shift and go to state 92
    empty                          shift and go to state 97

state 48

    (78) factor -> PLUS . factor
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    factor                         shift and go to state 98

state 49

    (79) factor -> MINUS . factor
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    factor                         shift and go to state 99

state 50

    (80) factor -> LPAREN . expression RPAREN
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    expression                     shift and go to state 100
    and_expression                 shift and go to state 43
    relation_expression            shift and go to state 44
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 51

    (81) factor -> INTEGER .

    TIMES           reduce using rule 81 (factor -> INTEGER .)
    DIVIDE          reduce using rule 81 (factor -> INTEGER .)
    MOD             reduce using rule 81 (factor -> INTEGER .)
    REAL_DIVIDE     reduce using rule 81 (factor -> INTEGER .)
    PLUS            reduce using rule 81 (factor -> INTEGER .)
    MINUS           reduce using rule 81 (factor -> INTEGER .)
    LT              reduce using rule 81 (factor -> INTEGER .)
    GT              reduce using rule 81 (factor -> INTEGER .)
    LE              reduce using rule 81 (factor -> INTEGER .)
    GE              reduce using rule 81 (factor -> INTEGER .)
    NE              reduce using rule 81 (factor -> INTEGER .)
    EQUAL           reduce using rule 81 (factor -> INTEGER .)
    AND             reduce using rule 81 (factor -> INTEGER .)
    OR              reduce using rule 81 (factor -> INTEGER .)
    THEN            reduce using rule 81 (factor -> INTEGER .)
    ASSIGN          reduce using rule 81 (factor -> INTEGER .)
    DO              reduce using rule 81 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 81 (factor -> INTEGER .)
    END_DOT         reduce using rule 81 (factor -> INTEGER .)
    END             reduce using rule 81 (factor -> INTEGER .)
    ELSE            reduce using rule 81 (factor -> INTEGER .)
    COMMA           reduce using rule 81 (factor -> INTEGER .)
    RPAREN          reduce using rule 81 (factor -> INTEGER .)
    TO              reduce using rule 81 (factor -> INTEGER .)
    DOWNTO          reduce using rule 81 (factor -> INTEGER .)


state 52

    (82) factor -> REAL .

    TIMES           reduce using rule 82 (factor -> REAL .)
    DIVIDE          reduce using rule 82 (factor -> REAL .)
    MOD             reduce using rule 82 (factor -> REAL .)
    REAL_DIVIDE     reduce using rule 82 (factor -> REAL .)
    PLUS            reduce using rule 82 (factor -> REAL .)
    MINUS           reduce using rule 82 (factor -> REAL .)
    LT              reduce using rule 82 (factor -> REAL .)
    GT              reduce using rule 82 (factor -> REAL .)
    LE              reduce using rule 82 (factor -> REAL .)
    GE              reduce using rule 82 (factor -> REAL .)
    NE              reduce using rule 82 (factor -> REAL .)
    EQUAL           reduce using rule 82 (factor -> REAL .)
    AND             reduce using rule 82 (factor -> REAL .)
    OR              reduce using rule 82 (factor -> REAL .)
    THEN            reduce using rule 82 (factor -> REAL .)
    ASSIGN          reduce using rule 82 (factor -> REAL .)
    DO              reduce using rule 82 (factor -> REAL .)
    SEMICOLON       reduce using rule 82 (factor -> REAL .)
    END_DOT         reduce using rule 82 (factor -> REAL .)
    END             reduce using rule 82 (factor -> REAL .)
    ELSE            reduce using rule 82 (factor -> REAL .)
    COMMA           reduce using rule 82 (factor -> REAL .)
    RPAREN          reduce using rule 82 (factor -> REAL .)
    TO              reduce using rule 82 (factor -> REAL .)
    DOWNTO          reduce using rule 82 (factor -> REAL .)


state 53

    (83) factor -> IDENTIFIER .

    TIMES           reduce using rule 83 (factor -> IDENTIFIER .)
    DIVIDE          reduce using rule 83 (factor -> IDENTIFIER .)
    MOD             reduce using rule 83 (factor -> IDENTIFIER .)
    REAL_DIVIDE     reduce using rule 83 (factor -> IDENTIFIER .)
    PLUS            reduce using rule 83 (factor -> IDENTIFIER .)
    MINUS           reduce using rule 83 (factor -> IDENTIFIER .)
    LT              reduce using rule 83 (factor -> IDENTIFIER .)
    GT              reduce using rule 83 (factor -> IDENTIFIER .)
    LE              reduce using rule 83 (factor -> IDENTIFIER .)
    GE              reduce using rule 83 (factor -> IDENTIFIER .)
    NE              reduce using rule 83 (factor -> IDENTIFIER .)
    EQUAL           reduce using rule 83 (factor -> IDENTIFIER .)
    AND             reduce using rule 83 (factor -> IDENTIFIER .)
    OR              reduce using rule 83 (factor -> IDENTIFIER .)
    THEN            reduce using rule 83 (factor -> IDENTIFIER .)
    ASSIGN          reduce using rule 83 (factor -> IDENTIFIER .)
    DO              reduce using rule 83 (factor -> IDENTIFIER .)
    SEMICOLON       reduce using rule 83 (factor -> IDENTIFIER .)
    END_DOT         reduce using rule 83 (factor -> IDENTIFIER .)
    END             reduce using rule 83 (factor -> IDENTIFIER .)
    ELSE            reduce using rule 83 (factor -> IDENTIFIER .)
    COMMA           reduce using rule 83 (factor -> IDENTIFIER .)
    RPAREN          reduce using rule 83 (factor -> IDENTIFIER .)
    TO              reduce using rule 83 (factor -> IDENTIFIER .)
    DOWNTO          reduce using rule 83 (factor -> IDENTIFIER .)


state 54

    (84) factor -> TRUE .

    TIMES           reduce using rule 84 (factor -> TRUE .)
    DIVIDE          reduce using rule 84 (factor -> TRUE .)
    MOD             reduce using rule 84 (factor -> TRUE .)
    REAL_DIVIDE     reduce using rule 84 (factor -> TRUE .)
    PLUS            reduce using rule 84 (factor -> TRUE .)
    MINUS           reduce using rule 84 (factor -> TRUE .)
    LT              reduce using rule 84 (factor -> TRUE .)
    GT              reduce using rule 84 (factor -> TRUE .)
    LE              reduce using rule 84 (factor -> TRUE .)
    GE              reduce using rule 84 (factor -> TRUE .)
    NE              reduce using rule 84 (factor -> TRUE .)
    EQUAL           reduce using rule 84 (factor -> TRUE .)
    AND             reduce using rule 84 (factor -> TRUE .)
    OR              reduce using rule 84 (factor -> TRUE .)
    THEN            reduce using rule 84 (factor -> TRUE .)
    ASSIGN          reduce using rule 84 (factor -> TRUE .)
    DO              reduce using rule 84 (factor -> TRUE .)
    SEMICOLON       reduce using rule 84 (factor -> TRUE .)
    END_DOT         reduce using rule 84 (factor -> TRUE .)
    END             reduce using rule 84 (factor -> TRUE .)
    ELSE            reduce using rule 84 (factor -> TRUE .)
    COMMA           reduce using rule 84 (factor -> TRUE .)
    RPAREN          reduce using rule 84 (factor -> TRUE .)
    TO              reduce using rule 84 (factor -> TRUE .)
    DOWNTO          reduce using rule 84 (factor -> TRUE .)


state 55

    (85) factor -> FALSE .

    TIMES           reduce using rule 85 (factor -> FALSE .)
    DIVIDE          reduce using rule 85 (factor -> FALSE .)
    MOD             reduce using rule 85 (factor -> FALSE .)
    REAL_DIVIDE     reduce using rule 85 (factor -> FALSE .)
    PLUS            reduce using rule 85 (factor -> FALSE .)
    MINUS           reduce using rule 85 (factor -> FALSE .)
    LT              reduce using rule 85 (factor -> FALSE .)
    GT              reduce using rule 85 (factor -> FALSE .)
    LE              reduce using rule 85 (factor -> FALSE .)
    GE              reduce using rule 85 (factor -> FALSE .)
    NE              reduce using rule 85 (factor -> FALSE .)
    EQUAL           reduce using rule 85 (factor -> FALSE .)
    AND             reduce using rule 85 (factor -> FALSE .)
    OR              reduce using rule 85 (factor -> FALSE .)
    THEN            reduce using rule 85 (factor -> FALSE .)
    ASSIGN          reduce using rule 85 (factor -> FALSE .)
    DO              reduce using rule 85 (factor -> FALSE .)
    SEMICOLON       reduce using rule 85 (factor -> FALSE .)
    END_DOT         reduce using rule 85 (factor -> FALSE .)
    END             reduce using rule 85 (factor -> FALSE .)
    ELSE            reduce using rule 85 (factor -> FALSE .)
    COMMA           reduce using rule 85 (factor -> FALSE .)
    RPAREN          reduce using rule 85 (factor -> FALSE .)
    TO              reduce using rule 85 (factor -> FALSE .)
    DOWNTO          reduce using rule 85 (factor -> FALSE .)


state 56

    (27) statement -> FOR for_condition . DO for_code

    DO              shift and go to state 101


state 57

    (35) for_condition -> expression . ASSIGN expression to_expression
    (56) expression -> expression . OR and_expression

    ASSIGN          shift and go to state 102
    OR              shift and go to state 103


state 58

    (28) statement -> WHILE if_condition . DO while_code

    DO              shift and go to state 104


state 59

    (7) vardecl -> idlist COLON type . SEMICOLON

    SEMICOLON       shift and go to state 105


state 60

    (11) type -> TYPE_INTEGER .

    SEMICOLON       reduce using rule 11 (type -> TYPE_INTEGER .)


state 61

    (12) type -> TYPE_REAL .

    SEMICOLON       reduce using rule 12 (type -> TYPE_REAL .)


state 62

    (13) type -> BOOLEAN .

    SEMICOLON       reduce using rule 13 (type -> BOOLEAN .)


state 63

    (14) type -> TYPE_STRING .

    SEMICOLON       reduce using rule 14 (type -> TYPE_STRING .)


state 64

    (15) type -> ARRAY . LBRACKET INTEGER RBRACKET OF type

    LBRACKET        shift and go to state 106


state 65

    (9) idlistTail -> COMMA IDENTIFIER . idlistTail
    (9) idlistTail -> . COMMA IDENTIFIER idlistTail
    (10) idlistTail -> . empty
    (86) empty -> .

    COMMA           shift and go to state 29
    COLON           reduce using rule 86 (empty -> .)

    idlistTail                     shift and go to state 107
    empty                          shift and go to state 30

state 66

    (20) expressions_tail -> SEMICOLON expressions .

    END_DOT         reduce using rule 20 (expressions_tail -> SEMICOLON expressions .)
    END             reduce using rule 20 (expressions_tail -> SEMICOLON expressions .)


state 67

    (22) statement -> IDENTIFIER ASSIGN assign_expression .

    SEMICOLON       reduce using rule 22 (statement -> IDENTIFIER ASSIGN assign_expression .)
    END_DOT         reduce using rule 22 (statement -> IDENTIFIER ASSIGN assign_expression .)
    END             reduce using rule 22 (statement -> IDENTIFIER ASSIGN assign_expression .)
    ELSE            reduce using rule 22 (statement -> IDENTIFIER ASSIGN assign_expression .)


state 68

    (54) assign_expression -> expression .
    (56) expression -> expression . OR and_expression

    SEMICOLON       reduce using rule 54 (assign_expression -> expression .)
    END_DOT         reduce using rule 54 (assign_expression -> expression .)
    END             reduce using rule 54 (assign_expression -> expression .)
    ELSE            reduce using rule 54 (assign_expression -> expression .)
    COMMA           reduce using rule 54 (assign_expression -> expression .)
    RPAREN          reduce using rule 54 (assign_expression -> expression .)
    OR              shift and go to state 103


state 69

    (55) assign_expression -> STRING .

    SEMICOLON       reduce using rule 55 (assign_expression -> STRING .)
    END_DOT         reduce using rule 55 (assign_expression -> STRING .)
    END             reduce using rule 55 (assign_expression -> STRING .)
    ELSE            reduce using rule 55 (assign_expression -> STRING .)
    COMMA           reduce using rule 55 (assign_expression -> STRING .)
    RPAREN          reduce using rule 55 (assign_expression -> STRING .)


state 70

    (50) write_statement -> LPAREN string_statement . RPAREN

    RPAREN          shift and go to state 108


state 71

    (52) string_statement -> assign_expression .
    (53) string_statement -> assign_expression . COMMA string_statement

    RPAREN          reduce using rule 52 (string_statement -> assign_expression .)
    COMMA           shift and go to state 109


state 72

    (51) readln_statement -> LPAREN string_statement . RPAREN

    RPAREN          shift and go to state 110


state 73

    (26) statement -> IF if_condition THEN . if_code
    (32) if_code -> . dotless_code opt_else
    (33) if_code -> . statement opt_else
    (34) if_code -> . empty
    (17) dotless_code -> . BEGIN expressions END
    (22) statement -> . IDENTIFIER ASSIGN assign_expression
    (23) statement -> . WRITELN write_statement
    (24) statement -> . WRITE write_statement
    (25) statement -> . READLN readln_statement
    (26) statement -> . IF if_condition THEN if_code
    (27) statement -> . FOR for_condition DO for_code
    (28) statement -> . WHILE if_condition DO while_code
    (86) empty -> .

    BEGIN           shift and go to state 115
    IDENTIFIER      shift and go to state 19
    WRITELN         shift and go to state 20
    WRITE           shift and go to state 21
    READLN          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    ELSE            reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    END_DOT         reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)

    if_code                        shift and go to state 111
    dotless_code                   shift and go to state 112
    statement                      shift and go to state 113
    empty                          shift and go to state 114

state 74

    (45) if_condition -> expression if_condition_tail .

    THEN            reduce using rule 45 (if_condition -> expression if_condition_tail .)
    DO              reduce using rule 45 (if_condition -> expression if_condition_tail .)


state 75

    (56) expression -> expression OR . and_expression
    (46) if_condition_tail -> OR . if_condition_tail_2
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (48) if_condition_tail_2 -> . AND if_condition
    (49) if_condition_tail_2 -> . empty
    (60) relation_expression -> . simple_expression expression_tail
    (86) empty -> .
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    AND             shift and go to state 77
    THEN            reduce using rule 86 (empty -> .)
    DO              reduce using rule 86 (empty -> .)
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    and_expression                 shift and go to state 116
    if_condition_tail_2            shift and go to state 117
    relation_expression            shift and go to state 44
    empty                          shift and go to state 78
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 76

    (47) if_condition_tail -> if_condition_tail_2 .

    THEN            reduce using rule 47 (if_condition_tail -> if_condition_tail_2 .)
    DO              reduce using rule 47 (if_condition_tail -> if_condition_tail_2 .)


state 77

    (48) if_condition_tail_2 -> AND . if_condition
    (45) if_condition -> . expression if_condition_tail
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    if_condition                   shift and go to state 118
    expression                     shift and go to state 42
    and_expression                 shift and go to state 43
    relation_expression            shift and go to state 44
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 78

    (49) if_condition_tail_2 -> empty .

    THEN            reduce using rule 49 (if_condition_tail_2 -> empty .)
    DO              reduce using rule 49 (if_condition_tail_2 -> empty .)


state 79

    (58) and_expression -> and_expression AND . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    relation_expression            shift and go to state 119
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 80

    (60) relation_expression -> simple_expression expression_tail .

    AND             reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    OR              reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    THEN            reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    ASSIGN          reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    DO              reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    SEMICOLON       reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    END_DOT         reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    END             reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    ELSE            reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    COMMA           reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    RPAREN          reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    TO              reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    DOWNTO          reduce using rule 60 (relation_expression -> simple_expression expression_tail .)


state 81

    (61) expression_tail -> LT . simple_expression
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    simple_expression              shift and go to state 120
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 82

    (62) expression_tail -> GT . simple_expression
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    simple_expression              shift and go to state 121
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 83

    (63) expression_tail -> LE . simple_expression
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    simple_expression              shift and go to state 122
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 84

    (64) expression_tail -> GE . simple_expression
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    simple_expression              shift and go to state 123
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 85

    (65) expression_tail -> NE . simple_expression
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    simple_expression              shift and go to state 124
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 86

    (66) expression_tail -> EQUAL . simple_expression
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    simple_expression              shift and go to state 125
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 87

    (67) expression_tail -> empty .

    AND             reduce using rule 67 (expression_tail -> empty .)
    OR              reduce using rule 67 (expression_tail -> empty .)
    THEN            reduce using rule 67 (expression_tail -> empty .)
    ASSIGN          reduce using rule 67 (expression_tail -> empty .)
    DO              reduce using rule 67 (expression_tail -> empty .)
    SEMICOLON       reduce using rule 67 (expression_tail -> empty .)
    END_DOT         reduce using rule 67 (expression_tail -> empty .)
    END             reduce using rule 67 (expression_tail -> empty .)
    ELSE            reduce using rule 67 (expression_tail -> empty .)
    COMMA           reduce using rule 67 (expression_tail -> empty .)
    RPAREN          reduce using rule 67 (expression_tail -> empty .)
    TO              reduce using rule 67 (expression_tail -> empty .)
    DOWNTO          reduce using rule 67 (expression_tail -> empty .)


state 88

    (68) simple_expression -> term simple_expression_tail .

    LT              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    GT              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    LE              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    GE              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    NE              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    EQUAL           reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    AND             reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    OR              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    THEN            reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    ASSIGN          reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    DO              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    SEMICOLON       reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    END_DOT         reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    END             reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    ELSE            reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    COMMA           reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    RPAREN          reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    TO              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    DOWNTO          reduce using rule 68 (simple_expression -> term simple_expression_tail .)


state 89

    (69) simple_expression_tail -> PLUS . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    term                           shift and go to state 126
    factor                         shift and go to state 47

state 90

    (70) simple_expression_tail -> MINUS . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    term                           shift and go to state 127
    factor                         shift and go to state 47

state 91

    (71) simple_expression_tail -> empty .

    LT              reduce using rule 71 (simple_expression_tail -> empty .)
    GT              reduce using rule 71 (simple_expression_tail -> empty .)
    LE              reduce using rule 71 (simple_expression_tail -> empty .)
    GE              reduce using rule 71 (simple_expression_tail -> empty .)
    NE              reduce using rule 71 (simple_expression_tail -> empty .)
    EQUAL           reduce using rule 71 (simple_expression_tail -> empty .)
    AND             reduce using rule 71 (simple_expression_tail -> empty .)
    OR              reduce using rule 71 (simple_expression_tail -> empty .)
    THEN            reduce using rule 71 (simple_expression_tail -> empty .)
    ASSIGN          reduce using rule 71 (simple_expression_tail -> empty .)
    DO              reduce using rule 71 (simple_expression_tail -> empty .)
    SEMICOLON       reduce using rule 71 (simple_expression_tail -> empty .)
    END_DOT         reduce using rule 71 (simple_expression_tail -> empty .)
    END             reduce using rule 71 (simple_expression_tail -> empty .)
    ELSE            reduce using rule 71 (simple_expression_tail -> empty .)
    COMMA           reduce using rule 71 (simple_expression_tail -> empty .)
    RPAREN          reduce using rule 71 (simple_expression_tail -> empty .)
    TO              reduce using rule 71 (simple_expression_tail -> empty .)
    DOWNTO          reduce using rule 71 (simple_expression_tail -> empty .)


state 92

    (72) term -> factor term_tail .

    PLUS            reduce using rule 72 (term -> factor term_tail .)
    MINUS           reduce using rule 72 (term -> factor term_tail .)
    LT              reduce using rule 72 (term -> factor term_tail .)
    GT              reduce using rule 72 (term -> factor term_tail .)
    LE              reduce using rule 72 (term -> factor term_tail .)
    GE              reduce using rule 72 (term -> factor term_tail .)
    NE              reduce using rule 72 (term -> factor term_tail .)
    EQUAL           reduce using rule 72 (term -> factor term_tail .)
    AND             reduce using rule 72 (term -> factor term_tail .)
    OR              reduce using rule 72 (term -> factor term_tail .)
    THEN            reduce using rule 72 (term -> factor term_tail .)
    ASSIGN          reduce using rule 72 (term -> factor term_tail .)
    DO              reduce using rule 72 (term -> factor term_tail .)
    SEMICOLON       reduce using rule 72 (term -> factor term_tail .)
    END_DOT         reduce using rule 72 (term -> factor term_tail .)
    END             reduce using rule 72 (term -> factor term_tail .)
    ELSE            reduce using rule 72 (term -> factor term_tail .)
    COMMA           reduce using rule 72 (term -> factor term_tail .)
    RPAREN          reduce using rule 72 (term -> factor term_tail .)
    TO              reduce using rule 72 (term -> factor term_tail .)
    DOWNTO          reduce using rule 72 (term -> factor term_tail .)


state 93

    (73) term_tail -> TIMES . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    factor                         shift and go to state 128

state 94

    (74) term_tail -> DIVIDE . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    factor                         shift and go to state 129

state 95

    (75) term_tail -> MOD . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    factor                         shift and go to state 130

state 96

    (76) term_tail -> REAL_DIVIDE . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    factor                         shift and go to state 131

state 97

    (77) term_tail -> empty .

    PLUS            reduce using rule 77 (term_tail -> empty .)
    MINUS           reduce using rule 77 (term_tail -> empty .)
    LT              reduce using rule 77 (term_tail -> empty .)
    GT              reduce using rule 77 (term_tail -> empty .)
    LE              reduce using rule 77 (term_tail -> empty .)
    GE              reduce using rule 77 (term_tail -> empty .)
    NE              reduce using rule 77 (term_tail -> empty .)
    EQUAL           reduce using rule 77 (term_tail -> empty .)
    AND             reduce using rule 77 (term_tail -> empty .)
    OR              reduce using rule 77 (term_tail -> empty .)
    THEN            reduce using rule 77 (term_tail -> empty .)
    ASSIGN          reduce using rule 77 (term_tail -> empty .)
    DO              reduce using rule 77 (term_tail -> empty .)
    SEMICOLON       reduce using rule 77 (term_tail -> empty .)
    END_DOT         reduce using rule 77 (term_tail -> empty .)
    END             reduce using rule 77 (term_tail -> empty .)
    ELSE            reduce using rule 77 (term_tail -> empty .)
    COMMA           reduce using rule 77 (term_tail -> empty .)
    RPAREN          reduce using rule 77 (term_tail -> empty .)
    TO              reduce using rule 77 (term_tail -> empty .)
    DOWNTO          reduce using rule 77 (term_tail -> empty .)


state 98

    (78) factor -> PLUS factor .

    TIMES           reduce using rule 78 (factor -> PLUS factor .)
    DIVIDE          reduce using rule 78 (factor -> PLUS factor .)
    MOD             reduce using rule 78 (factor -> PLUS factor .)
    REAL_DIVIDE     reduce using rule 78 (factor -> PLUS factor .)
    PLUS            reduce using rule 78 (factor -> PLUS factor .)
    MINUS           reduce using rule 78 (factor -> PLUS factor .)
    LT              reduce using rule 78 (factor -> PLUS factor .)
    GT              reduce using rule 78 (factor -> PLUS factor .)
    LE              reduce using rule 78 (factor -> PLUS factor .)
    GE              reduce using rule 78 (factor -> PLUS factor .)
    NE              reduce using rule 78 (factor -> PLUS factor .)
    EQUAL           reduce using rule 78 (factor -> PLUS factor .)
    AND             reduce using rule 78 (factor -> PLUS factor .)
    OR              reduce using rule 78 (factor -> PLUS factor .)
    THEN            reduce using rule 78 (factor -> PLUS factor .)
    ASSIGN          reduce using rule 78 (factor -> PLUS factor .)
    DO              reduce using rule 78 (factor -> PLUS factor .)
    SEMICOLON       reduce using rule 78 (factor -> PLUS factor .)
    END_DOT         reduce using rule 78 (factor -> PLUS factor .)
    END             reduce using rule 78 (factor -> PLUS factor .)
    ELSE            reduce using rule 78 (factor -> PLUS factor .)
    COMMA           reduce using rule 78 (factor -> PLUS factor .)
    RPAREN          reduce using rule 78 (factor -> PLUS factor .)
    TO              reduce using rule 78 (factor -> PLUS factor .)
    DOWNTO          reduce using rule 78 (factor -> PLUS factor .)


state 99

    (79) factor -> MINUS factor .

    TIMES           reduce using rule 79 (factor -> MINUS factor .)
    DIVIDE          reduce using rule 79 (factor -> MINUS factor .)
    MOD             reduce using rule 79 (factor -> MINUS factor .)
    REAL_DIVIDE     reduce using rule 79 (factor -> MINUS factor .)
    PLUS            reduce using rule 79 (factor -> MINUS factor .)
    MINUS           reduce using rule 79 (factor -> MINUS factor .)
    LT              reduce using rule 79 (factor -> MINUS factor .)
    GT              reduce using rule 79 (factor -> MINUS factor .)
    LE              reduce using rule 79 (factor -> MINUS factor .)
    GE              reduce using rule 79 (factor -> MINUS factor .)
    NE              reduce using rule 79 (factor -> MINUS factor .)
    EQUAL           reduce using rule 79 (factor -> MINUS factor .)
    AND             reduce using rule 79 (factor -> MINUS factor .)
    OR              reduce using rule 79 (factor -> MINUS factor .)
    THEN            reduce using rule 79 (factor -> MINUS factor .)
    ASSIGN          reduce using rule 79 (factor -> MINUS factor .)
    DO              reduce using rule 79 (factor -> MINUS factor .)
    SEMICOLON       reduce using rule 79 (factor -> MINUS factor .)
    END_DOT         reduce using rule 79 (factor -> MINUS factor .)
    END             reduce using rule 79 (factor -> MINUS factor .)
    ELSE            reduce using rule 79 (factor -> MINUS factor .)
    COMMA           reduce using rule 79 (factor -> MINUS factor .)
    RPAREN          reduce using rule 79 (factor -> MINUS factor .)
    TO              reduce using rule 79 (factor -> MINUS factor .)
    DOWNTO          reduce using rule 79 (factor -> MINUS factor .)


state 100

    (80) factor -> LPAREN expression . RPAREN
    (56) expression -> expression . OR and_expression

    RPAREN          shift and go to state 132
    OR              shift and go to state 103


state 101

    (27) statement -> FOR for_condition DO . for_code
    (38) for_code -> . dotless_code
    (39) for_code -> . statement
    (40) for_code -> . empty
    (17) dotless_code -> . BEGIN expressions END
    (22) statement -> . IDENTIFIER ASSIGN assign_expression
    (23) statement -> . WRITELN write_statement
    (24) statement -> . WRITE write_statement
    (25) statement -> . READLN readln_statement
    (26) statement -> . IF if_condition THEN if_code
    (27) statement -> . FOR for_condition DO for_code
    (28) statement -> . WHILE if_condition DO while_code
    (86) empty -> .

    BEGIN           shift and go to state 115
    IDENTIFIER      shift and go to state 19
    WRITELN         shift and go to state 20
    WRITE           shift and go to state 21
    READLN          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    ELSE            reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    END_DOT         reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)

    for_code                       shift and go to state 133
    dotless_code                   shift and go to state 134
    statement                      shift and go to state 135
    empty                          shift and go to state 136

state 102

    (35) for_condition -> expression ASSIGN . expression to_expression
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    expression                     shift and go to state 137
    and_expression                 shift and go to state 43
    relation_expression            shift and go to state 44
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 103

    (56) expression -> expression OR . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    and_expression                 shift and go to state 116
    relation_expression            shift and go to state 44
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 104

    (28) statement -> WHILE if_condition DO . while_code
    (29) while_code -> . dotless_code
    (30) while_code -> . statement
    (31) while_code -> . empty
    (17) dotless_code -> . BEGIN expressions END
    (22) statement -> . IDENTIFIER ASSIGN assign_expression
    (23) statement -> . WRITELN write_statement
    (24) statement -> . WRITE write_statement
    (25) statement -> . READLN readln_statement
    (26) statement -> . IF if_condition THEN if_code
    (27) statement -> . FOR for_condition DO for_code
    (28) statement -> . WHILE if_condition DO while_code
    (86) empty -> .

    BEGIN           shift and go to state 115
    IDENTIFIER      shift and go to state 19
    WRITELN         shift and go to state 20
    WRITE           shift and go to state 21
    READLN          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    ELSE            reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    END_DOT         reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)

    while_code                     shift and go to state 138
    dotless_code                   shift and go to state 139
    statement                      shift and go to state 140
    empty                          shift and go to state 141

state 105

    (7) vardecl -> idlist COLON type SEMICOLON .

    IDENTIFIER      reduce using rule 7 (vardecl -> idlist COLON type SEMICOLON .)
    BEGIN           reduce using rule 7 (vardecl -> idlist COLON type SEMICOLON .)


state 106

    (15) type -> ARRAY LBRACKET . INTEGER RBRACKET OF type

    INTEGER         shift and go to state 142


state 107

    (9) idlistTail -> COMMA IDENTIFIER idlistTail .

    COLON           reduce using rule 9 (idlistTail -> COMMA IDENTIFIER idlistTail .)


state 108

    (50) write_statement -> LPAREN string_statement RPAREN .

    SEMICOLON       reduce using rule 50 (write_statement -> LPAREN string_statement RPAREN .)
    END_DOT         reduce using rule 50 (write_statement -> LPAREN string_statement RPAREN .)
    END             reduce using rule 50 (write_statement -> LPAREN string_statement RPAREN .)
    ELSE            reduce using rule 50 (write_statement -> LPAREN string_statement RPAREN .)


state 109

    (53) string_statement -> assign_expression COMMA . string_statement
    (52) string_statement -> . assign_expression
    (53) string_statement -> . assign_expression COMMA string_statement
    (54) assign_expression -> . expression
    (55) assign_expression -> . STRING
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    STRING          shift and go to state 69
    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    assign_expression              shift and go to state 71
    string_statement               shift and go to state 143
    expression                     shift and go to state 68
    and_expression                 shift and go to state 43
    relation_expression            shift and go to state 44
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 110

    (51) readln_statement -> LPAREN string_statement RPAREN .

    SEMICOLON       reduce using rule 51 (readln_statement -> LPAREN string_statement RPAREN .)
    END_DOT         reduce using rule 51 (readln_statement -> LPAREN string_statement RPAREN .)
    END             reduce using rule 51 (readln_statement -> LPAREN string_statement RPAREN .)
    ELSE            reduce using rule 51 (readln_statement -> LPAREN string_statement RPAREN .)


state 111

    (26) statement -> IF if_condition THEN if_code .

    SEMICOLON       reduce using rule 26 (statement -> IF if_condition THEN if_code .)
    END_DOT         reduce using rule 26 (statement -> IF if_condition THEN if_code .)
    END             reduce using rule 26 (statement -> IF if_condition THEN if_code .)
    ELSE            reduce using rule 26 (statement -> IF if_condition THEN if_code .)


state 112

    (32) if_code -> dotless_code . opt_else
    (41) opt_else -> . ELSE code_or_statement
    (42) opt_else -> . empty
    (86) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 145
    SEMICOLON       reduce using rule 86 (empty -> .)
    END_DOT         reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)

  ! ELSE            [ reduce using rule 86 (empty -> .) ]

    opt_else                       shift and go to state 144
    empty                          shift and go to state 146

state 113

    (33) if_code -> statement . opt_else
    (41) opt_else -> . ELSE code_or_statement
    (42) opt_else -> . empty
    (86) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 145
    SEMICOLON       reduce using rule 86 (empty -> .)
    END_DOT         reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)

  ! ELSE            [ reduce using rule 86 (empty -> .) ]

    opt_else                       shift and go to state 147
    empty                          shift and go to state 146

state 114

    (34) if_code -> empty .

    ELSE            reduce using rule 34 (if_code -> empty .)
    SEMICOLON       reduce using rule 34 (if_code -> empty .)
    END_DOT         reduce using rule 34 (if_code -> empty .)
    END             reduce using rule 34 (if_code -> empty .)


state 115

    (17) dotless_code -> BEGIN . expressions END
    (18) expressions -> . statement expressions_tail
    (19) expressions -> . empty
    (22) statement -> . IDENTIFIER ASSIGN assign_expression
    (23) statement -> . WRITELN write_statement
    (24) statement -> . WRITE write_statement
    (25) statement -> . READLN readln_statement
    (26) statement -> . IF if_condition THEN if_code
    (27) statement -> . FOR for_condition DO for_code
    (28) statement -> . WHILE if_condition DO while_code
    (86) empty -> .

    IDENTIFIER      shift and go to state 19
    WRITELN         shift and go to state 20
    WRITE           shift and go to state 21
    READLN          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    END             reduce using rule 86 (empty -> .)

    expressions                    shift and go to state 148
    statement                      shift and go to state 17
    empty                          shift and go to state 18

state 116

    (56) expression -> expression OR and_expression .
    (58) and_expression -> and_expression . AND relation_expression

  ! shift/reduce conflict for AND resolved as shift
    OR              reduce using rule 56 (expression -> expression OR and_expression .)
    THEN            reduce using rule 56 (expression -> expression OR and_expression .)
    ASSIGN          reduce using rule 56 (expression -> expression OR and_expression .)
    DO              reduce using rule 56 (expression -> expression OR and_expression .)
    SEMICOLON       reduce using rule 56 (expression -> expression OR and_expression .)
    END_DOT         reduce using rule 56 (expression -> expression OR and_expression .)
    END             reduce using rule 56 (expression -> expression OR and_expression .)
    ELSE            reduce using rule 56 (expression -> expression OR and_expression .)
    COMMA           reduce using rule 56 (expression -> expression OR and_expression .)
    RPAREN          reduce using rule 56 (expression -> expression OR and_expression .)
    TO              reduce using rule 56 (expression -> expression OR and_expression .)
    DOWNTO          reduce using rule 56 (expression -> expression OR and_expression .)
    AND             shift and go to state 79

  ! AND             [ reduce using rule 56 (expression -> expression OR and_expression .) ]


state 117

    (46) if_condition_tail -> OR if_condition_tail_2 .

    THEN            reduce using rule 46 (if_condition_tail -> OR if_condition_tail_2 .)
    DO              reduce using rule 46 (if_condition_tail -> OR if_condition_tail_2 .)


state 118

    (48) if_condition_tail_2 -> AND if_condition .

    THEN            reduce using rule 48 (if_condition_tail_2 -> AND if_condition .)
    DO              reduce using rule 48 (if_condition_tail_2 -> AND if_condition .)


state 119

    (58) and_expression -> and_expression AND relation_expression .

    AND             reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    OR              reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    THEN            reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    ASSIGN          reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    DO              reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    SEMICOLON       reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    END_DOT         reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    END             reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    ELSE            reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    COMMA           reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    RPAREN          reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    TO              reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    DOWNTO          reduce using rule 58 (and_expression -> and_expression AND relation_expression .)


state 120

    (61) expression_tail -> LT simple_expression .

    AND             reduce using rule 61 (expression_tail -> LT simple_expression .)
    OR              reduce using rule 61 (expression_tail -> LT simple_expression .)
    THEN            reduce using rule 61 (expression_tail -> LT simple_expression .)
    ASSIGN          reduce using rule 61 (expression_tail -> LT simple_expression .)
    DO              reduce using rule 61 (expression_tail -> LT simple_expression .)
    SEMICOLON       reduce using rule 61 (expression_tail -> LT simple_expression .)
    END_DOT         reduce using rule 61 (expression_tail -> LT simple_expression .)
    END             reduce using rule 61 (expression_tail -> LT simple_expression .)
    ELSE            reduce using rule 61 (expression_tail -> LT simple_expression .)
    COMMA           reduce using rule 61 (expression_tail -> LT simple_expression .)
    RPAREN          reduce using rule 61 (expression_tail -> LT simple_expression .)
    TO              reduce using rule 61 (expression_tail -> LT simple_expression .)
    DOWNTO          reduce using rule 61 (expression_tail -> LT simple_expression .)


state 121

    (62) expression_tail -> GT simple_expression .

    AND             reduce using rule 62 (expression_tail -> GT simple_expression .)
    OR              reduce using rule 62 (expression_tail -> GT simple_expression .)
    THEN            reduce using rule 62 (expression_tail -> GT simple_expression .)
    ASSIGN          reduce using rule 62 (expression_tail -> GT simple_expression .)
    DO              reduce using rule 62 (expression_tail -> GT simple_expression .)
    SEMICOLON       reduce using rule 62 (expression_tail -> GT simple_expression .)
    END_DOT         reduce using rule 62 (expression_tail -> GT simple_expression .)
    END             reduce using rule 62 (expression_tail -> GT simple_expression .)
    ELSE            reduce using rule 62 (expression_tail -> GT simple_expression .)
    COMMA           reduce using rule 62 (expression_tail -> GT simple_expression .)
    RPAREN          reduce using rule 62 (expression_tail -> GT simple_expression .)
    TO              reduce using rule 62 (expression_tail -> GT simple_expression .)
    DOWNTO          reduce using rule 62 (expression_tail -> GT simple_expression .)


state 122

    (63) expression_tail -> LE simple_expression .

    AND             reduce using rule 63 (expression_tail -> LE simple_expression .)
    OR              reduce using rule 63 (expression_tail -> LE simple_expression .)
    THEN            reduce using rule 63 (expression_tail -> LE simple_expression .)
    ASSIGN          reduce using rule 63 (expression_tail -> LE simple_expression .)
    DO              reduce using rule 63 (expression_tail -> LE simple_expression .)
    SEMICOLON       reduce using rule 63 (expression_tail -> LE simple_expression .)
    END_DOT         reduce using rule 63 (expression_tail -> LE simple_expression .)
    END             reduce using rule 63 (expression_tail -> LE simple_expression .)
    ELSE            reduce using rule 63 (expression_tail -> LE simple_expression .)
    COMMA           reduce using rule 63 (expression_tail -> LE simple_expression .)
    RPAREN          reduce using rule 63 (expression_tail -> LE simple_expression .)
    TO              reduce using rule 63 (expression_tail -> LE simple_expression .)
    DOWNTO          reduce using rule 63 (expression_tail -> LE simple_expression .)


state 123

    (64) expression_tail -> GE simple_expression .

    AND             reduce using rule 64 (expression_tail -> GE simple_expression .)
    OR              reduce using rule 64 (expression_tail -> GE simple_expression .)
    THEN            reduce using rule 64 (expression_tail -> GE simple_expression .)
    ASSIGN          reduce using rule 64 (expression_tail -> GE simple_expression .)
    DO              reduce using rule 64 (expression_tail -> GE simple_expression .)
    SEMICOLON       reduce using rule 64 (expression_tail -> GE simple_expression .)
    END_DOT         reduce using rule 64 (expression_tail -> GE simple_expression .)
    END             reduce using rule 64 (expression_tail -> GE simple_expression .)
    ELSE            reduce using rule 64 (expression_tail -> GE simple_expression .)
    COMMA           reduce using rule 64 (expression_tail -> GE simple_expression .)
    RPAREN          reduce using rule 64 (expression_tail -> GE simple_expression .)
    TO              reduce using rule 64 (expression_tail -> GE simple_expression .)
    DOWNTO          reduce using rule 64 (expression_tail -> GE simple_expression .)


state 124

    (65) expression_tail -> NE simple_expression .

    AND             reduce using rule 65 (expression_tail -> NE simple_expression .)
    OR              reduce using rule 65 (expression_tail -> NE simple_expression .)
    THEN            reduce using rule 65 (expression_tail -> NE simple_expression .)
    ASSIGN          reduce using rule 65 (expression_tail -> NE simple_expression .)
    DO              reduce using rule 65 (expression_tail -> NE simple_expression .)
    SEMICOLON       reduce using rule 65 (expression_tail -> NE simple_expression .)
    END_DOT         reduce using rule 65 (expression_tail -> NE simple_expression .)
    END             reduce using rule 65 (expression_tail -> NE simple_expression .)
    ELSE            reduce using rule 65 (expression_tail -> NE simple_expression .)
    COMMA           reduce using rule 65 (expression_tail -> NE simple_expression .)
    RPAREN          reduce using rule 65 (expression_tail -> NE simple_expression .)
    TO              reduce using rule 65 (expression_tail -> NE simple_expression .)
    DOWNTO          reduce using rule 65 (expression_tail -> NE simple_expression .)


state 125

    (66) expression_tail -> EQUAL simple_expression .

    AND             reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    OR              reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    THEN            reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    ASSIGN          reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    DO              reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    SEMICOLON       reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    END_DOT         reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    END             reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    ELSE            reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    COMMA           reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    RPAREN          reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    TO              reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    DOWNTO          reduce using rule 66 (expression_tail -> EQUAL simple_expression .)


state 126

    (69) simple_expression_tail -> PLUS term . simple_expression_tail
    (69) simple_expression_tail -> . PLUS term simple_expression_tail
    (70) simple_expression_tail -> . MINUS term simple_expression_tail
    (71) simple_expression_tail -> . empty
    (86) empty -> .

    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    EQUAL           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    THEN            reduce using rule 86 (empty -> .)
    ASSIGN          reduce using rule 86 (empty -> .)
    DO              reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    END_DOT         reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    TO              reduce using rule 86 (empty -> .)
    DOWNTO          reduce using rule 86 (empty -> .)

    simple_expression_tail         shift and go to state 149
    empty                          shift and go to state 91

state 127

    (70) simple_expression_tail -> MINUS term . simple_expression_tail
    (69) simple_expression_tail -> . PLUS term simple_expression_tail
    (70) simple_expression_tail -> . MINUS term simple_expression_tail
    (71) simple_expression_tail -> . empty
    (86) empty -> .

    PLUS            shift and go to state 89
    MINUS           shift and go to state 90
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    EQUAL           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    THEN            reduce using rule 86 (empty -> .)
    ASSIGN          reduce using rule 86 (empty -> .)
    DO              reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    END_DOT         reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    TO              reduce using rule 86 (empty -> .)
    DOWNTO          reduce using rule 86 (empty -> .)

    simple_expression_tail         shift and go to state 150
    empty                          shift and go to state 91

state 128

    (73) term_tail -> TIMES factor . term_tail
    (73) term_tail -> . TIMES factor term_tail
    (74) term_tail -> . DIVIDE factor term_tail
    (75) term_tail -> . MOD factor term_tail
    (76) term_tail -> . REAL_DIVIDE factor term_tail
    (77) term_tail -> . empty
    (86) empty -> .

    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94
    MOD             shift and go to state 95
    REAL_DIVIDE     shift and go to state 96
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    EQUAL           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    THEN            reduce using rule 86 (empty -> .)
    ASSIGN          reduce using rule 86 (empty -> .)
    DO              reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    END_DOT         reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    TO              reduce using rule 86 (empty -> .)
    DOWNTO          reduce using rule 86 (empty -> .)

    term_tail                      shift and go to state 151
    empty                          shift and go to state 97

state 129

    (74) term_tail -> DIVIDE factor . term_tail
    (73) term_tail -> . TIMES factor term_tail
    (74) term_tail -> . DIVIDE factor term_tail
    (75) term_tail -> . MOD factor term_tail
    (76) term_tail -> . REAL_DIVIDE factor term_tail
    (77) term_tail -> . empty
    (86) empty -> .

    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94
    MOD             shift and go to state 95
    REAL_DIVIDE     shift and go to state 96
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    EQUAL           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    THEN            reduce using rule 86 (empty -> .)
    ASSIGN          reduce using rule 86 (empty -> .)
    DO              reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    END_DOT         reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    TO              reduce using rule 86 (empty -> .)
    DOWNTO          reduce using rule 86 (empty -> .)

    term_tail                      shift and go to state 152
    empty                          shift and go to state 97

state 130

    (75) term_tail -> MOD factor . term_tail
    (73) term_tail -> . TIMES factor term_tail
    (74) term_tail -> . DIVIDE factor term_tail
    (75) term_tail -> . MOD factor term_tail
    (76) term_tail -> . REAL_DIVIDE factor term_tail
    (77) term_tail -> . empty
    (86) empty -> .

    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94
    MOD             shift and go to state 95
    REAL_DIVIDE     shift and go to state 96
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    EQUAL           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    THEN            reduce using rule 86 (empty -> .)
    ASSIGN          reduce using rule 86 (empty -> .)
    DO              reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    END_DOT         reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    TO              reduce using rule 86 (empty -> .)
    DOWNTO          reduce using rule 86 (empty -> .)

    term_tail                      shift and go to state 153
    empty                          shift and go to state 97

state 131

    (76) term_tail -> REAL_DIVIDE factor . term_tail
    (73) term_tail -> . TIMES factor term_tail
    (74) term_tail -> . DIVIDE factor term_tail
    (75) term_tail -> . MOD factor term_tail
    (76) term_tail -> . REAL_DIVIDE factor term_tail
    (77) term_tail -> . empty
    (86) empty -> .

    TIMES           shift and go to state 93
    DIVIDE          shift and go to state 94
    MOD             shift and go to state 95
    REAL_DIVIDE     shift and go to state 96
    PLUS            reduce using rule 86 (empty -> .)
    MINUS           reduce using rule 86 (empty -> .)
    LT              reduce using rule 86 (empty -> .)
    GT              reduce using rule 86 (empty -> .)
    LE              reduce using rule 86 (empty -> .)
    GE              reduce using rule 86 (empty -> .)
    NE              reduce using rule 86 (empty -> .)
    EQUAL           reduce using rule 86 (empty -> .)
    AND             reduce using rule 86 (empty -> .)
    OR              reduce using rule 86 (empty -> .)
    THEN            reduce using rule 86 (empty -> .)
    ASSIGN          reduce using rule 86 (empty -> .)
    DO              reduce using rule 86 (empty -> .)
    SEMICOLON       reduce using rule 86 (empty -> .)
    END_DOT         reduce using rule 86 (empty -> .)
    END             reduce using rule 86 (empty -> .)
    ELSE            reduce using rule 86 (empty -> .)
    COMMA           reduce using rule 86 (empty -> .)
    RPAREN          reduce using rule 86 (empty -> .)
    TO              reduce using rule 86 (empty -> .)
    DOWNTO          reduce using rule 86 (empty -> .)

    term_tail                      shift and go to state 154
    empty                          shift and go to state 97

state 132

    (80) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    REAL_DIVIDE     reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    END_DOT         reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 80 (factor -> LPAREN expression RPAREN .)


state 133

    (27) statement -> FOR for_condition DO for_code .

    SEMICOLON       reduce using rule 27 (statement -> FOR for_condition DO for_code .)
    END_DOT         reduce using rule 27 (statement -> FOR for_condition DO for_code .)
    END             reduce using rule 27 (statement -> FOR for_condition DO for_code .)
    ELSE            reduce using rule 27 (statement -> FOR for_condition DO for_code .)


state 134

    (38) for_code -> dotless_code .

    ELSE            reduce using rule 38 (for_code -> dotless_code .)
    SEMICOLON       reduce using rule 38 (for_code -> dotless_code .)
    END_DOT         reduce using rule 38 (for_code -> dotless_code .)
    END             reduce using rule 38 (for_code -> dotless_code .)


state 135

    (39) for_code -> statement .

    ELSE            reduce using rule 39 (for_code -> statement .)
    SEMICOLON       reduce using rule 39 (for_code -> statement .)
    END_DOT         reduce using rule 39 (for_code -> statement .)
    END             reduce using rule 39 (for_code -> statement .)


state 136

    (40) for_code -> empty .

    ELSE            reduce using rule 40 (for_code -> empty .)
    SEMICOLON       reduce using rule 40 (for_code -> empty .)
    END_DOT         reduce using rule 40 (for_code -> empty .)
    END             reduce using rule 40 (for_code -> empty .)


state 137

    (35) for_condition -> expression ASSIGN expression . to_expression
    (56) expression -> expression . OR and_expression
    (36) to_expression -> . TO expression
    (37) to_expression -> . DOWNTO expression

    OR              shift and go to state 103
    TO              shift and go to state 156
    DOWNTO          shift and go to state 157

    to_expression                  shift and go to state 155

state 138

    (28) statement -> WHILE if_condition DO while_code .

    SEMICOLON       reduce using rule 28 (statement -> WHILE if_condition DO while_code .)
    END_DOT         reduce using rule 28 (statement -> WHILE if_condition DO while_code .)
    END             reduce using rule 28 (statement -> WHILE if_condition DO while_code .)
    ELSE            reduce using rule 28 (statement -> WHILE if_condition DO while_code .)


state 139

    (29) while_code -> dotless_code .

    ELSE            reduce using rule 29 (while_code -> dotless_code .)
    SEMICOLON       reduce using rule 29 (while_code -> dotless_code .)
    END_DOT         reduce using rule 29 (while_code -> dotless_code .)
    END             reduce using rule 29 (while_code -> dotless_code .)


state 140

    (30) while_code -> statement .

    ELSE            reduce using rule 30 (while_code -> statement .)
    SEMICOLON       reduce using rule 30 (while_code -> statement .)
    END_DOT         reduce using rule 30 (while_code -> statement .)
    END             reduce using rule 30 (while_code -> statement .)


state 141

    (31) while_code -> empty .

    ELSE            reduce using rule 31 (while_code -> empty .)
    SEMICOLON       reduce using rule 31 (while_code -> empty .)
    END_DOT         reduce using rule 31 (while_code -> empty .)
    END             reduce using rule 31 (while_code -> empty .)


state 142

    (15) type -> ARRAY LBRACKET INTEGER . RBRACKET OF type

    RBRACKET        shift and go to state 158


state 143

    (53) string_statement -> assign_expression COMMA string_statement .

    RPAREN          reduce using rule 53 (string_statement -> assign_expression COMMA string_statement .)


state 144

    (32) if_code -> dotless_code opt_else .

    ELSE            reduce using rule 32 (if_code -> dotless_code opt_else .)
    SEMICOLON       reduce using rule 32 (if_code -> dotless_code opt_else .)
    END_DOT         reduce using rule 32 (if_code -> dotless_code opt_else .)
    END             reduce using rule 32 (if_code -> dotless_code opt_else .)


state 145

    (41) opt_else -> ELSE . code_or_statement
    (43) code_or_statement -> . dotless_code
    (44) code_or_statement -> . statement
    (17) dotless_code -> . BEGIN expressions END
    (22) statement -> . IDENTIFIER ASSIGN assign_expression
    (23) statement -> . WRITELN write_statement
    (24) statement -> . WRITE write_statement
    (25) statement -> . READLN readln_statement
    (26) statement -> . IF if_condition THEN if_code
    (27) statement -> . FOR for_condition DO for_code
    (28) statement -> . WHILE if_condition DO while_code

    BEGIN           shift and go to state 115
    IDENTIFIER      shift and go to state 19
    WRITELN         shift and go to state 20
    WRITE           shift and go to state 21
    READLN          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

    code_or_statement              shift and go to state 159
    dotless_code                   shift and go to state 160
    statement                      shift and go to state 161

state 146

    (42) opt_else -> empty .

    ELSE            reduce using rule 42 (opt_else -> empty .)
    SEMICOLON       reduce using rule 42 (opt_else -> empty .)
    END_DOT         reduce using rule 42 (opt_else -> empty .)
    END             reduce using rule 42 (opt_else -> empty .)


state 147

    (33) if_code -> statement opt_else .

    ELSE            reduce using rule 33 (if_code -> statement opt_else .)
    SEMICOLON       reduce using rule 33 (if_code -> statement opt_else .)
    END_DOT         reduce using rule 33 (if_code -> statement opt_else .)
    END             reduce using rule 33 (if_code -> statement opt_else .)


state 148

    (17) dotless_code -> BEGIN expressions . END

    END             shift and go to state 162


state 149

    (69) simple_expression_tail -> PLUS term simple_expression_tail .

    LT              reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    GT              reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    LE              reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    GE              reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    NE              reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    EQUAL           reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    AND             reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    OR              reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    THEN            reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    ASSIGN          reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    DO              reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    SEMICOLON       reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    END_DOT         reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    END             reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    ELSE            reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    COMMA           reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    RPAREN          reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    TO              reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    DOWNTO          reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)


state 150

    (70) simple_expression_tail -> MINUS term simple_expression_tail .

    LT              reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    GT              reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    LE              reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    GE              reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    NE              reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    EQUAL           reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    AND             reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    OR              reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    THEN            reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    ASSIGN          reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    DO              reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    SEMICOLON       reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    END_DOT         reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    END             reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    ELSE            reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    COMMA           reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    RPAREN          reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    TO              reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    DOWNTO          reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)


state 151

    (73) term_tail -> TIMES factor term_tail .

    PLUS            reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    MINUS           reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    LT              reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    GT              reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    LE              reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    GE              reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    NE              reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    EQUAL           reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    AND             reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    OR              reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    THEN            reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    ASSIGN          reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    DO              reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    SEMICOLON       reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    END_DOT         reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    END             reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    ELSE            reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    COMMA           reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    RPAREN          reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    TO              reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    DOWNTO          reduce using rule 73 (term_tail -> TIMES factor term_tail .)


state 152

    (74) term_tail -> DIVIDE factor term_tail .

    PLUS            reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    MINUS           reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    LT              reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    GT              reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    LE              reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    GE              reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    NE              reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    EQUAL           reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    AND             reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    OR              reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    THEN            reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    ASSIGN          reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    DO              reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    SEMICOLON       reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    END_DOT         reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    END             reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    ELSE            reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    COMMA           reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    RPAREN          reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    TO              reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    DOWNTO          reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)


state 153

    (75) term_tail -> MOD factor term_tail .

    PLUS            reduce using rule 75 (term_tail -> MOD factor term_tail .)
    MINUS           reduce using rule 75 (term_tail -> MOD factor term_tail .)
    LT              reduce using rule 75 (term_tail -> MOD factor term_tail .)
    GT              reduce using rule 75 (term_tail -> MOD factor term_tail .)
    LE              reduce using rule 75 (term_tail -> MOD factor term_tail .)
    GE              reduce using rule 75 (term_tail -> MOD factor term_tail .)
    NE              reduce using rule 75 (term_tail -> MOD factor term_tail .)
    EQUAL           reduce using rule 75 (term_tail -> MOD factor term_tail .)
    AND             reduce using rule 75 (term_tail -> MOD factor term_tail .)
    OR              reduce using rule 75 (term_tail -> MOD factor term_tail .)
    THEN            reduce using rule 75 (term_tail -> MOD factor term_tail .)
    ASSIGN          reduce using rule 75 (term_tail -> MOD factor term_tail .)
    DO              reduce using rule 75 (term_tail -> MOD factor term_tail .)
    SEMICOLON       reduce using rule 75 (term_tail -> MOD factor term_tail .)
    END_DOT         reduce using rule 75 (term_tail -> MOD factor term_tail .)
    END             reduce using rule 75 (term_tail -> MOD factor term_tail .)
    ELSE            reduce using rule 75 (term_tail -> MOD factor term_tail .)
    COMMA           reduce using rule 75 (term_tail -> MOD factor term_tail .)
    RPAREN          reduce using rule 75 (term_tail -> MOD factor term_tail .)
    TO              reduce using rule 75 (term_tail -> MOD factor term_tail .)
    DOWNTO          reduce using rule 75 (term_tail -> MOD factor term_tail .)


state 154

    (76) term_tail -> REAL_DIVIDE factor term_tail .

    PLUS            reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    MINUS           reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    LT              reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    GT              reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    LE              reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    GE              reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    NE              reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    EQUAL           reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    AND             reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    OR              reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    THEN            reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    ASSIGN          reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    DO              reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    SEMICOLON       reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    END_DOT         reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    END             reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    ELSE            reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    COMMA           reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    RPAREN          reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    TO              reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    DOWNTO          reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)


state 155

    (35) for_condition -> expression ASSIGN expression to_expression .

    DO              reduce using rule 35 (for_condition -> expression ASSIGN expression to_expression .)


state 156

    (36) to_expression -> TO . expression
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    expression                     shift and go to state 163
    and_expression                 shift and go to state 43
    relation_expression            shift and go to state 44
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 157

    (37) to_expression -> DOWNTO . expression
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 48
    MINUS           shift and go to state 49
    LPAREN          shift and go to state 50
    INTEGER         shift and go to state 51
    REAL            shift and go to state 52
    IDENTIFIER      shift and go to state 53
    TRUE            shift and go to state 54
    FALSE           shift and go to state 55

    expression                     shift and go to state 164
    and_expression                 shift and go to state 43
    relation_expression            shift and go to state 44
    simple_expression              shift and go to state 45
    term                           shift and go to state 46
    factor                         shift and go to state 47

state 158

    (15) type -> ARRAY LBRACKET INTEGER RBRACKET . OF type

    OF              shift and go to state 165


state 159

    (41) opt_else -> ELSE code_or_statement .

    ELSE            reduce using rule 41 (opt_else -> ELSE code_or_statement .)
    SEMICOLON       reduce using rule 41 (opt_else -> ELSE code_or_statement .)
    END_DOT         reduce using rule 41 (opt_else -> ELSE code_or_statement .)
    END             reduce using rule 41 (opt_else -> ELSE code_or_statement .)


state 160

    (43) code_or_statement -> dotless_code .

    ELSE            reduce using rule 43 (code_or_statement -> dotless_code .)
    SEMICOLON       reduce using rule 43 (code_or_statement -> dotless_code .)
    END_DOT         reduce using rule 43 (code_or_statement -> dotless_code .)
    END             reduce using rule 43 (code_or_statement -> dotless_code .)


state 161

    (44) code_or_statement -> statement .

    ELSE            reduce using rule 44 (code_or_statement -> statement .)
    SEMICOLON       reduce using rule 44 (code_or_statement -> statement .)
    END_DOT         reduce using rule 44 (code_or_statement -> statement .)
    END             reduce using rule 44 (code_or_statement -> statement .)


state 162

    (17) dotless_code -> BEGIN expressions END .

    ELSE            reduce using rule 17 (dotless_code -> BEGIN expressions END .)
    SEMICOLON       reduce using rule 17 (dotless_code -> BEGIN expressions END .)
    END_DOT         reduce using rule 17 (dotless_code -> BEGIN expressions END .)
    END             reduce using rule 17 (dotless_code -> BEGIN expressions END .)


state 163

    (36) to_expression -> TO expression .
    (56) expression -> expression . OR and_expression

    DO              reduce using rule 36 (to_expression -> TO expression .)
    OR              shift and go to state 103


state 164

    (37) to_expression -> DOWNTO expression .
    (56) expression -> expression . OR and_expression

    DO              reduce using rule 37 (to_expression -> DOWNTO expression .)
    OR              shift and go to state 103


state 165

    (15) type -> ARRAY LBRACKET INTEGER RBRACKET OF . type
    (11) type -> . TYPE_INTEGER
    (12) type -> . TYPE_REAL
    (13) type -> . BOOLEAN
    (14) type -> . TYPE_STRING
    (15) type -> . ARRAY LBRACKET INTEGER RBRACKET OF type

    TYPE_INTEGER    shift and go to state 60
    TYPE_REAL       shift and go to state 61
    BOOLEAN         shift and go to state 62
    TYPE_STRING     shift and go to state 63
    ARRAY           shift and go to state 64

    type                           shift and go to state 166

state 166

    (15) type -> ARRAY LBRACKET INTEGER RBRACKET OF type .

    SEMICOLON       reduce using rule 15 (type -> ARRAY LBRACKET INTEGER RBRACKET OF type .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 43 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 112 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 113 resolved as shift
WARNING: shift/reduce conflict for AND in state 116 resolved as shift
