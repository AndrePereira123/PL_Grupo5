Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    FUNCTION
    NOT
    PROCEDURE

Grammar

Rule 0     S' -> file
Rule 1     file -> PROGRAM name vars code
Rule 2     name -> IDENTIFIER SEMICOLON
Rule 3     vars -> VAR varstail
Rule 4     vars -> empty
Rule 5     varstail -> vardecl varstail
Rule 6     varstail -> empty
Rule 7     vardecl -> idlist COLON type SEMICOLON
Rule 8     idlist -> IDENTIFIER idlistTail
Rule 9     idlistTail -> COMMA IDENTIFIER idlistTail
Rule 10    idlistTail -> empty
Rule 11    type -> TYPE_INTEGER
Rule 12    type -> TYPE_REAL
Rule 13    type -> BOOLEAN
Rule 14    type -> TYPE_STRING
Rule 15    type -> ARRAY LBRACKET arraytypes RBRACKET OF type
Rule 16    arraytypes -> INTEGER
Rule 17    arraytypes -> INTEGER DOT DOT INTEGER
Rule 18    code -> BEGIN expressions END_DOT
Rule 19    dotless_code -> BEGIN expressions END
Rule 20    expressions -> statement expressions_tail
Rule 21    expressions -> empty
Rule 22    expressions_tail -> SEMICOLON expressions
Rule 23    expressions_tail -> empty
Rule 24    statement -> IDENTIFIER identifier_assign_expression
Rule 25    statement -> WRITELN write_statement
Rule 26    statement -> WRITE write_statement
Rule 27    statement -> READLN readln_statement
Rule 28    statement -> IF if_condition THEN if_code
Rule 29    statement -> FOR for_condition DO for_code
Rule 30    statement -> WHILE if_condition DO while_code
Rule 31    identifier_assign_expression -> ASSIGN assign_expression
Rule 32    identifier_assign_expression -> LBRACKET expression RBRACKET ASSIGN assign_expression
Rule 33    while_code -> dotless_code
Rule 34    while_code -> statement
Rule 35    while_code -> empty
Rule 36    if_code -> dotless_code opt_else
Rule 37    if_code -> statement opt_else
Rule 38    if_code -> empty
Rule 39    for_condition -> expression ASSIGN expression to_expression
Rule 40    to_expression -> TO expression
Rule 41    to_expression -> DOWNTO expression
Rule 42    for_code -> dotless_code
Rule 43    for_code -> statement
Rule 44    for_code -> empty
Rule 45    opt_else -> ELSE code_or_statement
Rule 46    opt_else -> empty
Rule 47    code_or_statement -> dotless_code
Rule 48    code_or_statement -> statement
Rule 49    if_condition -> expression
Rule 50    write_statement -> LPAREN string_statement RPAREN
Rule 51    readln_statement -> LPAREN string_statement RPAREN
Rule 52    string_statement -> assign_expression
Rule 53    string_statement -> assign_expression COMMA string_statement
Rule 54    assign_expression -> expression
Rule 55    assign_expression -> STRING
Rule 56    expression -> expression OR and_expression
Rule 57    expression -> and_expression
Rule 58    and_expression -> and_expression AND relation_expression
Rule 59    and_expression -> relation_expression
Rule 60    relation_expression -> simple_expression expression_tail
Rule 61    expression_tail -> LT simple_expression
Rule 62    expression_tail -> GT simple_expression
Rule 63    expression_tail -> LE simple_expression
Rule 64    expression_tail -> GE simple_expression
Rule 65    expression_tail -> NE simple_expression
Rule 66    expression_tail -> EQUAL simple_expression
Rule 67    expression_tail -> empty
Rule 68    simple_expression -> term simple_expression_tail
Rule 69    simple_expression_tail -> PLUS term simple_expression_tail
Rule 70    simple_expression_tail -> MINUS term simple_expression_tail
Rule 71    simple_expression_tail -> empty
Rule 72    term -> factor term_tail
Rule 73    term_tail -> TIMES factor term_tail
Rule 74    term_tail -> DIVIDE factor term_tail
Rule 75    term_tail -> MOD factor term_tail
Rule 76    term_tail -> REAL_DIVIDE factor term_tail
Rule 77    term_tail -> empty
Rule 78    factor -> PLUS factor
Rule 79    factor -> MINUS factor
Rule 80    factor -> LPAREN expression RPAREN
Rule 81    factor -> INTEGER
Rule 82    factor -> REAL
Rule 83    factor -> IDENTIFIER identifier_expression
Rule 84    factor -> TRUE
Rule 85    factor -> FALSE
Rule 86    identifier_expression -> LBRACKET expression RBRACKET
Rule 87    identifier_expression -> empty
Rule 88    empty -> <empty>

Terminals, with rules where they appear

AND                  : 58
ARRAY                : 15
ASSIGN               : 31 32 39
BEGIN                : 18 19
BOOLEAN              : 13
COLON                : 7
COMMA                : 9 53
COMMENT              : 
DIVIDE               : 74
DO                   : 29 30
DOT                  : 17 17
DOWNTO               : 41
ELSE                 : 45
END                  : 19
END_DOT              : 18
EQUAL                : 66
FALSE                : 85
FOR                  : 29
FUNCTION             : 
GE                   : 64
GT                   : 62
IDENTIFIER           : 2 8 9 24 83
IF                   : 28
INTEGER              : 16 17 17 81
LBRACKET             : 15 32 86
LE                   : 63
LPAREN               : 50 51 80
LT                   : 61
MINUS                : 70 79
MOD                  : 75
NE                   : 65
NOT                  : 
OF                   : 15
OR                   : 56
PLUS                 : 69 78
PROCEDURE            : 
PROGRAM              : 1
RBRACKET             : 15 32 86
READLN               : 27
REAL                 : 82
REAL_DIVIDE          : 76
RPAREN               : 50 51 80
SEMICOLON            : 2 7 22
STRING               : 55
THEN                 : 28
TIMES                : 73
TO                   : 40
TRUE                 : 84
TYPE_INTEGER         : 11
TYPE_REAL            : 12
TYPE_STRING          : 14
VAR                  : 3
WHILE                : 30
WRITE                : 26
WRITELN              : 25
error                : 

Nonterminals, with rules where they appear

and_expression       : 56 57 58
arraytypes           : 15
assign_expression    : 31 32 52 53
code                 : 1
code_or_statement    : 45
dotless_code         : 33 36 42 47
empty                : 4 6 10 21 23 35 38 44 46 67 71 77 87
expression           : 32 39 39 40 41 49 54 56 80 86
expression_tail      : 60
expressions          : 18 19 22
expressions_tail     : 20
factor               : 72 73 74 75 76 78 79
file                 : 0
for_code             : 29
for_condition        : 29
identifier_assign_expression : 24
identifier_expression : 83
idlist               : 7
idlistTail           : 8 9
if_code              : 28
if_condition         : 28 30
name                 : 1
opt_else             : 36 37
readln_statement     : 27
relation_expression  : 58 59
simple_expression    : 60 61 62 63 64 65 66
simple_expression_tail : 68 69 70
statement            : 20 34 37 43 48
string_statement     : 50 51 53
term                 : 68 69 70
term_tail            : 72 73 74 75 76
to_expression        : 39
type                 : 7 15
vardecl              : 5
vars                 : 1
varstail             : 3 5
while_code           : 30
write_statement      : 25 26

Parsing method: LALR

state 0

    (0) S' -> . file
    (1) file -> . PROGRAM name vars code

    PROGRAM         shift and go to state 2

    file                           shift and go to state 1

state 1

    (0) S' -> file .



state 2

    (1) file -> PROGRAM . name vars code
    (2) name -> . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 4

    name                           shift and go to state 3

state 3

    (1) file -> PROGRAM name . vars code
    (3) vars -> . VAR varstail
    (4) vars -> . empty
    (88) empty -> .

    VAR             shift and go to state 6
    BEGIN           reduce using rule 88 (empty -> .)

    vars                           shift and go to state 5
    empty                          shift and go to state 7

state 4

    (2) name -> IDENTIFIER . SEMICOLON

    SEMICOLON       shift and go to state 8


state 5

    (1) file -> PROGRAM name vars . code
    (18) code -> . BEGIN expressions END_DOT

    BEGIN           shift and go to state 10

    code                           shift and go to state 9

state 6

    (3) vars -> VAR . varstail
    (5) varstail -> . vardecl varstail
    (6) varstail -> . empty
    (7) vardecl -> . idlist COLON type SEMICOLON
    (88) empty -> .
    (8) idlist -> . IDENTIFIER idlistTail

    BEGIN           reduce using rule 88 (empty -> .)
    IDENTIFIER      shift and go to state 15

    varstail                       shift and go to state 11
    vardecl                        shift and go to state 12
    empty                          shift and go to state 13
    idlist                         shift and go to state 14

state 7

    (4) vars -> empty .

    BEGIN           reduce using rule 4 (vars -> empty .)


state 8

    (2) name -> IDENTIFIER SEMICOLON .

    VAR             reduce using rule 2 (name -> IDENTIFIER SEMICOLON .)
    BEGIN           reduce using rule 2 (name -> IDENTIFIER SEMICOLON .)


state 9

    (1) file -> PROGRAM name vars code .

    $end            reduce using rule 1 (file -> PROGRAM name vars code .)


state 10

    (18) code -> BEGIN . expressions END_DOT
    (20) expressions -> . statement expressions_tail
    (21) expressions -> . empty
    (24) statement -> . IDENTIFIER identifier_assign_expression
    (25) statement -> . WRITELN write_statement
    (26) statement -> . WRITE write_statement
    (27) statement -> . READLN readln_statement
    (28) statement -> . IF if_condition THEN if_code
    (29) statement -> . FOR for_condition DO for_code
    (30) statement -> . WHILE if_condition DO while_code
    (88) empty -> .

    IDENTIFIER      shift and go to state 19
    WRITELN         shift and go to state 20
    WRITE           shift and go to state 21
    READLN          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    END_DOT         reduce using rule 88 (empty -> .)

    expressions                    shift and go to state 16
    statement                      shift and go to state 17
    empty                          shift and go to state 18

state 11

    (3) vars -> VAR varstail .

    BEGIN           reduce using rule 3 (vars -> VAR varstail .)


state 12

    (5) varstail -> vardecl . varstail
    (5) varstail -> . vardecl varstail
    (6) varstail -> . empty
    (7) vardecl -> . idlist COLON type SEMICOLON
    (88) empty -> .
    (8) idlist -> . IDENTIFIER idlistTail

    BEGIN           reduce using rule 88 (empty -> .)
    IDENTIFIER      shift and go to state 15

    vardecl                        shift and go to state 12
    varstail                       shift and go to state 26
    empty                          shift and go to state 13
    idlist                         shift and go to state 14

state 13

    (6) varstail -> empty .

    BEGIN           reduce using rule 6 (varstail -> empty .)


state 14

    (7) vardecl -> idlist . COLON type SEMICOLON

    COLON           shift and go to state 27


state 15

    (8) idlist -> IDENTIFIER . idlistTail
    (9) idlistTail -> . COMMA IDENTIFIER idlistTail
    (10) idlistTail -> . empty
    (88) empty -> .

    COMMA           shift and go to state 29
    COLON           reduce using rule 88 (empty -> .)

    idlistTail                     shift and go to state 28
    empty                          shift and go to state 30

state 16

    (18) code -> BEGIN expressions . END_DOT

    END_DOT         shift and go to state 31


state 17

    (20) expressions -> statement . expressions_tail
    (22) expressions_tail -> . SEMICOLON expressions
    (23) expressions_tail -> . empty
    (88) empty -> .

    SEMICOLON       shift and go to state 33
    END_DOT         reduce using rule 88 (empty -> .)
    END             reduce using rule 88 (empty -> .)

    expressions_tail               shift and go to state 32
    empty                          shift and go to state 34

state 18

    (21) expressions -> empty .

    END_DOT         reduce using rule 21 (expressions -> empty .)
    END             reduce using rule 21 (expressions -> empty .)


state 19

    (24) statement -> IDENTIFIER . identifier_assign_expression
    (31) identifier_assign_expression -> . ASSIGN assign_expression
    (32) identifier_assign_expression -> . LBRACKET expression RBRACKET ASSIGN assign_expression

    ASSIGN          shift and go to state 36
    LBRACKET        shift and go to state 37

    identifier_assign_expression   shift and go to state 35

state 20

    (25) statement -> WRITELN . write_statement
    (50) write_statement -> . LPAREN string_statement RPAREN

    LPAREN          shift and go to state 39

    write_statement                shift and go to state 38

state 21

    (26) statement -> WRITE . write_statement
    (50) write_statement -> . LPAREN string_statement RPAREN

    LPAREN          shift and go to state 39

    write_statement                shift and go to state 40

state 22

    (27) statement -> READLN . readln_statement
    (51) readln_statement -> . LPAREN string_statement RPAREN

    LPAREN          shift and go to state 42

    readln_statement               shift and go to state 41

state 23

    (28) statement -> IF . if_condition THEN if_code
    (49) if_condition -> . expression
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    if_condition                   shift and go to state 43
    expression                     shift and go to state 44
    and_expression                 shift and go to state 45
    relation_expression            shift and go to state 46
    simple_expression              shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 24

    (29) statement -> FOR . for_condition DO for_code
    (39) for_condition -> . expression ASSIGN expression to_expression
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    for_condition                  shift and go to state 58
    expression                     shift and go to state 59
    and_expression                 shift and go to state 45
    relation_expression            shift and go to state 46
    simple_expression              shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 25

    (30) statement -> WHILE . if_condition DO while_code
    (49) if_condition -> . expression
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    if_condition                   shift and go to state 60
    expression                     shift and go to state 44
    and_expression                 shift and go to state 45
    relation_expression            shift and go to state 46
    simple_expression              shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 26

    (5) varstail -> vardecl varstail .

    BEGIN           reduce using rule 5 (varstail -> vardecl varstail .)


state 27

    (7) vardecl -> idlist COLON . type SEMICOLON
    (11) type -> . TYPE_INTEGER
    (12) type -> . TYPE_REAL
    (13) type -> . BOOLEAN
    (14) type -> . TYPE_STRING
    (15) type -> . ARRAY LBRACKET arraytypes RBRACKET OF type

    TYPE_INTEGER    shift and go to state 62
    TYPE_REAL       shift and go to state 63
    BOOLEAN         shift and go to state 64
    TYPE_STRING     shift and go to state 65
    ARRAY           shift and go to state 66

    type                           shift and go to state 61

state 28

    (8) idlist -> IDENTIFIER idlistTail .

    COLON           reduce using rule 8 (idlist -> IDENTIFIER idlistTail .)


state 29

    (9) idlistTail -> COMMA . IDENTIFIER idlistTail

    IDENTIFIER      shift and go to state 67


state 30

    (10) idlistTail -> empty .

    COLON           reduce using rule 10 (idlistTail -> empty .)


state 31

    (18) code -> BEGIN expressions END_DOT .

    $end            reduce using rule 18 (code -> BEGIN expressions END_DOT .)


state 32

    (20) expressions -> statement expressions_tail .

    END_DOT         reduce using rule 20 (expressions -> statement expressions_tail .)
    END             reduce using rule 20 (expressions -> statement expressions_tail .)


state 33

    (22) expressions_tail -> SEMICOLON . expressions
    (20) expressions -> . statement expressions_tail
    (21) expressions -> . empty
    (24) statement -> . IDENTIFIER identifier_assign_expression
    (25) statement -> . WRITELN write_statement
    (26) statement -> . WRITE write_statement
    (27) statement -> . READLN readln_statement
    (28) statement -> . IF if_condition THEN if_code
    (29) statement -> . FOR for_condition DO for_code
    (30) statement -> . WHILE if_condition DO while_code
    (88) empty -> .

    IDENTIFIER      shift and go to state 19
    WRITELN         shift and go to state 20
    WRITE           shift and go to state 21
    READLN          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    END_DOT         reduce using rule 88 (empty -> .)
    END             reduce using rule 88 (empty -> .)

    expressions                    shift and go to state 68
    statement                      shift and go to state 17
    empty                          shift and go to state 18

state 34

    (23) expressions_tail -> empty .

    END_DOT         reduce using rule 23 (expressions_tail -> empty .)
    END             reduce using rule 23 (expressions_tail -> empty .)


state 35

    (24) statement -> IDENTIFIER identifier_assign_expression .

    SEMICOLON       reduce using rule 24 (statement -> IDENTIFIER identifier_assign_expression .)
    END_DOT         reduce using rule 24 (statement -> IDENTIFIER identifier_assign_expression .)
    END             reduce using rule 24 (statement -> IDENTIFIER identifier_assign_expression .)
    ELSE            reduce using rule 24 (statement -> IDENTIFIER identifier_assign_expression .)


state 36

    (31) identifier_assign_expression -> ASSIGN . assign_expression
    (54) assign_expression -> . expression
    (55) assign_expression -> . STRING
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    STRING          shift and go to state 71
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    assign_expression              shift and go to state 69
    expression                     shift and go to state 70
    and_expression                 shift and go to state 45
    relation_expression            shift and go to state 46
    simple_expression              shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 37

    (32) identifier_assign_expression -> LBRACKET . expression RBRACKET ASSIGN assign_expression
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 72
    and_expression                 shift and go to state 45
    relation_expression            shift and go to state 46
    simple_expression              shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 38

    (25) statement -> WRITELN write_statement .

    SEMICOLON       reduce using rule 25 (statement -> WRITELN write_statement .)
    END_DOT         reduce using rule 25 (statement -> WRITELN write_statement .)
    END             reduce using rule 25 (statement -> WRITELN write_statement .)
    ELSE            reduce using rule 25 (statement -> WRITELN write_statement .)


state 39

    (50) write_statement -> LPAREN . string_statement RPAREN
    (52) string_statement -> . assign_expression
    (53) string_statement -> . assign_expression COMMA string_statement
    (54) assign_expression -> . expression
    (55) assign_expression -> . STRING
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    STRING          shift and go to state 71
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    string_statement               shift and go to state 73
    assign_expression              shift and go to state 74
    expression                     shift and go to state 70
    and_expression                 shift and go to state 45
    relation_expression            shift and go to state 46
    simple_expression              shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 40

    (26) statement -> WRITE write_statement .

    SEMICOLON       reduce using rule 26 (statement -> WRITE write_statement .)
    END_DOT         reduce using rule 26 (statement -> WRITE write_statement .)
    END             reduce using rule 26 (statement -> WRITE write_statement .)
    ELSE            reduce using rule 26 (statement -> WRITE write_statement .)


state 41

    (27) statement -> READLN readln_statement .

    SEMICOLON       reduce using rule 27 (statement -> READLN readln_statement .)
    END_DOT         reduce using rule 27 (statement -> READLN readln_statement .)
    END             reduce using rule 27 (statement -> READLN readln_statement .)
    ELSE            reduce using rule 27 (statement -> READLN readln_statement .)


state 42

    (51) readln_statement -> LPAREN . string_statement RPAREN
    (52) string_statement -> . assign_expression
    (53) string_statement -> . assign_expression COMMA string_statement
    (54) assign_expression -> . expression
    (55) assign_expression -> . STRING
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    STRING          shift and go to state 71
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    string_statement               shift and go to state 75
    assign_expression              shift and go to state 74
    expression                     shift and go to state 70
    and_expression                 shift and go to state 45
    relation_expression            shift and go to state 46
    simple_expression              shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 43

    (28) statement -> IF if_condition . THEN if_code

    THEN            shift and go to state 76


state 44

    (49) if_condition -> expression .
    (56) expression -> expression . OR and_expression

    THEN            reduce using rule 49 (if_condition -> expression .)
    DO              reduce using rule 49 (if_condition -> expression .)
    OR              shift and go to state 77


state 45

    (57) expression -> and_expression .
    (58) and_expression -> and_expression . AND relation_expression

    OR              reduce using rule 57 (expression -> and_expression .)
    THEN            reduce using rule 57 (expression -> and_expression .)
    ASSIGN          reduce using rule 57 (expression -> and_expression .)
    DO              reduce using rule 57 (expression -> and_expression .)
    SEMICOLON       reduce using rule 57 (expression -> and_expression .)
    END_DOT         reduce using rule 57 (expression -> and_expression .)
    END             reduce using rule 57 (expression -> and_expression .)
    ELSE            reduce using rule 57 (expression -> and_expression .)
    RBRACKET        reduce using rule 57 (expression -> and_expression .)
    COMMA           reduce using rule 57 (expression -> and_expression .)
    RPAREN          reduce using rule 57 (expression -> and_expression .)
    TO              reduce using rule 57 (expression -> and_expression .)
    DOWNTO          reduce using rule 57 (expression -> and_expression .)
    AND             shift and go to state 78


state 46

    (59) and_expression -> relation_expression .

    AND             reduce using rule 59 (and_expression -> relation_expression .)
    OR              reduce using rule 59 (and_expression -> relation_expression .)
    THEN            reduce using rule 59 (and_expression -> relation_expression .)
    ASSIGN          reduce using rule 59 (and_expression -> relation_expression .)
    DO              reduce using rule 59 (and_expression -> relation_expression .)
    SEMICOLON       reduce using rule 59 (and_expression -> relation_expression .)
    END_DOT         reduce using rule 59 (and_expression -> relation_expression .)
    END             reduce using rule 59 (and_expression -> relation_expression .)
    ELSE            reduce using rule 59 (and_expression -> relation_expression .)
    RBRACKET        reduce using rule 59 (and_expression -> relation_expression .)
    COMMA           reduce using rule 59 (and_expression -> relation_expression .)
    RPAREN          reduce using rule 59 (and_expression -> relation_expression .)
    TO              reduce using rule 59 (and_expression -> relation_expression .)
    DOWNTO          reduce using rule 59 (and_expression -> relation_expression .)


state 47

    (60) relation_expression -> simple_expression . expression_tail
    (61) expression_tail -> . LT simple_expression
    (62) expression_tail -> . GT simple_expression
    (63) expression_tail -> . LE simple_expression
    (64) expression_tail -> . GE simple_expression
    (65) expression_tail -> . NE simple_expression
    (66) expression_tail -> . EQUAL simple_expression
    (67) expression_tail -> . empty
    (88) empty -> .

    LT              shift and go to state 80
    GT              shift and go to state 81
    LE              shift and go to state 82
    GE              shift and go to state 83
    NE              shift and go to state 84
    EQUAL           shift and go to state 85
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    THEN            reduce using rule 88 (empty -> .)
    ASSIGN          reduce using rule 88 (empty -> .)
    DO              reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    END_DOT         reduce using rule 88 (empty -> .)
    END             reduce using rule 88 (empty -> .)
    ELSE            reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    TO              reduce using rule 88 (empty -> .)
    DOWNTO          reduce using rule 88 (empty -> .)

    expression_tail                shift and go to state 79
    empty                          shift and go to state 86

state 48

    (68) simple_expression -> term . simple_expression_tail
    (69) simple_expression_tail -> . PLUS term simple_expression_tail
    (70) simple_expression_tail -> . MINUS term simple_expression_tail
    (71) simple_expression_tail -> . empty
    (88) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    LT              reduce using rule 88 (empty -> .)
    GT              reduce using rule 88 (empty -> .)
    LE              reduce using rule 88 (empty -> .)
    GE              reduce using rule 88 (empty -> .)
    NE              reduce using rule 88 (empty -> .)
    EQUAL           reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    THEN            reduce using rule 88 (empty -> .)
    ASSIGN          reduce using rule 88 (empty -> .)
    DO              reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    END_DOT         reduce using rule 88 (empty -> .)
    END             reduce using rule 88 (empty -> .)
    ELSE            reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    TO              reduce using rule 88 (empty -> .)
    DOWNTO          reduce using rule 88 (empty -> .)

    simple_expression_tail         shift and go to state 87
    empty                          shift and go to state 90

state 49

    (72) term -> factor . term_tail
    (73) term_tail -> . TIMES factor term_tail
    (74) term_tail -> . DIVIDE factor term_tail
    (75) term_tail -> . MOD factor term_tail
    (76) term_tail -> . REAL_DIVIDE factor term_tail
    (77) term_tail -> . empty
    (88) empty -> .

    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94
    REAL_DIVIDE     shift and go to state 95
    PLUS            reduce using rule 88 (empty -> .)
    MINUS           reduce using rule 88 (empty -> .)
    LT              reduce using rule 88 (empty -> .)
    GT              reduce using rule 88 (empty -> .)
    LE              reduce using rule 88 (empty -> .)
    GE              reduce using rule 88 (empty -> .)
    NE              reduce using rule 88 (empty -> .)
    EQUAL           reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    THEN            reduce using rule 88 (empty -> .)
    ASSIGN          reduce using rule 88 (empty -> .)
    DO              reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    END_DOT         reduce using rule 88 (empty -> .)
    END             reduce using rule 88 (empty -> .)
    ELSE            reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    TO              reduce using rule 88 (empty -> .)
    DOWNTO          reduce using rule 88 (empty -> .)

    term_tail                      shift and go to state 91
    empty                          shift and go to state 96

state 50

    (78) factor -> PLUS . factor
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    factor                         shift and go to state 97

state 51

    (79) factor -> MINUS . factor
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    factor                         shift and go to state 98

state 52

    (80) factor -> LPAREN . expression RPAREN
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 99
    and_expression                 shift and go to state 45
    relation_expression            shift and go to state 46
    simple_expression              shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 53

    (81) factor -> INTEGER .

    TIMES           reduce using rule 81 (factor -> INTEGER .)
    DIVIDE          reduce using rule 81 (factor -> INTEGER .)
    MOD             reduce using rule 81 (factor -> INTEGER .)
    REAL_DIVIDE     reduce using rule 81 (factor -> INTEGER .)
    PLUS            reduce using rule 81 (factor -> INTEGER .)
    MINUS           reduce using rule 81 (factor -> INTEGER .)
    LT              reduce using rule 81 (factor -> INTEGER .)
    GT              reduce using rule 81 (factor -> INTEGER .)
    LE              reduce using rule 81 (factor -> INTEGER .)
    GE              reduce using rule 81 (factor -> INTEGER .)
    NE              reduce using rule 81 (factor -> INTEGER .)
    EQUAL           reduce using rule 81 (factor -> INTEGER .)
    AND             reduce using rule 81 (factor -> INTEGER .)
    OR              reduce using rule 81 (factor -> INTEGER .)
    THEN            reduce using rule 81 (factor -> INTEGER .)
    ASSIGN          reduce using rule 81 (factor -> INTEGER .)
    DO              reduce using rule 81 (factor -> INTEGER .)
    SEMICOLON       reduce using rule 81 (factor -> INTEGER .)
    END_DOT         reduce using rule 81 (factor -> INTEGER .)
    END             reduce using rule 81 (factor -> INTEGER .)
    ELSE            reduce using rule 81 (factor -> INTEGER .)
    RBRACKET        reduce using rule 81 (factor -> INTEGER .)
    COMMA           reduce using rule 81 (factor -> INTEGER .)
    RPAREN          reduce using rule 81 (factor -> INTEGER .)
    TO              reduce using rule 81 (factor -> INTEGER .)
    DOWNTO          reduce using rule 81 (factor -> INTEGER .)


state 54

    (82) factor -> REAL .

    TIMES           reduce using rule 82 (factor -> REAL .)
    DIVIDE          reduce using rule 82 (factor -> REAL .)
    MOD             reduce using rule 82 (factor -> REAL .)
    REAL_DIVIDE     reduce using rule 82 (factor -> REAL .)
    PLUS            reduce using rule 82 (factor -> REAL .)
    MINUS           reduce using rule 82 (factor -> REAL .)
    LT              reduce using rule 82 (factor -> REAL .)
    GT              reduce using rule 82 (factor -> REAL .)
    LE              reduce using rule 82 (factor -> REAL .)
    GE              reduce using rule 82 (factor -> REAL .)
    NE              reduce using rule 82 (factor -> REAL .)
    EQUAL           reduce using rule 82 (factor -> REAL .)
    AND             reduce using rule 82 (factor -> REAL .)
    OR              reduce using rule 82 (factor -> REAL .)
    THEN            reduce using rule 82 (factor -> REAL .)
    ASSIGN          reduce using rule 82 (factor -> REAL .)
    DO              reduce using rule 82 (factor -> REAL .)
    SEMICOLON       reduce using rule 82 (factor -> REAL .)
    END_DOT         reduce using rule 82 (factor -> REAL .)
    END             reduce using rule 82 (factor -> REAL .)
    ELSE            reduce using rule 82 (factor -> REAL .)
    RBRACKET        reduce using rule 82 (factor -> REAL .)
    COMMA           reduce using rule 82 (factor -> REAL .)
    RPAREN          reduce using rule 82 (factor -> REAL .)
    TO              reduce using rule 82 (factor -> REAL .)
    DOWNTO          reduce using rule 82 (factor -> REAL .)


state 55

    (83) factor -> IDENTIFIER . identifier_expression
    (86) identifier_expression -> . LBRACKET expression RBRACKET
    (87) identifier_expression -> . empty
    (88) empty -> .

    LBRACKET        shift and go to state 101
    TIMES           reduce using rule 88 (empty -> .)
    DIVIDE          reduce using rule 88 (empty -> .)
    MOD             reduce using rule 88 (empty -> .)
    REAL_DIVIDE     reduce using rule 88 (empty -> .)
    PLUS            reduce using rule 88 (empty -> .)
    MINUS           reduce using rule 88 (empty -> .)
    LT              reduce using rule 88 (empty -> .)
    GT              reduce using rule 88 (empty -> .)
    LE              reduce using rule 88 (empty -> .)
    GE              reduce using rule 88 (empty -> .)
    NE              reduce using rule 88 (empty -> .)
    EQUAL           reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    THEN            reduce using rule 88 (empty -> .)
    ASSIGN          reduce using rule 88 (empty -> .)
    DO              reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    END_DOT         reduce using rule 88 (empty -> .)
    END             reduce using rule 88 (empty -> .)
    ELSE            reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    TO              reduce using rule 88 (empty -> .)
    DOWNTO          reduce using rule 88 (empty -> .)

    identifier_expression          shift and go to state 100
    empty                          shift and go to state 102

state 56

    (84) factor -> TRUE .

    TIMES           reduce using rule 84 (factor -> TRUE .)
    DIVIDE          reduce using rule 84 (factor -> TRUE .)
    MOD             reduce using rule 84 (factor -> TRUE .)
    REAL_DIVIDE     reduce using rule 84 (factor -> TRUE .)
    PLUS            reduce using rule 84 (factor -> TRUE .)
    MINUS           reduce using rule 84 (factor -> TRUE .)
    LT              reduce using rule 84 (factor -> TRUE .)
    GT              reduce using rule 84 (factor -> TRUE .)
    LE              reduce using rule 84 (factor -> TRUE .)
    GE              reduce using rule 84 (factor -> TRUE .)
    NE              reduce using rule 84 (factor -> TRUE .)
    EQUAL           reduce using rule 84 (factor -> TRUE .)
    AND             reduce using rule 84 (factor -> TRUE .)
    OR              reduce using rule 84 (factor -> TRUE .)
    THEN            reduce using rule 84 (factor -> TRUE .)
    ASSIGN          reduce using rule 84 (factor -> TRUE .)
    DO              reduce using rule 84 (factor -> TRUE .)
    SEMICOLON       reduce using rule 84 (factor -> TRUE .)
    END_DOT         reduce using rule 84 (factor -> TRUE .)
    END             reduce using rule 84 (factor -> TRUE .)
    ELSE            reduce using rule 84 (factor -> TRUE .)
    RBRACKET        reduce using rule 84 (factor -> TRUE .)
    COMMA           reduce using rule 84 (factor -> TRUE .)
    RPAREN          reduce using rule 84 (factor -> TRUE .)
    TO              reduce using rule 84 (factor -> TRUE .)
    DOWNTO          reduce using rule 84 (factor -> TRUE .)


state 57

    (85) factor -> FALSE .

    TIMES           reduce using rule 85 (factor -> FALSE .)
    DIVIDE          reduce using rule 85 (factor -> FALSE .)
    MOD             reduce using rule 85 (factor -> FALSE .)
    REAL_DIVIDE     reduce using rule 85 (factor -> FALSE .)
    PLUS            reduce using rule 85 (factor -> FALSE .)
    MINUS           reduce using rule 85 (factor -> FALSE .)
    LT              reduce using rule 85 (factor -> FALSE .)
    GT              reduce using rule 85 (factor -> FALSE .)
    LE              reduce using rule 85 (factor -> FALSE .)
    GE              reduce using rule 85 (factor -> FALSE .)
    NE              reduce using rule 85 (factor -> FALSE .)
    EQUAL           reduce using rule 85 (factor -> FALSE .)
    AND             reduce using rule 85 (factor -> FALSE .)
    OR              reduce using rule 85 (factor -> FALSE .)
    THEN            reduce using rule 85 (factor -> FALSE .)
    ASSIGN          reduce using rule 85 (factor -> FALSE .)
    DO              reduce using rule 85 (factor -> FALSE .)
    SEMICOLON       reduce using rule 85 (factor -> FALSE .)
    END_DOT         reduce using rule 85 (factor -> FALSE .)
    END             reduce using rule 85 (factor -> FALSE .)
    ELSE            reduce using rule 85 (factor -> FALSE .)
    RBRACKET        reduce using rule 85 (factor -> FALSE .)
    COMMA           reduce using rule 85 (factor -> FALSE .)
    RPAREN          reduce using rule 85 (factor -> FALSE .)
    TO              reduce using rule 85 (factor -> FALSE .)
    DOWNTO          reduce using rule 85 (factor -> FALSE .)


state 58

    (29) statement -> FOR for_condition . DO for_code

    DO              shift and go to state 103


state 59

    (39) for_condition -> expression . ASSIGN expression to_expression
    (56) expression -> expression . OR and_expression

    ASSIGN          shift and go to state 104
    OR              shift and go to state 77


state 60

    (30) statement -> WHILE if_condition . DO while_code

    DO              shift and go to state 105


state 61

    (7) vardecl -> idlist COLON type . SEMICOLON

    SEMICOLON       shift and go to state 106


state 62

    (11) type -> TYPE_INTEGER .

    SEMICOLON       reduce using rule 11 (type -> TYPE_INTEGER .)


state 63

    (12) type -> TYPE_REAL .

    SEMICOLON       reduce using rule 12 (type -> TYPE_REAL .)


state 64

    (13) type -> BOOLEAN .

    SEMICOLON       reduce using rule 13 (type -> BOOLEAN .)


state 65

    (14) type -> TYPE_STRING .

    SEMICOLON       reduce using rule 14 (type -> TYPE_STRING .)


state 66

    (15) type -> ARRAY . LBRACKET arraytypes RBRACKET OF type

    LBRACKET        shift and go to state 107


state 67

    (9) idlistTail -> COMMA IDENTIFIER . idlistTail
    (9) idlistTail -> . COMMA IDENTIFIER idlistTail
    (10) idlistTail -> . empty
    (88) empty -> .

    COMMA           shift and go to state 29
    COLON           reduce using rule 88 (empty -> .)

    idlistTail                     shift and go to state 108
    empty                          shift and go to state 30

state 68

    (22) expressions_tail -> SEMICOLON expressions .

    END_DOT         reduce using rule 22 (expressions_tail -> SEMICOLON expressions .)
    END             reduce using rule 22 (expressions_tail -> SEMICOLON expressions .)


state 69

    (31) identifier_assign_expression -> ASSIGN assign_expression .

    SEMICOLON       reduce using rule 31 (identifier_assign_expression -> ASSIGN assign_expression .)
    END_DOT         reduce using rule 31 (identifier_assign_expression -> ASSIGN assign_expression .)
    END             reduce using rule 31 (identifier_assign_expression -> ASSIGN assign_expression .)
    ELSE            reduce using rule 31 (identifier_assign_expression -> ASSIGN assign_expression .)


state 70

    (54) assign_expression -> expression .
    (56) expression -> expression . OR and_expression

    SEMICOLON       reduce using rule 54 (assign_expression -> expression .)
    END_DOT         reduce using rule 54 (assign_expression -> expression .)
    END             reduce using rule 54 (assign_expression -> expression .)
    ELSE            reduce using rule 54 (assign_expression -> expression .)
    COMMA           reduce using rule 54 (assign_expression -> expression .)
    RPAREN          reduce using rule 54 (assign_expression -> expression .)
    OR              shift and go to state 77


state 71

    (55) assign_expression -> STRING .

    SEMICOLON       reduce using rule 55 (assign_expression -> STRING .)
    END_DOT         reduce using rule 55 (assign_expression -> STRING .)
    END             reduce using rule 55 (assign_expression -> STRING .)
    ELSE            reduce using rule 55 (assign_expression -> STRING .)
    COMMA           reduce using rule 55 (assign_expression -> STRING .)
    RPAREN          reduce using rule 55 (assign_expression -> STRING .)


state 72

    (32) identifier_assign_expression -> LBRACKET expression . RBRACKET ASSIGN assign_expression
    (56) expression -> expression . OR and_expression

    RBRACKET        shift and go to state 109
    OR              shift and go to state 77


state 73

    (50) write_statement -> LPAREN string_statement . RPAREN

    RPAREN          shift and go to state 110


state 74

    (52) string_statement -> assign_expression .
    (53) string_statement -> assign_expression . COMMA string_statement

    RPAREN          reduce using rule 52 (string_statement -> assign_expression .)
    COMMA           shift and go to state 111


state 75

    (51) readln_statement -> LPAREN string_statement . RPAREN

    RPAREN          shift and go to state 112


state 76

    (28) statement -> IF if_condition THEN . if_code
    (36) if_code -> . dotless_code opt_else
    (37) if_code -> . statement opt_else
    (38) if_code -> . empty
    (19) dotless_code -> . BEGIN expressions END
    (24) statement -> . IDENTIFIER identifier_assign_expression
    (25) statement -> . WRITELN write_statement
    (26) statement -> . WRITE write_statement
    (27) statement -> . READLN readln_statement
    (28) statement -> . IF if_condition THEN if_code
    (29) statement -> . FOR for_condition DO for_code
    (30) statement -> . WHILE if_condition DO while_code
    (88) empty -> .

    BEGIN           shift and go to state 117
    IDENTIFIER      shift and go to state 19
    WRITELN         shift and go to state 20
    WRITE           shift and go to state 21
    READLN          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    ELSE            reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    END_DOT         reduce using rule 88 (empty -> .)
    END             reduce using rule 88 (empty -> .)

    if_code                        shift and go to state 113
    dotless_code                   shift and go to state 114
    statement                      shift and go to state 115
    empty                          shift and go to state 116

state 77

    (56) expression -> expression OR . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    and_expression                 shift and go to state 118
    relation_expression            shift and go to state 46
    simple_expression              shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 78

    (58) and_expression -> and_expression AND . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    relation_expression            shift and go to state 119
    simple_expression              shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 79

    (60) relation_expression -> simple_expression expression_tail .

    AND             reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    OR              reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    THEN            reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    ASSIGN          reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    DO              reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    SEMICOLON       reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    END_DOT         reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    END             reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    ELSE            reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    RBRACKET        reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    COMMA           reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    RPAREN          reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    TO              reduce using rule 60 (relation_expression -> simple_expression expression_tail .)
    DOWNTO          reduce using rule 60 (relation_expression -> simple_expression expression_tail .)


state 80

    (61) expression_tail -> LT . simple_expression
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    simple_expression              shift and go to state 120
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 81

    (62) expression_tail -> GT . simple_expression
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    simple_expression              shift and go to state 121
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 82

    (63) expression_tail -> LE . simple_expression
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    simple_expression              shift and go to state 122
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 83

    (64) expression_tail -> GE . simple_expression
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    simple_expression              shift and go to state 123
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 84

    (65) expression_tail -> NE . simple_expression
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    simple_expression              shift and go to state 124
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 85

    (66) expression_tail -> EQUAL . simple_expression
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    simple_expression              shift and go to state 125
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 86

    (67) expression_tail -> empty .

    AND             reduce using rule 67 (expression_tail -> empty .)
    OR              reduce using rule 67 (expression_tail -> empty .)
    THEN            reduce using rule 67 (expression_tail -> empty .)
    ASSIGN          reduce using rule 67 (expression_tail -> empty .)
    DO              reduce using rule 67 (expression_tail -> empty .)
    SEMICOLON       reduce using rule 67 (expression_tail -> empty .)
    END_DOT         reduce using rule 67 (expression_tail -> empty .)
    END             reduce using rule 67 (expression_tail -> empty .)
    ELSE            reduce using rule 67 (expression_tail -> empty .)
    RBRACKET        reduce using rule 67 (expression_tail -> empty .)
    COMMA           reduce using rule 67 (expression_tail -> empty .)
    RPAREN          reduce using rule 67 (expression_tail -> empty .)
    TO              reduce using rule 67 (expression_tail -> empty .)
    DOWNTO          reduce using rule 67 (expression_tail -> empty .)


state 87

    (68) simple_expression -> term simple_expression_tail .

    LT              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    GT              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    LE              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    GE              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    NE              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    EQUAL           reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    AND             reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    OR              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    THEN            reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    ASSIGN          reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    DO              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    SEMICOLON       reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    END_DOT         reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    END             reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    ELSE            reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    RBRACKET        reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    COMMA           reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    RPAREN          reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    TO              reduce using rule 68 (simple_expression -> term simple_expression_tail .)
    DOWNTO          reduce using rule 68 (simple_expression -> term simple_expression_tail .)


state 88

    (69) simple_expression_tail -> PLUS . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    term                           shift and go to state 126
    factor                         shift and go to state 49

state 89

    (70) simple_expression_tail -> MINUS . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    term                           shift and go to state 127
    factor                         shift and go to state 49

state 90

    (71) simple_expression_tail -> empty .

    LT              reduce using rule 71 (simple_expression_tail -> empty .)
    GT              reduce using rule 71 (simple_expression_tail -> empty .)
    LE              reduce using rule 71 (simple_expression_tail -> empty .)
    GE              reduce using rule 71 (simple_expression_tail -> empty .)
    NE              reduce using rule 71 (simple_expression_tail -> empty .)
    EQUAL           reduce using rule 71 (simple_expression_tail -> empty .)
    AND             reduce using rule 71 (simple_expression_tail -> empty .)
    OR              reduce using rule 71 (simple_expression_tail -> empty .)
    THEN            reduce using rule 71 (simple_expression_tail -> empty .)
    ASSIGN          reduce using rule 71 (simple_expression_tail -> empty .)
    DO              reduce using rule 71 (simple_expression_tail -> empty .)
    SEMICOLON       reduce using rule 71 (simple_expression_tail -> empty .)
    END_DOT         reduce using rule 71 (simple_expression_tail -> empty .)
    END             reduce using rule 71 (simple_expression_tail -> empty .)
    ELSE            reduce using rule 71 (simple_expression_tail -> empty .)
    RBRACKET        reduce using rule 71 (simple_expression_tail -> empty .)
    COMMA           reduce using rule 71 (simple_expression_tail -> empty .)
    RPAREN          reduce using rule 71 (simple_expression_tail -> empty .)
    TO              reduce using rule 71 (simple_expression_tail -> empty .)
    DOWNTO          reduce using rule 71 (simple_expression_tail -> empty .)


state 91

    (72) term -> factor term_tail .

    PLUS            reduce using rule 72 (term -> factor term_tail .)
    MINUS           reduce using rule 72 (term -> factor term_tail .)
    LT              reduce using rule 72 (term -> factor term_tail .)
    GT              reduce using rule 72 (term -> factor term_tail .)
    LE              reduce using rule 72 (term -> factor term_tail .)
    GE              reduce using rule 72 (term -> factor term_tail .)
    NE              reduce using rule 72 (term -> factor term_tail .)
    EQUAL           reduce using rule 72 (term -> factor term_tail .)
    AND             reduce using rule 72 (term -> factor term_tail .)
    OR              reduce using rule 72 (term -> factor term_tail .)
    THEN            reduce using rule 72 (term -> factor term_tail .)
    ASSIGN          reduce using rule 72 (term -> factor term_tail .)
    DO              reduce using rule 72 (term -> factor term_tail .)
    SEMICOLON       reduce using rule 72 (term -> factor term_tail .)
    END_DOT         reduce using rule 72 (term -> factor term_tail .)
    END             reduce using rule 72 (term -> factor term_tail .)
    ELSE            reduce using rule 72 (term -> factor term_tail .)
    RBRACKET        reduce using rule 72 (term -> factor term_tail .)
    COMMA           reduce using rule 72 (term -> factor term_tail .)
    RPAREN          reduce using rule 72 (term -> factor term_tail .)
    TO              reduce using rule 72 (term -> factor term_tail .)
    DOWNTO          reduce using rule 72 (term -> factor term_tail .)


state 92

    (73) term_tail -> TIMES . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    factor                         shift and go to state 128

state 93

    (74) term_tail -> DIVIDE . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    factor                         shift and go to state 129

state 94

    (75) term_tail -> MOD . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    factor                         shift and go to state 130

state 95

    (76) term_tail -> REAL_DIVIDE . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    factor                         shift and go to state 131

state 96

    (77) term_tail -> empty .

    PLUS            reduce using rule 77 (term_tail -> empty .)
    MINUS           reduce using rule 77 (term_tail -> empty .)
    LT              reduce using rule 77 (term_tail -> empty .)
    GT              reduce using rule 77 (term_tail -> empty .)
    LE              reduce using rule 77 (term_tail -> empty .)
    GE              reduce using rule 77 (term_tail -> empty .)
    NE              reduce using rule 77 (term_tail -> empty .)
    EQUAL           reduce using rule 77 (term_tail -> empty .)
    AND             reduce using rule 77 (term_tail -> empty .)
    OR              reduce using rule 77 (term_tail -> empty .)
    THEN            reduce using rule 77 (term_tail -> empty .)
    ASSIGN          reduce using rule 77 (term_tail -> empty .)
    DO              reduce using rule 77 (term_tail -> empty .)
    SEMICOLON       reduce using rule 77 (term_tail -> empty .)
    END_DOT         reduce using rule 77 (term_tail -> empty .)
    END             reduce using rule 77 (term_tail -> empty .)
    ELSE            reduce using rule 77 (term_tail -> empty .)
    RBRACKET        reduce using rule 77 (term_tail -> empty .)
    COMMA           reduce using rule 77 (term_tail -> empty .)
    RPAREN          reduce using rule 77 (term_tail -> empty .)
    TO              reduce using rule 77 (term_tail -> empty .)
    DOWNTO          reduce using rule 77 (term_tail -> empty .)


state 97

    (78) factor -> PLUS factor .

    TIMES           reduce using rule 78 (factor -> PLUS factor .)
    DIVIDE          reduce using rule 78 (factor -> PLUS factor .)
    MOD             reduce using rule 78 (factor -> PLUS factor .)
    REAL_DIVIDE     reduce using rule 78 (factor -> PLUS factor .)
    PLUS            reduce using rule 78 (factor -> PLUS factor .)
    MINUS           reduce using rule 78 (factor -> PLUS factor .)
    LT              reduce using rule 78 (factor -> PLUS factor .)
    GT              reduce using rule 78 (factor -> PLUS factor .)
    LE              reduce using rule 78 (factor -> PLUS factor .)
    GE              reduce using rule 78 (factor -> PLUS factor .)
    NE              reduce using rule 78 (factor -> PLUS factor .)
    EQUAL           reduce using rule 78 (factor -> PLUS factor .)
    AND             reduce using rule 78 (factor -> PLUS factor .)
    OR              reduce using rule 78 (factor -> PLUS factor .)
    THEN            reduce using rule 78 (factor -> PLUS factor .)
    ASSIGN          reduce using rule 78 (factor -> PLUS factor .)
    DO              reduce using rule 78 (factor -> PLUS factor .)
    SEMICOLON       reduce using rule 78 (factor -> PLUS factor .)
    END_DOT         reduce using rule 78 (factor -> PLUS factor .)
    END             reduce using rule 78 (factor -> PLUS factor .)
    ELSE            reduce using rule 78 (factor -> PLUS factor .)
    RBRACKET        reduce using rule 78 (factor -> PLUS factor .)
    COMMA           reduce using rule 78 (factor -> PLUS factor .)
    RPAREN          reduce using rule 78 (factor -> PLUS factor .)
    TO              reduce using rule 78 (factor -> PLUS factor .)
    DOWNTO          reduce using rule 78 (factor -> PLUS factor .)


state 98

    (79) factor -> MINUS factor .

    TIMES           reduce using rule 79 (factor -> MINUS factor .)
    DIVIDE          reduce using rule 79 (factor -> MINUS factor .)
    MOD             reduce using rule 79 (factor -> MINUS factor .)
    REAL_DIVIDE     reduce using rule 79 (factor -> MINUS factor .)
    PLUS            reduce using rule 79 (factor -> MINUS factor .)
    MINUS           reduce using rule 79 (factor -> MINUS factor .)
    LT              reduce using rule 79 (factor -> MINUS factor .)
    GT              reduce using rule 79 (factor -> MINUS factor .)
    LE              reduce using rule 79 (factor -> MINUS factor .)
    GE              reduce using rule 79 (factor -> MINUS factor .)
    NE              reduce using rule 79 (factor -> MINUS factor .)
    EQUAL           reduce using rule 79 (factor -> MINUS factor .)
    AND             reduce using rule 79 (factor -> MINUS factor .)
    OR              reduce using rule 79 (factor -> MINUS factor .)
    THEN            reduce using rule 79 (factor -> MINUS factor .)
    ASSIGN          reduce using rule 79 (factor -> MINUS factor .)
    DO              reduce using rule 79 (factor -> MINUS factor .)
    SEMICOLON       reduce using rule 79 (factor -> MINUS factor .)
    END_DOT         reduce using rule 79 (factor -> MINUS factor .)
    END             reduce using rule 79 (factor -> MINUS factor .)
    ELSE            reduce using rule 79 (factor -> MINUS factor .)
    RBRACKET        reduce using rule 79 (factor -> MINUS factor .)
    COMMA           reduce using rule 79 (factor -> MINUS factor .)
    RPAREN          reduce using rule 79 (factor -> MINUS factor .)
    TO              reduce using rule 79 (factor -> MINUS factor .)
    DOWNTO          reduce using rule 79 (factor -> MINUS factor .)


state 99

    (80) factor -> LPAREN expression . RPAREN
    (56) expression -> expression . OR and_expression

    RPAREN          shift and go to state 132
    OR              shift and go to state 77


state 100

    (83) factor -> IDENTIFIER identifier_expression .

    TIMES           reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    DIVIDE          reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    MOD             reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    REAL_DIVIDE     reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    PLUS            reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    MINUS           reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    LT              reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    GT              reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    LE              reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    GE              reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    NE              reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    EQUAL           reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    AND             reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    OR              reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    THEN            reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    ASSIGN          reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    DO              reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    SEMICOLON       reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    END_DOT         reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    END             reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    ELSE            reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    RBRACKET        reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    COMMA           reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    RPAREN          reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    TO              reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)
    DOWNTO          reduce using rule 83 (factor -> IDENTIFIER identifier_expression .)


state 101

    (86) identifier_expression -> LBRACKET . expression RBRACKET
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 133
    and_expression                 shift and go to state 45
    relation_expression            shift and go to state 46
    simple_expression              shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 102

    (87) identifier_expression -> empty .

    TIMES           reduce using rule 87 (identifier_expression -> empty .)
    DIVIDE          reduce using rule 87 (identifier_expression -> empty .)
    MOD             reduce using rule 87 (identifier_expression -> empty .)
    REAL_DIVIDE     reduce using rule 87 (identifier_expression -> empty .)
    PLUS            reduce using rule 87 (identifier_expression -> empty .)
    MINUS           reduce using rule 87 (identifier_expression -> empty .)
    LT              reduce using rule 87 (identifier_expression -> empty .)
    GT              reduce using rule 87 (identifier_expression -> empty .)
    LE              reduce using rule 87 (identifier_expression -> empty .)
    GE              reduce using rule 87 (identifier_expression -> empty .)
    NE              reduce using rule 87 (identifier_expression -> empty .)
    EQUAL           reduce using rule 87 (identifier_expression -> empty .)
    AND             reduce using rule 87 (identifier_expression -> empty .)
    OR              reduce using rule 87 (identifier_expression -> empty .)
    THEN            reduce using rule 87 (identifier_expression -> empty .)
    ASSIGN          reduce using rule 87 (identifier_expression -> empty .)
    DO              reduce using rule 87 (identifier_expression -> empty .)
    SEMICOLON       reduce using rule 87 (identifier_expression -> empty .)
    END_DOT         reduce using rule 87 (identifier_expression -> empty .)
    END             reduce using rule 87 (identifier_expression -> empty .)
    ELSE            reduce using rule 87 (identifier_expression -> empty .)
    RBRACKET        reduce using rule 87 (identifier_expression -> empty .)
    COMMA           reduce using rule 87 (identifier_expression -> empty .)
    RPAREN          reduce using rule 87 (identifier_expression -> empty .)
    TO              reduce using rule 87 (identifier_expression -> empty .)
    DOWNTO          reduce using rule 87 (identifier_expression -> empty .)


state 103

    (29) statement -> FOR for_condition DO . for_code
    (42) for_code -> . dotless_code
    (43) for_code -> . statement
    (44) for_code -> . empty
    (19) dotless_code -> . BEGIN expressions END
    (24) statement -> . IDENTIFIER identifier_assign_expression
    (25) statement -> . WRITELN write_statement
    (26) statement -> . WRITE write_statement
    (27) statement -> . READLN readln_statement
    (28) statement -> . IF if_condition THEN if_code
    (29) statement -> . FOR for_condition DO for_code
    (30) statement -> . WHILE if_condition DO while_code
    (88) empty -> .

    BEGIN           shift and go to state 117
    IDENTIFIER      shift and go to state 19
    WRITELN         shift and go to state 20
    WRITE           shift and go to state 21
    READLN          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    ELSE            reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    END_DOT         reduce using rule 88 (empty -> .)
    END             reduce using rule 88 (empty -> .)

    for_code                       shift and go to state 134
    dotless_code                   shift and go to state 135
    statement                      shift and go to state 136
    empty                          shift and go to state 137

state 104

    (39) for_condition -> expression ASSIGN . expression to_expression
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 138
    and_expression                 shift and go to state 45
    relation_expression            shift and go to state 46
    simple_expression              shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 105

    (30) statement -> WHILE if_condition DO . while_code
    (33) while_code -> . dotless_code
    (34) while_code -> . statement
    (35) while_code -> . empty
    (19) dotless_code -> . BEGIN expressions END
    (24) statement -> . IDENTIFIER identifier_assign_expression
    (25) statement -> . WRITELN write_statement
    (26) statement -> . WRITE write_statement
    (27) statement -> . READLN readln_statement
    (28) statement -> . IF if_condition THEN if_code
    (29) statement -> . FOR for_condition DO for_code
    (30) statement -> . WHILE if_condition DO while_code
    (88) empty -> .

    BEGIN           shift and go to state 117
    IDENTIFIER      shift and go to state 19
    WRITELN         shift and go to state 20
    WRITE           shift and go to state 21
    READLN          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    ELSE            reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    END_DOT         reduce using rule 88 (empty -> .)
    END             reduce using rule 88 (empty -> .)

    while_code                     shift and go to state 139
    dotless_code                   shift and go to state 140
    statement                      shift and go to state 141
    empty                          shift and go to state 142

state 106

    (7) vardecl -> idlist COLON type SEMICOLON .

    IDENTIFIER      reduce using rule 7 (vardecl -> idlist COLON type SEMICOLON .)
    BEGIN           reduce using rule 7 (vardecl -> idlist COLON type SEMICOLON .)


state 107

    (15) type -> ARRAY LBRACKET . arraytypes RBRACKET OF type
    (16) arraytypes -> . INTEGER
    (17) arraytypes -> . INTEGER DOT DOT INTEGER

    INTEGER         shift and go to state 144

    arraytypes                     shift and go to state 143

state 108

    (9) idlistTail -> COMMA IDENTIFIER idlistTail .

    COLON           reduce using rule 9 (idlistTail -> COMMA IDENTIFIER idlistTail .)


state 109

    (32) identifier_assign_expression -> LBRACKET expression RBRACKET . ASSIGN assign_expression

    ASSIGN          shift and go to state 145


state 110

    (50) write_statement -> LPAREN string_statement RPAREN .

    SEMICOLON       reduce using rule 50 (write_statement -> LPAREN string_statement RPAREN .)
    END_DOT         reduce using rule 50 (write_statement -> LPAREN string_statement RPAREN .)
    END             reduce using rule 50 (write_statement -> LPAREN string_statement RPAREN .)
    ELSE            reduce using rule 50 (write_statement -> LPAREN string_statement RPAREN .)


state 111

    (53) string_statement -> assign_expression COMMA . string_statement
    (52) string_statement -> . assign_expression
    (53) string_statement -> . assign_expression COMMA string_statement
    (54) assign_expression -> . expression
    (55) assign_expression -> . STRING
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    STRING          shift and go to state 71
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    assign_expression              shift and go to state 74
    string_statement               shift and go to state 146
    expression                     shift and go to state 70
    and_expression                 shift and go to state 45
    relation_expression            shift and go to state 46
    simple_expression              shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 112

    (51) readln_statement -> LPAREN string_statement RPAREN .

    SEMICOLON       reduce using rule 51 (readln_statement -> LPAREN string_statement RPAREN .)
    END_DOT         reduce using rule 51 (readln_statement -> LPAREN string_statement RPAREN .)
    END             reduce using rule 51 (readln_statement -> LPAREN string_statement RPAREN .)
    ELSE            reduce using rule 51 (readln_statement -> LPAREN string_statement RPAREN .)


state 113

    (28) statement -> IF if_condition THEN if_code .

    SEMICOLON       reduce using rule 28 (statement -> IF if_condition THEN if_code .)
    END_DOT         reduce using rule 28 (statement -> IF if_condition THEN if_code .)
    END             reduce using rule 28 (statement -> IF if_condition THEN if_code .)
    ELSE            reduce using rule 28 (statement -> IF if_condition THEN if_code .)


state 114

    (36) if_code -> dotless_code . opt_else
    (45) opt_else -> . ELSE code_or_statement
    (46) opt_else -> . empty
    (88) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 148
    SEMICOLON       reduce using rule 88 (empty -> .)
    END_DOT         reduce using rule 88 (empty -> .)
    END             reduce using rule 88 (empty -> .)

  ! ELSE            [ reduce using rule 88 (empty -> .) ]

    opt_else                       shift and go to state 147
    empty                          shift and go to state 149

state 115

    (37) if_code -> statement . opt_else
    (45) opt_else -> . ELSE code_or_statement
    (46) opt_else -> . empty
    (88) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 148
    SEMICOLON       reduce using rule 88 (empty -> .)
    END_DOT         reduce using rule 88 (empty -> .)
    END             reduce using rule 88 (empty -> .)

  ! ELSE            [ reduce using rule 88 (empty -> .) ]

    opt_else                       shift and go to state 150
    empty                          shift and go to state 149

state 116

    (38) if_code -> empty .

    ELSE            reduce using rule 38 (if_code -> empty .)
    SEMICOLON       reduce using rule 38 (if_code -> empty .)
    END_DOT         reduce using rule 38 (if_code -> empty .)
    END             reduce using rule 38 (if_code -> empty .)


state 117

    (19) dotless_code -> BEGIN . expressions END
    (20) expressions -> . statement expressions_tail
    (21) expressions -> . empty
    (24) statement -> . IDENTIFIER identifier_assign_expression
    (25) statement -> . WRITELN write_statement
    (26) statement -> . WRITE write_statement
    (27) statement -> . READLN readln_statement
    (28) statement -> . IF if_condition THEN if_code
    (29) statement -> . FOR for_condition DO for_code
    (30) statement -> . WHILE if_condition DO while_code
    (88) empty -> .

    IDENTIFIER      shift and go to state 19
    WRITELN         shift and go to state 20
    WRITE           shift and go to state 21
    READLN          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25
    END             reduce using rule 88 (empty -> .)

    expressions                    shift and go to state 151
    statement                      shift and go to state 17
    empty                          shift and go to state 18

state 118

    (56) expression -> expression OR and_expression .
    (58) and_expression -> and_expression . AND relation_expression

    OR              reduce using rule 56 (expression -> expression OR and_expression .)
    THEN            reduce using rule 56 (expression -> expression OR and_expression .)
    ASSIGN          reduce using rule 56 (expression -> expression OR and_expression .)
    DO              reduce using rule 56 (expression -> expression OR and_expression .)
    SEMICOLON       reduce using rule 56 (expression -> expression OR and_expression .)
    END_DOT         reduce using rule 56 (expression -> expression OR and_expression .)
    END             reduce using rule 56 (expression -> expression OR and_expression .)
    ELSE            reduce using rule 56 (expression -> expression OR and_expression .)
    RBRACKET        reduce using rule 56 (expression -> expression OR and_expression .)
    COMMA           reduce using rule 56 (expression -> expression OR and_expression .)
    RPAREN          reduce using rule 56 (expression -> expression OR and_expression .)
    TO              reduce using rule 56 (expression -> expression OR and_expression .)
    DOWNTO          reduce using rule 56 (expression -> expression OR and_expression .)
    AND             shift and go to state 78


state 119

    (58) and_expression -> and_expression AND relation_expression .

    AND             reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    OR              reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    THEN            reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    ASSIGN          reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    DO              reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    SEMICOLON       reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    END_DOT         reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    END             reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    ELSE            reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    RBRACKET        reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    COMMA           reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    RPAREN          reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    TO              reduce using rule 58 (and_expression -> and_expression AND relation_expression .)
    DOWNTO          reduce using rule 58 (and_expression -> and_expression AND relation_expression .)


state 120

    (61) expression_tail -> LT simple_expression .

    AND             reduce using rule 61 (expression_tail -> LT simple_expression .)
    OR              reduce using rule 61 (expression_tail -> LT simple_expression .)
    THEN            reduce using rule 61 (expression_tail -> LT simple_expression .)
    ASSIGN          reduce using rule 61 (expression_tail -> LT simple_expression .)
    DO              reduce using rule 61 (expression_tail -> LT simple_expression .)
    SEMICOLON       reduce using rule 61 (expression_tail -> LT simple_expression .)
    END_DOT         reduce using rule 61 (expression_tail -> LT simple_expression .)
    END             reduce using rule 61 (expression_tail -> LT simple_expression .)
    ELSE            reduce using rule 61 (expression_tail -> LT simple_expression .)
    RBRACKET        reduce using rule 61 (expression_tail -> LT simple_expression .)
    COMMA           reduce using rule 61 (expression_tail -> LT simple_expression .)
    RPAREN          reduce using rule 61 (expression_tail -> LT simple_expression .)
    TO              reduce using rule 61 (expression_tail -> LT simple_expression .)
    DOWNTO          reduce using rule 61 (expression_tail -> LT simple_expression .)


state 121

    (62) expression_tail -> GT simple_expression .

    AND             reduce using rule 62 (expression_tail -> GT simple_expression .)
    OR              reduce using rule 62 (expression_tail -> GT simple_expression .)
    THEN            reduce using rule 62 (expression_tail -> GT simple_expression .)
    ASSIGN          reduce using rule 62 (expression_tail -> GT simple_expression .)
    DO              reduce using rule 62 (expression_tail -> GT simple_expression .)
    SEMICOLON       reduce using rule 62 (expression_tail -> GT simple_expression .)
    END_DOT         reduce using rule 62 (expression_tail -> GT simple_expression .)
    END             reduce using rule 62 (expression_tail -> GT simple_expression .)
    ELSE            reduce using rule 62 (expression_tail -> GT simple_expression .)
    RBRACKET        reduce using rule 62 (expression_tail -> GT simple_expression .)
    COMMA           reduce using rule 62 (expression_tail -> GT simple_expression .)
    RPAREN          reduce using rule 62 (expression_tail -> GT simple_expression .)
    TO              reduce using rule 62 (expression_tail -> GT simple_expression .)
    DOWNTO          reduce using rule 62 (expression_tail -> GT simple_expression .)


state 122

    (63) expression_tail -> LE simple_expression .

    AND             reduce using rule 63 (expression_tail -> LE simple_expression .)
    OR              reduce using rule 63 (expression_tail -> LE simple_expression .)
    THEN            reduce using rule 63 (expression_tail -> LE simple_expression .)
    ASSIGN          reduce using rule 63 (expression_tail -> LE simple_expression .)
    DO              reduce using rule 63 (expression_tail -> LE simple_expression .)
    SEMICOLON       reduce using rule 63 (expression_tail -> LE simple_expression .)
    END_DOT         reduce using rule 63 (expression_tail -> LE simple_expression .)
    END             reduce using rule 63 (expression_tail -> LE simple_expression .)
    ELSE            reduce using rule 63 (expression_tail -> LE simple_expression .)
    RBRACKET        reduce using rule 63 (expression_tail -> LE simple_expression .)
    COMMA           reduce using rule 63 (expression_tail -> LE simple_expression .)
    RPAREN          reduce using rule 63 (expression_tail -> LE simple_expression .)
    TO              reduce using rule 63 (expression_tail -> LE simple_expression .)
    DOWNTO          reduce using rule 63 (expression_tail -> LE simple_expression .)


state 123

    (64) expression_tail -> GE simple_expression .

    AND             reduce using rule 64 (expression_tail -> GE simple_expression .)
    OR              reduce using rule 64 (expression_tail -> GE simple_expression .)
    THEN            reduce using rule 64 (expression_tail -> GE simple_expression .)
    ASSIGN          reduce using rule 64 (expression_tail -> GE simple_expression .)
    DO              reduce using rule 64 (expression_tail -> GE simple_expression .)
    SEMICOLON       reduce using rule 64 (expression_tail -> GE simple_expression .)
    END_DOT         reduce using rule 64 (expression_tail -> GE simple_expression .)
    END             reduce using rule 64 (expression_tail -> GE simple_expression .)
    ELSE            reduce using rule 64 (expression_tail -> GE simple_expression .)
    RBRACKET        reduce using rule 64 (expression_tail -> GE simple_expression .)
    COMMA           reduce using rule 64 (expression_tail -> GE simple_expression .)
    RPAREN          reduce using rule 64 (expression_tail -> GE simple_expression .)
    TO              reduce using rule 64 (expression_tail -> GE simple_expression .)
    DOWNTO          reduce using rule 64 (expression_tail -> GE simple_expression .)


state 124

    (65) expression_tail -> NE simple_expression .

    AND             reduce using rule 65 (expression_tail -> NE simple_expression .)
    OR              reduce using rule 65 (expression_tail -> NE simple_expression .)
    THEN            reduce using rule 65 (expression_tail -> NE simple_expression .)
    ASSIGN          reduce using rule 65 (expression_tail -> NE simple_expression .)
    DO              reduce using rule 65 (expression_tail -> NE simple_expression .)
    SEMICOLON       reduce using rule 65 (expression_tail -> NE simple_expression .)
    END_DOT         reduce using rule 65 (expression_tail -> NE simple_expression .)
    END             reduce using rule 65 (expression_tail -> NE simple_expression .)
    ELSE            reduce using rule 65 (expression_tail -> NE simple_expression .)
    RBRACKET        reduce using rule 65 (expression_tail -> NE simple_expression .)
    COMMA           reduce using rule 65 (expression_tail -> NE simple_expression .)
    RPAREN          reduce using rule 65 (expression_tail -> NE simple_expression .)
    TO              reduce using rule 65 (expression_tail -> NE simple_expression .)
    DOWNTO          reduce using rule 65 (expression_tail -> NE simple_expression .)


state 125

    (66) expression_tail -> EQUAL simple_expression .

    AND             reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    OR              reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    THEN            reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    ASSIGN          reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    DO              reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    SEMICOLON       reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    END_DOT         reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    END             reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    ELSE            reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    RBRACKET        reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    COMMA           reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    RPAREN          reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    TO              reduce using rule 66 (expression_tail -> EQUAL simple_expression .)
    DOWNTO          reduce using rule 66 (expression_tail -> EQUAL simple_expression .)


state 126

    (69) simple_expression_tail -> PLUS term . simple_expression_tail
    (69) simple_expression_tail -> . PLUS term simple_expression_tail
    (70) simple_expression_tail -> . MINUS term simple_expression_tail
    (71) simple_expression_tail -> . empty
    (88) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    LT              reduce using rule 88 (empty -> .)
    GT              reduce using rule 88 (empty -> .)
    LE              reduce using rule 88 (empty -> .)
    GE              reduce using rule 88 (empty -> .)
    NE              reduce using rule 88 (empty -> .)
    EQUAL           reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    THEN            reduce using rule 88 (empty -> .)
    ASSIGN          reduce using rule 88 (empty -> .)
    DO              reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    END_DOT         reduce using rule 88 (empty -> .)
    END             reduce using rule 88 (empty -> .)
    ELSE            reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    TO              reduce using rule 88 (empty -> .)
    DOWNTO          reduce using rule 88 (empty -> .)

    simple_expression_tail         shift and go to state 152
    empty                          shift and go to state 90

state 127

    (70) simple_expression_tail -> MINUS term . simple_expression_tail
    (69) simple_expression_tail -> . PLUS term simple_expression_tail
    (70) simple_expression_tail -> . MINUS term simple_expression_tail
    (71) simple_expression_tail -> . empty
    (88) empty -> .

    PLUS            shift and go to state 88
    MINUS           shift and go to state 89
    LT              reduce using rule 88 (empty -> .)
    GT              reduce using rule 88 (empty -> .)
    LE              reduce using rule 88 (empty -> .)
    GE              reduce using rule 88 (empty -> .)
    NE              reduce using rule 88 (empty -> .)
    EQUAL           reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    THEN            reduce using rule 88 (empty -> .)
    ASSIGN          reduce using rule 88 (empty -> .)
    DO              reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    END_DOT         reduce using rule 88 (empty -> .)
    END             reduce using rule 88 (empty -> .)
    ELSE            reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    TO              reduce using rule 88 (empty -> .)
    DOWNTO          reduce using rule 88 (empty -> .)

    simple_expression_tail         shift and go to state 153
    empty                          shift and go to state 90

state 128

    (73) term_tail -> TIMES factor . term_tail
    (73) term_tail -> . TIMES factor term_tail
    (74) term_tail -> . DIVIDE factor term_tail
    (75) term_tail -> . MOD factor term_tail
    (76) term_tail -> . REAL_DIVIDE factor term_tail
    (77) term_tail -> . empty
    (88) empty -> .

    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94
    REAL_DIVIDE     shift and go to state 95
    PLUS            reduce using rule 88 (empty -> .)
    MINUS           reduce using rule 88 (empty -> .)
    LT              reduce using rule 88 (empty -> .)
    GT              reduce using rule 88 (empty -> .)
    LE              reduce using rule 88 (empty -> .)
    GE              reduce using rule 88 (empty -> .)
    NE              reduce using rule 88 (empty -> .)
    EQUAL           reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    THEN            reduce using rule 88 (empty -> .)
    ASSIGN          reduce using rule 88 (empty -> .)
    DO              reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    END_DOT         reduce using rule 88 (empty -> .)
    END             reduce using rule 88 (empty -> .)
    ELSE            reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    TO              reduce using rule 88 (empty -> .)
    DOWNTO          reduce using rule 88 (empty -> .)

    term_tail                      shift and go to state 154
    empty                          shift and go to state 96

state 129

    (74) term_tail -> DIVIDE factor . term_tail
    (73) term_tail -> . TIMES factor term_tail
    (74) term_tail -> . DIVIDE factor term_tail
    (75) term_tail -> . MOD factor term_tail
    (76) term_tail -> . REAL_DIVIDE factor term_tail
    (77) term_tail -> . empty
    (88) empty -> .

    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94
    REAL_DIVIDE     shift and go to state 95
    PLUS            reduce using rule 88 (empty -> .)
    MINUS           reduce using rule 88 (empty -> .)
    LT              reduce using rule 88 (empty -> .)
    GT              reduce using rule 88 (empty -> .)
    LE              reduce using rule 88 (empty -> .)
    GE              reduce using rule 88 (empty -> .)
    NE              reduce using rule 88 (empty -> .)
    EQUAL           reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    THEN            reduce using rule 88 (empty -> .)
    ASSIGN          reduce using rule 88 (empty -> .)
    DO              reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    END_DOT         reduce using rule 88 (empty -> .)
    END             reduce using rule 88 (empty -> .)
    ELSE            reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    TO              reduce using rule 88 (empty -> .)
    DOWNTO          reduce using rule 88 (empty -> .)

    term_tail                      shift and go to state 155
    empty                          shift and go to state 96

state 130

    (75) term_tail -> MOD factor . term_tail
    (73) term_tail -> . TIMES factor term_tail
    (74) term_tail -> . DIVIDE factor term_tail
    (75) term_tail -> . MOD factor term_tail
    (76) term_tail -> . REAL_DIVIDE factor term_tail
    (77) term_tail -> . empty
    (88) empty -> .

    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94
    REAL_DIVIDE     shift and go to state 95
    PLUS            reduce using rule 88 (empty -> .)
    MINUS           reduce using rule 88 (empty -> .)
    LT              reduce using rule 88 (empty -> .)
    GT              reduce using rule 88 (empty -> .)
    LE              reduce using rule 88 (empty -> .)
    GE              reduce using rule 88 (empty -> .)
    NE              reduce using rule 88 (empty -> .)
    EQUAL           reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    THEN            reduce using rule 88 (empty -> .)
    ASSIGN          reduce using rule 88 (empty -> .)
    DO              reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    END_DOT         reduce using rule 88 (empty -> .)
    END             reduce using rule 88 (empty -> .)
    ELSE            reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    TO              reduce using rule 88 (empty -> .)
    DOWNTO          reduce using rule 88 (empty -> .)

    term_tail                      shift and go to state 156
    empty                          shift and go to state 96

state 131

    (76) term_tail -> REAL_DIVIDE factor . term_tail
    (73) term_tail -> . TIMES factor term_tail
    (74) term_tail -> . DIVIDE factor term_tail
    (75) term_tail -> . MOD factor term_tail
    (76) term_tail -> . REAL_DIVIDE factor term_tail
    (77) term_tail -> . empty
    (88) empty -> .

    TIMES           shift and go to state 92
    DIVIDE          shift and go to state 93
    MOD             shift and go to state 94
    REAL_DIVIDE     shift and go to state 95
    PLUS            reduce using rule 88 (empty -> .)
    MINUS           reduce using rule 88 (empty -> .)
    LT              reduce using rule 88 (empty -> .)
    GT              reduce using rule 88 (empty -> .)
    LE              reduce using rule 88 (empty -> .)
    GE              reduce using rule 88 (empty -> .)
    NE              reduce using rule 88 (empty -> .)
    EQUAL           reduce using rule 88 (empty -> .)
    AND             reduce using rule 88 (empty -> .)
    OR              reduce using rule 88 (empty -> .)
    THEN            reduce using rule 88 (empty -> .)
    ASSIGN          reduce using rule 88 (empty -> .)
    DO              reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    END_DOT         reduce using rule 88 (empty -> .)
    END             reduce using rule 88 (empty -> .)
    ELSE            reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    TO              reduce using rule 88 (empty -> .)
    DOWNTO          reduce using rule 88 (empty -> .)

    term_tail                      shift and go to state 157
    empty                          shift and go to state 96

state 132

    (80) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    MOD             reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    REAL_DIVIDE     reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    AND             reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    OR              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    THEN            reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    DO              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    END_DOT         reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    END             reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    TO              reduce using rule 80 (factor -> LPAREN expression RPAREN .)
    DOWNTO          reduce using rule 80 (factor -> LPAREN expression RPAREN .)


state 133

    (86) identifier_expression -> LBRACKET expression . RBRACKET
    (56) expression -> expression . OR and_expression

    RBRACKET        shift and go to state 158
    OR              shift and go to state 77


state 134

    (29) statement -> FOR for_condition DO for_code .

    SEMICOLON       reduce using rule 29 (statement -> FOR for_condition DO for_code .)
    END_DOT         reduce using rule 29 (statement -> FOR for_condition DO for_code .)
    END             reduce using rule 29 (statement -> FOR for_condition DO for_code .)
    ELSE            reduce using rule 29 (statement -> FOR for_condition DO for_code .)


state 135

    (42) for_code -> dotless_code .

    ELSE            reduce using rule 42 (for_code -> dotless_code .)
    SEMICOLON       reduce using rule 42 (for_code -> dotless_code .)
    END_DOT         reduce using rule 42 (for_code -> dotless_code .)
    END             reduce using rule 42 (for_code -> dotless_code .)


state 136

    (43) for_code -> statement .

    ELSE            reduce using rule 43 (for_code -> statement .)
    SEMICOLON       reduce using rule 43 (for_code -> statement .)
    END_DOT         reduce using rule 43 (for_code -> statement .)
    END             reduce using rule 43 (for_code -> statement .)


state 137

    (44) for_code -> empty .

    ELSE            reduce using rule 44 (for_code -> empty .)
    SEMICOLON       reduce using rule 44 (for_code -> empty .)
    END_DOT         reduce using rule 44 (for_code -> empty .)
    END             reduce using rule 44 (for_code -> empty .)


state 138

    (39) for_condition -> expression ASSIGN expression . to_expression
    (56) expression -> expression . OR and_expression
    (40) to_expression -> . TO expression
    (41) to_expression -> . DOWNTO expression

    OR              shift and go to state 77
    TO              shift and go to state 160
    DOWNTO          shift and go to state 161

    to_expression                  shift and go to state 159

state 139

    (30) statement -> WHILE if_condition DO while_code .

    SEMICOLON       reduce using rule 30 (statement -> WHILE if_condition DO while_code .)
    END_DOT         reduce using rule 30 (statement -> WHILE if_condition DO while_code .)
    END             reduce using rule 30 (statement -> WHILE if_condition DO while_code .)
    ELSE            reduce using rule 30 (statement -> WHILE if_condition DO while_code .)


state 140

    (33) while_code -> dotless_code .

    ELSE            reduce using rule 33 (while_code -> dotless_code .)
    SEMICOLON       reduce using rule 33 (while_code -> dotless_code .)
    END_DOT         reduce using rule 33 (while_code -> dotless_code .)
    END             reduce using rule 33 (while_code -> dotless_code .)


state 141

    (34) while_code -> statement .

    ELSE            reduce using rule 34 (while_code -> statement .)
    SEMICOLON       reduce using rule 34 (while_code -> statement .)
    END_DOT         reduce using rule 34 (while_code -> statement .)
    END             reduce using rule 34 (while_code -> statement .)


state 142

    (35) while_code -> empty .

    ELSE            reduce using rule 35 (while_code -> empty .)
    SEMICOLON       reduce using rule 35 (while_code -> empty .)
    END_DOT         reduce using rule 35 (while_code -> empty .)
    END             reduce using rule 35 (while_code -> empty .)


state 143

    (15) type -> ARRAY LBRACKET arraytypes . RBRACKET OF type

    RBRACKET        shift and go to state 162


state 144

    (16) arraytypes -> INTEGER .
    (17) arraytypes -> INTEGER . DOT DOT INTEGER

    RBRACKET        reduce using rule 16 (arraytypes -> INTEGER .)
    DOT             shift and go to state 163


state 145

    (32) identifier_assign_expression -> LBRACKET expression RBRACKET ASSIGN . assign_expression
    (54) assign_expression -> . expression
    (55) assign_expression -> . STRING
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    STRING          shift and go to state 71
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 70
    assign_expression              shift and go to state 164
    and_expression                 shift and go to state 45
    relation_expression            shift and go to state 46
    simple_expression              shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 146

    (53) string_statement -> assign_expression COMMA string_statement .

    RPAREN          reduce using rule 53 (string_statement -> assign_expression COMMA string_statement .)


state 147

    (36) if_code -> dotless_code opt_else .

    ELSE            reduce using rule 36 (if_code -> dotless_code opt_else .)
    SEMICOLON       reduce using rule 36 (if_code -> dotless_code opt_else .)
    END_DOT         reduce using rule 36 (if_code -> dotless_code opt_else .)
    END             reduce using rule 36 (if_code -> dotless_code opt_else .)


state 148

    (45) opt_else -> ELSE . code_or_statement
    (47) code_or_statement -> . dotless_code
    (48) code_or_statement -> . statement
    (19) dotless_code -> . BEGIN expressions END
    (24) statement -> . IDENTIFIER identifier_assign_expression
    (25) statement -> . WRITELN write_statement
    (26) statement -> . WRITE write_statement
    (27) statement -> . READLN readln_statement
    (28) statement -> . IF if_condition THEN if_code
    (29) statement -> . FOR for_condition DO for_code
    (30) statement -> . WHILE if_condition DO while_code

    BEGIN           shift and go to state 117
    IDENTIFIER      shift and go to state 19
    WRITELN         shift and go to state 20
    WRITE           shift and go to state 21
    READLN          shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    WHILE           shift and go to state 25

    code_or_statement              shift and go to state 165
    dotless_code                   shift and go to state 166
    statement                      shift and go to state 167

state 149

    (46) opt_else -> empty .

    ELSE            reduce using rule 46 (opt_else -> empty .)
    SEMICOLON       reduce using rule 46 (opt_else -> empty .)
    END_DOT         reduce using rule 46 (opt_else -> empty .)
    END             reduce using rule 46 (opt_else -> empty .)


state 150

    (37) if_code -> statement opt_else .

    ELSE            reduce using rule 37 (if_code -> statement opt_else .)
    SEMICOLON       reduce using rule 37 (if_code -> statement opt_else .)
    END_DOT         reduce using rule 37 (if_code -> statement opt_else .)
    END             reduce using rule 37 (if_code -> statement opt_else .)


state 151

    (19) dotless_code -> BEGIN expressions . END

    END             shift and go to state 168


state 152

    (69) simple_expression_tail -> PLUS term simple_expression_tail .

    LT              reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    GT              reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    LE              reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    GE              reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    NE              reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    EQUAL           reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    AND             reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    OR              reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    THEN            reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    ASSIGN          reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    DO              reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    SEMICOLON       reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    END_DOT         reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    END             reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    ELSE            reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    RBRACKET        reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    COMMA           reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    RPAREN          reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    TO              reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)
    DOWNTO          reduce using rule 69 (simple_expression_tail -> PLUS term simple_expression_tail .)


state 153

    (70) simple_expression_tail -> MINUS term simple_expression_tail .

    LT              reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    GT              reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    LE              reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    GE              reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    NE              reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    EQUAL           reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    AND             reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    OR              reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    THEN            reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    ASSIGN          reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    DO              reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    SEMICOLON       reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    END_DOT         reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    END             reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    ELSE            reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    RBRACKET        reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    COMMA           reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    RPAREN          reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    TO              reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)
    DOWNTO          reduce using rule 70 (simple_expression_tail -> MINUS term simple_expression_tail .)


state 154

    (73) term_tail -> TIMES factor term_tail .

    PLUS            reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    MINUS           reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    LT              reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    GT              reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    LE              reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    GE              reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    NE              reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    EQUAL           reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    AND             reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    OR              reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    THEN            reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    ASSIGN          reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    DO              reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    SEMICOLON       reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    END_DOT         reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    END             reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    ELSE            reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    RBRACKET        reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    COMMA           reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    RPAREN          reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    TO              reduce using rule 73 (term_tail -> TIMES factor term_tail .)
    DOWNTO          reduce using rule 73 (term_tail -> TIMES factor term_tail .)


state 155

    (74) term_tail -> DIVIDE factor term_tail .

    PLUS            reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    MINUS           reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    LT              reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    GT              reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    LE              reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    GE              reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    NE              reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    EQUAL           reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    AND             reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    OR              reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    THEN            reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    ASSIGN          reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    DO              reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    SEMICOLON       reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    END_DOT         reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    END             reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    ELSE            reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    RBRACKET        reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    COMMA           reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    RPAREN          reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    TO              reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)
    DOWNTO          reduce using rule 74 (term_tail -> DIVIDE factor term_tail .)


state 156

    (75) term_tail -> MOD factor term_tail .

    PLUS            reduce using rule 75 (term_tail -> MOD factor term_tail .)
    MINUS           reduce using rule 75 (term_tail -> MOD factor term_tail .)
    LT              reduce using rule 75 (term_tail -> MOD factor term_tail .)
    GT              reduce using rule 75 (term_tail -> MOD factor term_tail .)
    LE              reduce using rule 75 (term_tail -> MOD factor term_tail .)
    GE              reduce using rule 75 (term_tail -> MOD factor term_tail .)
    NE              reduce using rule 75 (term_tail -> MOD factor term_tail .)
    EQUAL           reduce using rule 75 (term_tail -> MOD factor term_tail .)
    AND             reduce using rule 75 (term_tail -> MOD factor term_tail .)
    OR              reduce using rule 75 (term_tail -> MOD factor term_tail .)
    THEN            reduce using rule 75 (term_tail -> MOD factor term_tail .)
    ASSIGN          reduce using rule 75 (term_tail -> MOD factor term_tail .)
    DO              reduce using rule 75 (term_tail -> MOD factor term_tail .)
    SEMICOLON       reduce using rule 75 (term_tail -> MOD factor term_tail .)
    END_DOT         reduce using rule 75 (term_tail -> MOD factor term_tail .)
    END             reduce using rule 75 (term_tail -> MOD factor term_tail .)
    ELSE            reduce using rule 75 (term_tail -> MOD factor term_tail .)
    RBRACKET        reduce using rule 75 (term_tail -> MOD factor term_tail .)
    COMMA           reduce using rule 75 (term_tail -> MOD factor term_tail .)
    RPAREN          reduce using rule 75 (term_tail -> MOD factor term_tail .)
    TO              reduce using rule 75 (term_tail -> MOD factor term_tail .)
    DOWNTO          reduce using rule 75 (term_tail -> MOD factor term_tail .)


state 157

    (76) term_tail -> REAL_DIVIDE factor term_tail .

    PLUS            reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    MINUS           reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    LT              reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    GT              reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    LE              reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    GE              reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    NE              reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    EQUAL           reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    AND             reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    OR              reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    THEN            reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    ASSIGN          reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    DO              reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    SEMICOLON       reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    END_DOT         reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    END             reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    ELSE            reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    RBRACKET        reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    COMMA           reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    RPAREN          reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    TO              reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)
    DOWNTO          reduce using rule 76 (term_tail -> REAL_DIVIDE factor term_tail .)


state 158

    (86) identifier_expression -> LBRACKET expression RBRACKET .

    TIMES           reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    MOD             reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    REAL_DIVIDE     reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    LT              reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    GT              reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    LE              reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    GE              reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    NE              reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    AND             reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    OR              reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    THEN            reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    DO              reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    END_DOT         reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    END             reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    TO              reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)
    DOWNTO          reduce using rule 86 (identifier_expression -> LBRACKET expression RBRACKET .)


state 159

    (39) for_condition -> expression ASSIGN expression to_expression .

    DO              reduce using rule 39 (for_condition -> expression ASSIGN expression to_expression .)


state 160

    (40) to_expression -> TO . expression
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 169
    and_expression                 shift and go to state 45
    relation_expression            shift and go to state 46
    simple_expression              shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 161

    (41) to_expression -> DOWNTO . expression
    (56) expression -> . expression OR and_expression
    (57) expression -> . and_expression
    (58) and_expression -> . and_expression AND relation_expression
    (59) and_expression -> . relation_expression
    (60) relation_expression -> . simple_expression expression_tail
    (68) simple_expression -> . term simple_expression_tail
    (72) term -> . factor term_tail
    (78) factor -> . PLUS factor
    (79) factor -> . MINUS factor
    (80) factor -> . LPAREN expression RPAREN
    (81) factor -> . INTEGER
    (82) factor -> . REAL
    (83) factor -> . IDENTIFIER identifier_expression
    (84) factor -> . TRUE
    (85) factor -> . FALSE

    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    LPAREN          shift and go to state 52
    INTEGER         shift and go to state 53
    REAL            shift and go to state 54
    IDENTIFIER      shift and go to state 55
    TRUE            shift and go to state 56
    FALSE           shift and go to state 57

    expression                     shift and go to state 170
    and_expression                 shift and go to state 45
    relation_expression            shift and go to state 46
    simple_expression              shift and go to state 47
    term                           shift and go to state 48
    factor                         shift and go to state 49

state 162

    (15) type -> ARRAY LBRACKET arraytypes RBRACKET . OF type

    OF              shift and go to state 171


state 163

    (17) arraytypes -> INTEGER DOT . DOT INTEGER

    DOT             shift and go to state 172


state 164

    (32) identifier_assign_expression -> LBRACKET expression RBRACKET ASSIGN assign_expression .

    SEMICOLON       reduce using rule 32 (identifier_assign_expression -> LBRACKET expression RBRACKET ASSIGN assign_expression .)
    END_DOT         reduce using rule 32 (identifier_assign_expression -> LBRACKET expression RBRACKET ASSIGN assign_expression .)
    END             reduce using rule 32 (identifier_assign_expression -> LBRACKET expression RBRACKET ASSIGN assign_expression .)
    ELSE            reduce using rule 32 (identifier_assign_expression -> LBRACKET expression RBRACKET ASSIGN assign_expression .)


state 165

    (45) opt_else -> ELSE code_or_statement .

    ELSE            reduce using rule 45 (opt_else -> ELSE code_or_statement .)
    SEMICOLON       reduce using rule 45 (opt_else -> ELSE code_or_statement .)
    END_DOT         reduce using rule 45 (opt_else -> ELSE code_or_statement .)
    END             reduce using rule 45 (opt_else -> ELSE code_or_statement .)


state 166

    (47) code_or_statement -> dotless_code .

    ELSE            reduce using rule 47 (code_or_statement -> dotless_code .)
    SEMICOLON       reduce using rule 47 (code_or_statement -> dotless_code .)
    END_DOT         reduce using rule 47 (code_or_statement -> dotless_code .)
    END             reduce using rule 47 (code_or_statement -> dotless_code .)


state 167

    (48) code_or_statement -> statement .

    ELSE            reduce using rule 48 (code_or_statement -> statement .)
    SEMICOLON       reduce using rule 48 (code_or_statement -> statement .)
    END_DOT         reduce using rule 48 (code_or_statement -> statement .)
    END             reduce using rule 48 (code_or_statement -> statement .)


state 168

    (19) dotless_code -> BEGIN expressions END .

    ELSE            reduce using rule 19 (dotless_code -> BEGIN expressions END .)
    SEMICOLON       reduce using rule 19 (dotless_code -> BEGIN expressions END .)
    END_DOT         reduce using rule 19 (dotless_code -> BEGIN expressions END .)
    END             reduce using rule 19 (dotless_code -> BEGIN expressions END .)


state 169

    (40) to_expression -> TO expression .
    (56) expression -> expression . OR and_expression

    DO              reduce using rule 40 (to_expression -> TO expression .)
    OR              shift and go to state 77


state 170

    (41) to_expression -> DOWNTO expression .
    (56) expression -> expression . OR and_expression

    DO              reduce using rule 41 (to_expression -> DOWNTO expression .)
    OR              shift and go to state 77


state 171

    (15) type -> ARRAY LBRACKET arraytypes RBRACKET OF . type
    (11) type -> . TYPE_INTEGER
    (12) type -> . TYPE_REAL
    (13) type -> . BOOLEAN
    (14) type -> . TYPE_STRING
    (15) type -> . ARRAY LBRACKET arraytypes RBRACKET OF type

    TYPE_INTEGER    shift and go to state 62
    TYPE_REAL       shift and go to state 63
    BOOLEAN         shift and go to state 64
    TYPE_STRING     shift and go to state 65
    ARRAY           shift and go to state 66

    type                           shift and go to state 173

state 172

    (17) arraytypes -> INTEGER DOT DOT . INTEGER

    INTEGER         shift and go to state 174


state 173

    (15) type -> ARRAY LBRACKET arraytypes RBRACKET OF type .

    SEMICOLON       reduce using rule 15 (type -> ARRAY LBRACKET arraytypes RBRACKET OF type .)


state 174

    (17) arraytypes -> INTEGER DOT DOT INTEGER .

    RBRACKET        reduce using rule 17 (arraytypes -> INTEGER DOT DOT INTEGER .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 114 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 115 resolved as shift
