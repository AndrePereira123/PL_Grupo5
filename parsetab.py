
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN BEGIN BOOLEAN COLON COMMA COMMENT DIVIDE DO DOT DOWNTO ELSE END END_DOT EQUAL FALSE FOR FUNCTION GE GT IDENTIFIER IF INTEGER LBRACKET LE LPAREN LT MINUS MOD NE NOT OF OR PLUS PROCEDURE PROGRAM RBRACKET READLN REAL REAL_DIVIDE RPAREN SEMICOLON STRING THEN TIMES TO TRUE TYPE_INTEGER TYPE_REAL TYPE_STRING VAR WHILE WRITE WRITELNfile : PROGRAM name vars codename : IDENTIFIER SEMICOLONvars : VAR varstail\n| emptyvarstail : vardecl varstail\n| emptyvardecl : idlist COLON type SEMICOLONidlist : IDENTIFIER idlistTailidlistTail : COMMA IDENTIFIER idlistTail\n| emptytype : TYPE_INTEGER\n| TYPE_REAL\n| BOOLEAN\n| TYPE_STRING\n| ARRAY LBRACKET arraytypes RBRACKET OF typearraytypes : INTEGER\n| INTEGER DOT DOT INTEGER  \ncode : BEGIN expressions END_DOTdotless_code : BEGIN expressions ENDexpressions : statement expressions_tail\n| emptyexpressions_tail : SEMICOLON expressions\n| emptystatement : open_statement\n| closed_statementopen_statement : IF if_condition THEN code_or_statement\n| IF if_condition THEN code_or_statement ELSE open_statement\n| WHILE if_condition DO open_statement\n| FOR for_condition DO open_statement closed_statement : IDENTIFIER identifier_assign_expression  \n| WRITELN write_statement \n| WRITE write_statement \n| READLN readln_statement \n| IF if_condition THEN code_or_statement ELSE code_or_statement\n| FOR for_condition DO code_or_statement\n| WHILE if_condition DO code_or_statementidentifier_assign_expression : ASSIGN assign_expression  \n| LBRACKET expression RBRACKET ASSIGN assign_expression\nfor_condition : expression ASSIGN expression to_expressionto_expression : TO expression\n| DOWNTO expressioncode_or_statement : dotless_code\n| closed_statementif_condition : expressionwrite_statement : LPAREN string_statement RPARENreadln_statement : LPAREN string_statement RPARENstring_statement : assign_expression\n| assign_expression COMMA string_statementassign_expression : expression\n| STRING expression : expression OR and_expression\n| and_expressionand_expression : and_expression AND relation_expression          \n| relation_expressionrelation_expression : simple_expression expression_tailexpression_tail : LT simple_expression \n| GT simple_expression \n| LE simple_expression \n| GE simple_expression \n| NE simple_expression \n| EQUAL simple_expression\n| emptysimple_expression : term simple_expression_tailsimple_expression_tail : PLUS term simple_expression_tail\n| MINUS term simple_expression_tail\n| emptyterm : factor term_tailterm_tail : TIMES factor term_tail\n| DIVIDE factor term_tail\n| MOD factor term_tail\n| REAL_DIVIDE factor term_tail\n| emptyfactor : PLUS factor\n| MINUS factor\n| LPAREN expression RPAREN\n| INTEGER\n| REAL\n| IDENTIFIER identifier_expression\n| TRUE\n| FALSE\nidentifier_expression : LBRACKET expression RBRACKET\n                      | empty\nempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,9,33,],[0,-1,-18,]),'IDENTIFIER':([2,6,10,12,21,22,23,31,35,44,45,46,56,57,59,62,71,72,73,75,76,77,78,79,80,83,84,87,88,89,90,96,98,99,100,108,111,115,116,117,141,146,158,159,160,164,168,169,178,],[4,15,24,15,49,49,49,69,24,49,49,49,49,49,49,49,24,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,24,24,49,-7,49,24,49,49,49,24,49,49,49,24,24,24,24,]),'VAR':([3,8,],[6,-2,]),'BEGIN':([3,5,6,7,8,11,12,13,28,71,98,99,108,146,164,168,169,178,],[-83,10,-83,-4,-2,-3,-83,-6,-5,115,115,115,-7,115,115,115,115,115,]),'SEMICOLON':([4,17,19,20,39,40,41,42,43,47,48,49,50,51,55,58,60,61,63,64,65,66,67,74,81,82,85,86,91,92,93,95,97,101,102,103,112,113,114,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,140,142,150,151,152,153,154,155,156,165,166,167,172,176,],[8,35,-24,-25,-52,-54,-83,-83,-83,-76,-77,-83,-79,-80,-30,-31,-32,-33,108,-11,-12,-13,-14,-55,-62,-63,-66,-67,-72,-73,-74,-78,-82,-37,-49,-50,-26,-42,-43,-51,-53,-56,-57,-58,-59,-60,-61,-83,-83,-83,-83,-83,-83,-75,-28,-36,-29,-35,-45,-46,-64,-65,-68,-69,-70,-71,-81,-34,-27,-19,-38,-15,]),'END_DOT':([10,16,17,18,19,20,34,35,36,39,40,41,42,43,47,48,49,50,51,55,58,60,61,70,74,81,82,85,86,91,92,93,95,97,101,102,103,112,113,114,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,140,142,150,151,152,153,154,155,156,165,166,167,172,],[-83,33,-83,-21,-24,-25,-20,-83,-23,-52,-54,-83,-83,-83,-76,-77,-83,-79,-80,-30,-31,-32,-33,-22,-55,-62,-63,-66,-67,-72,-73,-74,-78,-82,-37,-49,-50,-26,-42,-43,-51,-53,-56,-57,-58,-59,-60,-61,-83,-83,-83,-83,-83,-83,-75,-28,-36,-29,-35,-45,-46,-64,-65,-68,-69,-70,-71,-81,-34,-27,-19,-38,]),'IF':([10,35,71,98,99,115,146,164,168,169,178,],[21,21,111,21,21,21,21,111,111,111,111,]),'WHILE':([10,35,71,98,99,115,146,164,168,169,178,],[22,22,117,22,22,22,22,117,117,117,117,]),'FOR':([10,35,71,98,99,115,146,164,168,169,178,],[23,23,116,23,23,23,23,116,116,116,116,]),'WRITELN':([10,35,71,98,99,115,146,164,168,169,178,],[25,25,25,25,25,25,25,25,25,25,25,]),'WRITE':([10,35,71,98,99,115,146,164,168,169,178,],[26,26,26,26,26,26,26,26,26,26,26,]),'READLN':([10,35,71,98,99,115,146,164,168,169,178,],[27,27,27,27,27,27,27,27,27,27,27,]),'COLON':([14,15,30,32,69,110,],[29,-83,-8,-10,-83,-9,]),'COMMA':([15,39,40,41,42,43,47,48,49,50,51,69,74,81,82,85,86,91,92,93,95,97,102,103,106,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,150,151,152,153,154,155,156,],[31,-52,-54,-83,-83,-83,-76,-77,-83,-79,-80,31,-55,-62,-63,-66,-67,-72,-73,-74,-78,-82,-49,-50,141,-51,-53,-56,-57,-58,-59,-60,-61,-83,-83,-83,-83,-83,-83,-75,-64,-65,-68,-69,-70,-71,-81,]),'END':([17,18,19,20,34,35,36,39,40,41,42,43,47,48,49,50,51,55,58,60,61,70,74,81,82,85,86,91,92,93,95,97,101,102,103,112,113,114,115,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,140,142,147,150,151,152,153,154,155,156,165,166,167,172,],[-83,-21,-24,-25,-20,-83,-23,-52,-54,-83,-83,-83,-76,-77,-83,-79,-80,-30,-31,-32,-33,-22,-55,-62,-63,-66,-67,-72,-73,-74,-78,-82,-37,-49,-50,-26,-42,-43,-83,-51,-53,-56,-57,-58,-59,-60,-61,-83,-83,-83,-83,-83,-83,-75,-28,-36,-29,-35,-45,-46,167,-64,-65,-68,-69,-70,-71,-81,-34,-27,-19,-38,]),'PLUS':([21,22,23,42,43,44,45,46,47,48,49,50,51,56,57,59,62,72,73,75,76,77,78,79,80,83,84,86,87,88,89,90,91,92,93,95,96,97,100,111,116,117,126,127,128,129,130,131,132,141,152,153,154,155,156,158,159,160,],[44,44,44,83,-83,44,44,44,-76,-77,-83,-79,-80,44,44,44,44,44,44,44,44,44,44,44,44,44,44,-67,44,44,44,44,-72,-73,-74,-78,44,-82,44,44,44,44,83,83,-83,-83,-83,-83,-75,44,-68,-69,-70,-71,-81,44,44,44,]),'MINUS':([21,22,23,42,43,44,45,46,47,48,49,50,51,56,57,59,62,72,73,75,76,77,78,79,80,83,84,86,87,88,89,90,91,92,93,95,96,97,100,111,116,117,126,127,128,129,130,131,132,141,152,153,154,155,156,158,159,160,],[45,45,45,84,-83,45,45,45,-76,-77,-83,-79,-80,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-67,45,45,45,45,-72,-73,-74,-78,45,-82,45,45,45,45,84,84,-83,-83,-83,-83,-75,45,-68,-69,-70,-71,-81,45,45,45,]),'LPAREN':([21,22,23,25,26,27,44,45,46,56,57,59,62,72,73,75,76,77,78,79,80,83,84,87,88,89,90,96,100,111,116,117,141,158,159,160,],[46,46,46,59,59,62,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'INTEGER':([21,22,23,44,45,46,56,57,59,62,72,73,75,76,77,78,79,80,83,84,87,88,89,90,96,100,109,111,116,117,141,158,159,160,174,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,144,47,47,47,47,47,47,47,177,]),'REAL':([21,22,23,44,45,46,56,57,59,62,72,73,75,76,77,78,79,80,83,84,87,88,89,90,96,100,111,116,117,141,158,159,160,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'TRUE':([21,22,23,44,45,46,56,57,59,62,72,73,75,76,77,78,79,80,83,84,87,88,89,90,96,100,111,116,117,141,158,159,160,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'FALSE':([21,22,23,44,45,46,56,57,59,62,72,73,75,76,77,78,79,80,83,84,87,88,89,90,96,100,111,116,117,141,158,159,160,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'ASSIGN':([24,39,40,41,42,43,47,48,49,50,51,54,74,81,82,85,86,91,92,93,95,97,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,139,150,151,152,153,154,155,156,],[56,-52,-54,-83,-83,-83,-76,-77,-83,-79,-80,100,-55,-62,-63,-66,-67,-72,-73,-74,-78,-82,-51,-53,-56,-57,-58,-59,-60,-61,-83,-83,-83,-83,-83,-83,-75,160,-64,-65,-68,-69,-70,-71,-81,]),'LBRACKET':([24,49,68,],[57,96,109,]),'TYPE_INTEGER':([29,173,],[64,64,]),'TYPE_REAL':([29,173,],[65,65,]),'BOOLEAN':([29,173,],[66,66,]),'TYPE_STRING':([29,173,],[67,67,]),'ARRAY':([29,173,],[68,68,]),'THEN':([37,38,39,40,41,42,43,47,48,49,50,51,74,81,82,85,86,91,92,93,95,97,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,145,150,151,152,153,154,155,156,],[71,-44,-52,-54,-83,-83,-83,-76,-77,-83,-79,-80,-55,-62,-63,-66,-67,-72,-73,-74,-78,-82,-51,-53,-56,-57,-58,-59,-60,-61,-83,-83,-83,-83,-83,-83,-75,164,-64,-65,-68,-69,-70,-71,-81,]),'DO':([38,39,40,41,42,43,47,48,49,50,51,52,53,74,81,82,85,86,91,92,93,95,97,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,148,149,150,151,152,153,154,155,156,157,170,171,],[-44,-52,-54,-83,-83,-83,-76,-77,-83,-79,-80,98,99,-55,-62,-63,-66,-67,-72,-73,-74,-78,-82,-51,-53,-56,-57,-58,-59,-60,-61,-83,-83,-83,-83,-83,-83,-75,168,169,-64,-65,-68,-69,-70,-71,-81,-39,-40,-41,]),'OR':([38,39,40,41,42,43,47,48,49,50,51,54,74,81,82,85,86,91,92,93,94,95,97,102,104,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,138,150,151,152,153,154,155,156,170,171,],[72,-52,-54,-83,-83,-83,-76,-77,-83,-79,-80,72,-55,-62,-63,-66,-67,-72,-73,-74,72,-78,-82,72,72,-51,-53,-56,-57,-58,-59,-60,-61,-83,-83,-83,-83,-83,-83,-75,72,72,-64,-65,-68,-69,-70,-71,-81,72,72,]),'RPAREN':([39,40,41,42,43,47,48,49,50,51,74,81,82,85,86,91,92,93,94,95,97,102,103,105,106,107,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,150,151,152,153,154,155,156,161,],[-52,-54,-83,-83,-83,-76,-77,-83,-79,-80,-55,-62,-63,-66,-67,-72,-73,-74,132,-78,-82,-49,-50,140,-47,142,-51,-53,-56,-57,-58,-59,-60,-61,-83,-83,-83,-83,-83,-83,-75,-64,-65,-68,-69,-70,-71,-81,-48,]),'ELSE':([39,40,41,42,43,47,48,49,50,51,55,58,60,61,74,81,82,85,86,91,92,93,95,97,101,102,103,112,113,114,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,135,137,140,142,150,151,152,153,154,155,156,165,167,172,175,],[-52,-54,-83,-83,-83,-76,-77,-83,-79,-80,-30,-31,-32,-33,-55,-62,-63,-66,-67,-72,-73,-74,-78,-82,-37,-49,-50,146,-42,-43,-51,-53,-56,-57,-58,-59,-60,-61,-83,-83,-83,-83,-83,-83,-75,-36,-35,-45,-46,-64,-65,-68,-69,-70,-71,-81,-34,-19,-38,178,]),'RBRACKET':([39,40,41,42,43,47,48,49,50,51,74,81,82,85,86,91,92,93,95,97,104,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,143,144,150,151,152,153,154,155,156,177,],[-52,-54,-83,-83,-83,-76,-77,-83,-79,-80,-55,-62,-63,-66,-67,-72,-73,-74,-78,-82,139,-51,-53,-56,-57,-58,-59,-60,-61,-83,-83,-83,-83,-83,-83,-75,156,162,-16,-64,-65,-68,-69,-70,-71,-81,-17,]),'TO':([39,40,41,42,43,47,48,49,50,51,74,81,82,85,86,91,92,93,95,97,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,138,150,151,152,153,154,155,156,],[-52,-54,-83,-83,-83,-76,-77,-83,-79,-80,-55,-62,-63,-66,-67,-72,-73,-74,-78,-82,-51,-53,-56,-57,-58,-59,-60,-61,-83,-83,-83,-83,-83,-83,-75,158,-64,-65,-68,-69,-70,-71,-81,]),'DOWNTO':([39,40,41,42,43,47,48,49,50,51,74,81,82,85,86,91,92,93,95,97,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,138,150,151,152,153,154,155,156,],[-52,-54,-83,-83,-83,-76,-77,-83,-79,-80,-55,-62,-63,-66,-67,-72,-73,-74,-78,-82,-51,-53,-56,-57,-58,-59,-60,-61,-83,-83,-83,-83,-83,-83,-75,159,-64,-65,-68,-69,-70,-71,-81,]),'AND':([39,40,41,42,43,47,48,49,50,51,74,81,82,85,86,91,92,93,95,97,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,150,151,152,153,154,155,156,],[73,-54,-83,-83,-83,-76,-77,-83,-79,-80,-55,-62,-63,-66,-67,-72,-73,-74,-78,-82,73,-53,-56,-57,-58,-59,-60,-61,-83,-83,-83,-83,-83,-83,-75,-64,-65,-68,-69,-70,-71,-81,]),'LT':([41,42,43,47,48,49,50,51,82,85,86,91,92,93,95,97,126,127,128,129,130,131,132,150,151,152,153,154,155,156,],[75,-83,-83,-76,-77,-83,-79,-80,-63,-66,-67,-72,-73,-74,-78,-82,-83,-83,-83,-83,-83,-83,-75,-64,-65,-68,-69,-70,-71,-81,]),'GT':([41,42,43,47,48,49,50,51,82,85,86,91,92,93,95,97,126,127,128,129,130,131,132,150,151,152,153,154,155,156,],[76,-83,-83,-76,-77,-83,-79,-80,-63,-66,-67,-72,-73,-74,-78,-82,-83,-83,-83,-83,-83,-83,-75,-64,-65,-68,-69,-70,-71,-81,]),'LE':([41,42,43,47,48,49,50,51,82,85,86,91,92,93,95,97,126,127,128,129,130,131,132,150,151,152,153,154,155,156,],[77,-83,-83,-76,-77,-83,-79,-80,-63,-66,-67,-72,-73,-74,-78,-82,-83,-83,-83,-83,-83,-83,-75,-64,-65,-68,-69,-70,-71,-81,]),'GE':([41,42,43,47,48,49,50,51,82,85,86,91,92,93,95,97,126,127,128,129,130,131,132,150,151,152,153,154,155,156,],[78,-83,-83,-76,-77,-83,-79,-80,-63,-66,-67,-72,-73,-74,-78,-82,-83,-83,-83,-83,-83,-83,-75,-64,-65,-68,-69,-70,-71,-81,]),'NE':([41,42,43,47,48,49,50,51,82,85,86,91,92,93,95,97,126,127,128,129,130,131,132,150,151,152,153,154,155,156,],[79,-83,-83,-76,-77,-83,-79,-80,-63,-66,-67,-72,-73,-74,-78,-82,-83,-83,-83,-83,-83,-83,-75,-64,-65,-68,-69,-70,-71,-81,]),'EQUAL':([41,42,43,47,48,49,50,51,82,85,86,91,92,93,95,97,126,127,128,129,130,131,132,150,151,152,153,154,155,156,],[80,-83,-83,-76,-77,-83,-79,-80,-63,-66,-67,-72,-73,-74,-78,-82,-83,-83,-83,-83,-83,-83,-75,-64,-65,-68,-69,-70,-71,-81,]),'TIMES':([43,47,48,49,50,51,92,93,95,97,128,129,130,131,132,156,],[87,-76,-77,-83,-79,-80,-73,-74,-78,-82,87,87,87,87,-75,-81,]),'DIVIDE':([43,47,48,49,50,51,92,93,95,97,128,129,130,131,132,156,],[88,-76,-77,-83,-79,-80,-73,-74,-78,-82,88,88,88,88,-75,-81,]),'MOD':([43,47,48,49,50,51,92,93,95,97,128,129,130,131,132,156,],[89,-76,-77,-83,-79,-80,-73,-74,-78,-82,89,89,89,89,-75,-81,]),'REAL_DIVIDE':([43,47,48,49,50,51,92,93,95,97,128,129,130,131,132,156,],[90,-76,-77,-83,-79,-80,-73,-74,-78,-82,90,90,90,90,-75,-81,]),'STRING':([56,59,62,141,160,],[103,103,103,103,103,]),'DOT':([144,163,],[163,174,]),'OF':([162,],[173,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file':([0,],[1,]),'name':([2,],[3,]),'vars':([3,],[5,]),'empty':([3,6,10,12,15,17,35,41,42,43,49,69,115,126,127,128,129,130,131,],[7,13,18,13,32,36,18,81,85,91,97,32,18,85,85,91,91,91,91,]),'code':([5,],[9,]),'varstail':([6,12,],[11,28,]),'vardecl':([6,12,],[12,12,]),'idlist':([6,12,],[14,14,]),'expressions':([10,35,115,],[16,70,147,]),'statement':([10,35,115,],[17,17,17,]),'open_statement':([10,35,98,99,115,146,],[19,19,134,136,19,166,]),'closed_statement':([10,35,71,98,99,115,146,164,168,169,178,],[20,20,114,114,114,20,114,114,114,114,114,]),'idlistTail':([15,69,],[30,110,]),'expressions_tail':([17,],[34,]),'if_condition':([21,22,111,117,],[37,52,145,149,]),'expression':([21,22,23,46,56,57,59,62,96,100,111,116,117,141,158,159,160,],[38,38,54,94,102,104,102,102,133,138,38,54,38,102,170,171,102,]),'and_expression':([21,22,23,46,56,57,59,62,72,96,100,111,116,117,141,158,159,160,],[39,39,39,39,39,39,39,39,118,39,39,39,39,39,39,39,39,39,]),'relation_expression':([21,22,23,46,56,57,59,62,72,73,96,100,111,116,117,141,158,159,160,],[40,40,40,40,40,40,40,40,40,119,40,40,40,40,40,40,40,40,40,]),'simple_expression':([21,22,23,46,56,57,59,62,72,73,75,76,77,78,79,80,96,100,111,116,117,141,158,159,160,],[41,41,41,41,41,41,41,41,41,41,120,121,122,123,124,125,41,41,41,41,41,41,41,41,41,]),'term':([21,22,23,46,56,57,59,62,72,73,75,76,77,78,79,80,83,84,96,100,111,116,117,141,158,159,160,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,126,127,42,42,42,42,42,42,42,42,42,]),'factor':([21,22,23,44,45,46,56,57,59,62,72,73,75,76,77,78,79,80,83,84,87,88,89,90,96,100,111,116,117,141,158,159,160,],[43,43,43,92,93,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,128,129,130,131,43,43,43,43,43,43,43,43,43,]),'for_condition':([23,116,],[53,148,]),'identifier_assign_expression':([24,],[55,]),'write_statement':([25,26,],[58,60,]),'readln_statement':([27,],[61,]),'type':([29,173,],[63,176,]),'expression_tail':([41,],[74,]),'simple_expression_tail':([42,126,127,],[82,150,151,]),'term_tail':([43,128,129,130,131,],[86,152,153,154,155,]),'identifier_expression':([49,],[95,]),'assign_expression':([56,59,62,141,160,],[101,106,106,106,172,]),'string_statement':([59,62,141,],[105,107,161,]),'code_or_statement':([71,98,99,146,164,168,169,178,],[112,135,137,165,175,137,135,165,]),'dotless_code':([71,98,99,146,164,168,169,178,],[113,113,113,113,113,113,113,113,]),'arraytypes':([109,],[143,]),'to_expression':([138,],[157,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file","S'",1,None,None,None),
  ('file -> PROGRAM name vars code','file',4,'p_file','yacc.py',21),
  ('name -> IDENTIFIER SEMICOLON','name',2,'p_name','yacc.py',29),
  ('vars -> VAR varstail','vars',2,'p_vars','yacc.py',35),
  ('vars -> empty','vars',1,'p_vars','yacc.py',36),
  ('varstail -> vardecl varstail','varstail',2,'p_varstail','yacc.py',47),
  ('varstail -> empty','varstail',1,'p_varstail','yacc.py',48),
  ('vardecl -> idlist COLON type SEMICOLON','vardecl',4,'p_vardecl','yacc.py',60),
  ('idlist -> IDENTIFIER idlistTail','idlist',2,'p_idlist','yacc.py',97),
  ('idlistTail -> COMMA IDENTIFIER idlistTail','idlistTail',3,'p_idlistTail','yacc.py',105),
  ('idlistTail -> empty','idlistTail',1,'p_idlistTail','yacc.py',106),
  ('type -> TYPE_INTEGER','type',1,'p_type','yacc.py',117),
  ('type -> TYPE_REAL','type',1,'p_type','yacc.py',118),
  ('type -> BOOLEAN','type',1,'p_type','yacc.py',119),
  ('type -> TYPE_STRING','type',1,'p_type','yacc.py',120),
  ('type -> ARRAY LBRACKET arraytypes RBRACKET OF type','type',6,'p_type','yacc.py',121),
  ('arraytypes -> INTEGER','arraytypes',1,'p_array_types','yacc.py',128),
  ('arraytypes -> INTEGER DOT DOT INTEGER','arraytypes',4,'p_array_types','yacc.py',129),
  ('code -> BEGIN expressions END_DOT','code',3,'p_code','yacc.py',140),
  ('dotless_code -> BEGIN expressions END','dotless_code',3,'p_dotless_code','yacc.py',145),
  ('expressions -> statement expressions_tail','expressions',2,'p_expressions','yacc.py',153),
  ('expressions -> empty','expressions',1,'p_expressions','yacc.py',154),
  ('expressions_tail -> SEMICOLON expressions','expressions_tail',2,'p_expressions_tail','yacc.py',165),
  ('expressions_tail -> empty','expressions_tail',1,'p_expressions_tail','yacc.py',166),
  ('statement -> open_statement','statement',1,'p_statement','yacc.py',180),
  ('statement -> closed_statement','statement',1,'p_statement','yacc.py',181),
  ('open_statement -> IF if_condition THEN code_or_statement','open_statement',4,'p_open_statement','yacc.py',188),
  ('open_statement -> IF if_condition THEN code_or_statement ELSE open_statement','open_statement',6,'p_open_statement','yacc.py',189),
  ('open_statement -> WHILE if_condition DO open_statement','open_statement',4,'p_open_statement','yacc.py',190),
  ('open_statement -> FOR for_condition DO open_statement','open_statement',4,'p_open_statement','yacc.py',191),
  ('closed_statement -> IDENTIFIER identifier_assign_expression','closed_statement',2,'p_closed_statement','yacc.py',244),
  ('closed_statement -> WRITELN write_statement','closed_statement',2,'p_closed_statement','yacc.py',245),
  ('closed_statement -> WRITE write_statement','closed_statement',2,'p_closed_statement','yacc.py',246),
  ('closed_statement -> READLN readln_statement','closed_statement',2,'p_closed_statement','yacc.py',247),
  ('closed_statement -> IF if_condition THEN code_or_statement ELSE code_or_statement','closed_statement',6,'p_closed_statement','yacc.py',248),
  ('closed_statement -> FOR for_condition DO code_or_statement','closed_statement',4,'p_closed_statement','yacc.py',249),
  ('closed_statement -> WHILE if_condition DO code_or_statement','closed_statement',4,'p_closed_statement','yacc.py',250),
  ('identifier_assign_expression -> ASSIGN assign_expression','identifier_assign_expression',2,'p_identifier_assign_expression','yacc.py',373),
  ('identifier_assign_expression -> LBRACKET expression RBRACKET ASSIGN assign_expression','identifier_assign_expression',5,'p_identifier_assign_expression','yacc.py',374),
  ('for_condition -> expression ASSIGN expression to_expression','for_condition',4,'p_for_condition','yacc.py',405),
  ('to_expression -> TO expression','to_expression',2,'p_to_expression','yacc.py',433),
  ('to_expression -> DOWNTO expression','to_expression',2,'p_to_expression','yacc.py',434),
  ('code_or_statement -> dotless_code','code_or_statement',1,'p_code_or_statement','yacc.py',451),
  ('code_or_statement -> closed_statement','code_or_statement',1,'p_code_or_statement','yacc.py',452),
  ('if_condition -> expression','if_condition',1,'p_if_condition','yacc.py',459),
  ('write_statement -> LPAREN string_statement RPAREN','write_statement',3,'p_write_statement','yacc.py',477),
  ('readln_statement -> LPAREN string_statement RPAREN','readln_statement',3,'p_readln_statement','yacc.py',562),
  ('string_statement -> assign_expression','string_statement',1,'p_string_statement','yacc.py',638),
  ('string_statement -> assign_expression COMMA string_statement','string_statement',3,'p_string_statement','yacc.py',639),
  ('assign_expression -> expression','assign_expression',1,'p_assign_expression','yacc.py',646),
  ('assign_expression -> STRING','assign_expression',1,'p_assign_expression','yacc.py',647),
  ('expression -> expression OR and_expression','expression',3,'p_expression','yacc.py',657),
  ('expression -> and_expression','expression',1,'p_expression','yacc.py',658),
  ('and_expression -> and_expression AND relation_expression','and_expression',3,'p_and_expression','yacc.py',670),
  ('and_expression -> relation_expression','and_expression',1,'p_and_expression','yacc.py',671),
  ('relation_expression -> simple_expression expression_tail','relation_expression',2,'p_relation_expression','yacc.py',682),
  ('expression_tail -> LT simple_expression','expression_tail',2,'p_expression_tail','yacc.py',730),
  ('expression_tail -> GT simple_expression','expression_tail',2,'p_expression_tail','yacc.py',731),
  ('expression_tail -> LE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',732),
  ('expression_tail -> GE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',733),
  ('expression_tail -> NE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',734),
  ('expression_tail -> EQUAL simple_expression','expression_tail',2,'p_expression_tail','yacc.py',735),
  ('expression_tail -> empty','expression_tail',1,'p_expression_tail','yacc.py',736),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','yacc.py',747),
  ('simple_expression_tail -> PLUS term simple_expression_tail','simple_expression_tail',3,'p_simple_expression_tail','yacc.py',768),
  ('simple_expression_tail -> MINUS term simple_expression_tail','simple_expression_tail',3,'p_simple_expression_tail','yacc.py',769),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','yacc.py',770),
  ('term -> factor term_tail','term',2,'p_term','yacc.py',822),
  ('term_tail -> TIMES factor term_tail','term_tail',3,'p_term_tail','yacc.py',844),
  ('term_tail -> DIVIDE factor term_tail','term_tail',3,'p_term_tail','yacc.py',845),
  ('term_tail -> MOD factor term_tail','term_tail',3,'p_term_tail','yacc.py',846),
  ('term_tail -> REAL_DIVIDE factor term_tail','term_tail',3,'p_term_tail','yacc.py',847),
  ('term_tail -> empty','term_tail',1,'p_term_tail','yacc.py',848),
  ('factor -> PLUS factor','factor',2,'p_factor','yacc.py',879),
  ('factor -> MINUS factor','factor',2,'p_factor','yacc.py',880),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','yacc.py',881),
  ('factor -> INTEGER','factor',1,'p_factor','yacc.py',882),
  ('factor -> REAL','factor',1,'p_factor','yacc.py',883),
  ('factor -> IDENTIFIER identifier_expression','factor',2,'p_factor','yacc.py',884),
  ('factor -> TRUE','factor',1,'p_factor','yacc.py',885),
  ('factor -> FALSE','factor',1,'p_factor','yacc.py',886),
  ('identifier_expression -> LBRACKET expression RBRACKET','identifier_expression',3,'p_identifier_expression','yacc.py',961),
  ('identifier_expression -> empty','identifier_expression',1,'p_identifier_expression','yacc.py',962),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',991),
]
