
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightELSEAND ARRAY ASSIGN BEGIN BOOLEAN COLON COMMA COMMENT DIVIDE DO DOT DOWNTO ELSE END END_DOT EQUAL FALSE FOR FUNCTION GE GT IDENTIFIER IF INTEGER LBRACKET LE LPAREN LT MINUS MOD NE NOT OF OR PLUS PROCEDURE PROGRAM RBRACKET READLN REAL REAL_DIVIDE RPAREN SEMICOLON STRING THEN TIMES TO TRUE TYPE_INTEGER TYPE_REAL TYPE_STRING VAR WHILE WRITE WRITELNfile : PROGRAM name vars codename : IDENTIFIER SEMICOLONvars : VAR varstail\n| emptyvarstail : vardecl varstail\n| emptyvardecl : idlist COLON type SEMICOLONidlist : IDENTIFIER idlistTailidlistTail : COMMA IDENTIFIER idlistTail\n| emptytype : TYPE_INTEGER\n| TYPE_REAL\n| BOOLEAN\n| TYPE_STRING\n| ARRAY LBRACKET arraytypes RBRACKET OF typearraytypes : INTEGER\n| INTEGER DOT DOT INTEGER  \ncode : BEGIN expressions END_DOTdotless_code : BEGIN expressions ENDexpressions : statement expressions_tail\n| emptyexpressions_tail : SEMICOLON expressions\n| emptystatement : IDENTIFIER identifier_assign_expression  \n| WRITELN write_statement \n| WRITE write_statement \n| READLN readln_statement \n| IF if_condition THEN if_code \n| FOR for_condition DO for_code\n| WHILE if_condition DO while_codeidentifier_assign_expression : ASSIGN assign_expression  \n| LBRACKET expression RBRACKET ASSIGN assign_expression\nwhile_code : dotless_code \n| statement \n| emptyif_code : dotless_code opt_else\n| statement opt_else\n| emptyfor_condition : expression ASSIGN expression to_expressionto_expression : TO expression\n| DOWNTO expressionfor_code : dotless_code \n| statement \n| emptyopt_else : ELSE code_or_statement\n| emptycode_or_statement : dotless_code\n| statementif_condition : expressionwrite_statement : LPAREN string_statement RPARENreadln_statement : LPAREN string_statement RPARENstring_statement : assign_expression\n| assign_expression COMMA string_statementassign_expression : expression\n| STRING expression : expression OR and_expression\n| and_expressionand_expression : and_expression AND relation_expression          \n| relation_expressionrelation_expression : simple_expression expression_tailexpression_tail : LT simple_expression \n| GT simple_expression \n| LE simple_expression \n| GE simple_expression \n| NE simple_expression \n| EQUAL simple_expression\n| emptysimple_expression : term simple_expression_tailsimple_expression_tail : PLUS term simple_expression_tail\n| MINUS term simple_expression_tail\n| emptyterm : factor term_tailterm_tail : TIMES factor term_tail\n| DIVIDE factor term_tail\n| MOD factor term_tail\n| REAL_DIVIDE factor term_tail\n| emptyfactor : PLUS factor\n| MINUS factor\n| LPAREN expression RPAREN\n| INTEGER\n| REAL\n| IDENTIFIER identifier_expression\n| TRUE\n| FALSE\nidentifier_expression : LBRACKET expression RBRACKET\n                      | empty\nempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,9,31,],[0,-1,-18,]),'IDENTIFIER':([2,6,10,12,23,24,25,29,33,36,37,39,42,50,51,52,76,77,78,80,81,82,83,84,85,88,89,92,93,94,95,101,103,104,105,106,111,117,145,148,160,161,],[4,15,19,15,55,55,55,67,19,55,55,55,55,55,55,55,19,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,19,55,19,-7,55,19,55,19,55,55,]),'VAR':([3,8,],[6,-2,]),'BEGIN':([3,5,6,7,8,11,12,13,26,76,103,105,106,148,],[-88,10,-88,-4,-2,-3,-88,-6,-5,117,117,117,-7,117,]),'SEMICOLON':([4,17,35,38,40,41,45,46,47,48,49,53,54,55,56,57,61,62,63,64,65,69,70,71,76,79,86,87,90,91,96,97,98,100,102,103,105,110,112,113,114,115,116,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,139,140,141,142,147,149,150,152,153,154,155,156,157,158,164,165,166,167,168,173,],[8,33,-24,-25,-26,-27,-57,-59,-88,-88,-88,-81,-82,-88,-84,-85,106,-11,-12,-13,-14,-31,-54,-55,-88,-60,-67,-68,-71,-72,-77,-78,-79,-83,-87,-88,-88,-50,-51,-28,-88,-88,-38,-56,-58,-61,-62,-63,-64,-65,-66,-88,-88,-88,-88,-88,-88,-80,-29,-42,-43,-44,-30,-33,-34,-35,-36,-46,-37,-69,-70,-73,-74,-75,-76,-86,-32,-45,-47,-48,-19,-15,]),'WRITELN':([10,33,76,103,105,117,148,],[20,20,20,20,20,20,20,]),'WRITE':([10,33,76,103,105,117,148,],[21,21,21,21,21,21,21,]),'READLN':([10,33,76,103,105,117,148,],[22,22,22,22,22,22,22,]),'IF':([10,33,76,103,105,117,148,],[23,23,23,23,23,23,23,]),'FOR':([10,33,76,103,105,117,148,],[24,24,24,24,24,24,24,]),'WHILE':([10,33,76,103,105,117,148,],[25,25,25,25,25,25,25,]),'END_DOT':([10,16,17,18,32,33,34,35,38,40,41,45,46,47,48,49,53,54,55,56,57,68,69,70,71,76,79,86,87,90,91,96,97,98,100,102,103,105,110,112,113,114,115,116,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,139,140,141,142,147,149,150,152,153,154,155,156,157,158,164,165,166,167,168,],[-88,31,-88,-21,-20,-88,-23,-24,-25,-26,-27,-57,-59,-88,-88,-88,-81,-82,-88,-84,-85,-22,-31,-54,-55,-88,-60,-67,-68,-71,-72,-77,-78,-79,-83,-87,-88,-88,-50,-51,-28,-88,-88,-38,-56,-58,-61,-62,-63,-64,-65,-66,-88,-88,-88,-88,-88,-88,-80,-29,-42,-43,-44,-30,-33,-34,-35,-36,-46,-37,-69,-70,-73,-74,-75,-76,-86,-32,-45,-47,-48,-19,]),'COLON':([14,15,28,30,67,108,],[27,-88,-8,-10,-88,-9,]),'COMMA':([15,45,46,47,48,49,53,54,55,56,57,67,70,71,74,79,86,87,90,91,96,97,98,100,102,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,152,153,154,155,156,157,158,],[29,-57,-59,-88,-88,-88,-81,-82,-88,-84,-85,29,-54,-55,111,-60,-67,-68,-71,-72,-77,-78,-79,-83,-87,-56,-58,-61,-62,-63,-64,-65,-66,-88,-88,-88,-88,-88,-88,-80,-69,-70,-73,-74,-75,-76,-86,]),'END':([17,18,32,33,34,35,38,40,41,45,46,47,48,49,53,54,55,56,57,68,69,70,71,76,79,86,87,90,91,96,97,98,100,102,103,105,110,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,139,140,141,142,147,149,150,151,152,153,154,155,156,157,158,164,165,166,167,168,],[-88,-21,-20,-88,-23,-24,-25,-26,-27,-57,-59,-88,-88,-88,-81,-82,-88,-84,-85,-22,-31,-54,-55,-88,-60,-67,-68,-71,-72,-77,-78,-79,-83,-87,-88,-88,-50,-51,-28,-88,-88,-38,-88,-56,-58,-61,-62,-63,-64,-65,-66,-88,-88,-88,-88,-88,-88,-80,-29,-42,-43,-44,-30,-33,-34,-35,-36,-46,-37,168,-69,-70,-73,-74,-75,-76,-86,-32,-45,-47,-48,-19,]),'ASSIGN':([19,45,46,47,48,49,53,54,55,56,57,59,79,86,87,90,91,96,97,98,100,102,109,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,152,153,154,155,156,157,158,],[36,-57,-59,-88,-88,-88,-81,-82,-88,-84,-85,104,-60,-67,-68,-71,-72,-77,-78,-79,-83,-87,145,-56,-58,-61,-62,-63,-64,-65,-66,-88,-88,-88,-88,-88,-88,-80,-69,-70,-73,-74,-75,-76,-86,]),'LBRACKET':([19,55,66,],[37,101,107,]),'LPAREN':([20,21,22,23,24,25,36,37,39,42,50,51,52,77,78,80,81,82,83,84,85,88,89,92,93,94,95,101,104,111,145,160,161,],[39,39,42,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'PLUS':([23,24,25,36,37,39,42,48,49,50,51,52,53,54,55,56,57,77,78,80,81,82,83,84,85,88,89,91,92,93,94,95,96,97,98,100,101,102,104,111,126,127,128,129,130,131,132,145,154,155,156,157,158,160,161,],[50,50,50,50,50,50,50,88,-88,50,50,50,-81,-82,-88,-84,-85,50,50,50,50,50,50,50,50,50,50,-72,50,50,50,50,-77,-78,-79,-83,50,-87,50,50,88,88,-88,-88,-88,-88,-80,50,-73,-74,-75,-76,-86,50,50,]),'MINUS':([23,24,25,36,37,39,42,48,49,50,51,52,53,54,55,56,57,77,78,80,81,82,83,84,85,88,89,91,92,93,94,95,96,97,98,100,101,102,104,111,126,127,128,129,130,131,132,145,154,155,156,157,158,160,161,],[51,51,51,51,51,51,51,89,-88,51,51,51,-81,-82,-88,-84,-85,51,51,51,51,51,51,51,51,51,51,-72,51,51,51,51,-77,-78,-79,-83,51,-87,51,51,89,89,-88,-88,-88,-88,-80,51,-73,-74,-75,-76,-86,51,51,]),'INTEGER':([23,24,25,36,37,39,42,50,51,52,77,78,80,81,82,83,84,85,88,89,92,93,94,95,101,104,107,111,145,160,161,172,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,144,53,53,53,53,174,]),'REAL':([23,24,25,36,37,39,42,50,51,52,77,78,80,81,82,83,84,85,88,89,92,93,94,95,101,104,111,145,160,161,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'TRUE':([23,24,25,36,37,39,42,50,51,52,77,78,80,81,82,83,84,85,88,89,92,93,94,95,101,104,111,145,160,161,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'FALSE':([23,24,25,36,37,39,42,50,51,52,77,78,80,81,82,83,84,85,88,89,92,93,94,95,101,104,111,145,160,161,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'TYPE_INTEGER':([27,171,],[62,62,]),'TYPE_REAL':([27,171,],[63,63,]),'BOOLEAN':([27,171,],[64,64,]),'TYPE_STRING':([27,171,],[65,65,]),'ARRAY':([27,171,],[66,66,]),'ELSE':([35,38,40,41,45,46,47,48,49,53,54,55,56,57,69,70,71,76,79,86,87,90,91,96,97,98,100,102,103,105,110,112,113,114,115,116,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,134,135,136,137,139,140,141,142,147,149,150,152,153,154,155,156,157,158,164,165,166,167,168,],[-24,-25,-26,-27,-57,-59,-88,-88,-88,-81,-82,-88,-84,-85,-31,-54,-55,-88,-60,-67,-68,-71,-72,-77,-78,-79,-83,-87,-88,-88,-50,-51,-28,148,148,-38,-56,-58,-61,-62,-63,-64,-65,-66,-88,-88,-88,-88,-88,-88,-80,-29,-42,-43,-44,-30,-33,-34,-35,-36,-46,-37,-69,-70,-73,-74,-75,-76,-86,-32,-45,-47,-48,-19,]),'STRING':([36,39,42,111,145,],[71,71,71,71,71,]),'THEN':([43,44,45,46,47,48,49,53,54,55,56,57,79,86,87,90,91,96,97,98,100,102,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,152,153,154,155,156,157,158,],[76,-49,-57,-59,-88,-88,-88,-81,-82,-88,-84,-85,-60,-67,-68,-71,-72,-77,-78,-79,-83,-87,-56,-58,-61,-62,-63,-64,-65,-66,-88,-88,-88,-88,-88,-88,-80,-69,-70,-73,-74,-75,-76,-86,]),'DO':([44,45,46,47,48,49,53,54,55,56,57,58,60,79,86,87,90,91,96,97,98,100,102,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,152,153,154,155,156,157,158,159,169,170,],[-49,-57,-59,-88,-88,-88,-81,-82,-88,-84,-85,103,105,-60,-67,-68,-71,-72,-77,-78,-79,-83,-87,-56,-58,-61,-62,-63,-64,-65,-66,-88,-88,-88,-88,-88,-88,-80,-69,-70,-73,-74,-75,-76,-86,-39,-40,-41,]),'OR':([44,45,46,47,48,49,53,54,55,56,57,59,70,72,79,86,87,90,91,96,97,98,99,100,102,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,138,152,153,154,155,156,157,158,169,170,],[77,-57,-59,-88,-88,-88,-81,-82,-88,-84,-85,77,77,77,-60,-67,-68,-71,-72,-77,-78,-79,77,-83,-87,-56,-58,-61,-62,-63,-64,-65,-66,-88,-88,-88,-88,-88,-88,-80,77,77,-69,-70,-73,-74,-75,-76,-86,77,77,]),'RBRACKET':([45,46,47,48,49,53,54,55,56,57,72,79,86,87,90,91,96,97,98,100,102,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,143,144,152,153,154,155,156,157,158,174,],[-57,-59,-88,-88,-88,-81,-82,-88,-84,-85,109,-60,-67,-68,-71,-72,-77,-78,-79,-83,-87,-56,-58,-61,-62,-63,-64,-65,-66,-88,-88,-88,-88,-88,-88,-80,158,162,-16,-69,-70,-73,-74,-75,-76,-86,-17,]),'RPAREN':([45,46,47,48,49,53,54,55,56,57,70,71,73,74,75,79,86,87,90,91,96,97,98,99,100,102,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,146,152,153,154,155,156,157,158,],[-57,-59,-88,-88,-88,-81,-82,-88,-84,-85,-54,-55,110,-52,112,-60,-67,-68,-71,-72,-77,-78,-79,132,-83,-87,-56,-58,-61,-62,-63,-64,-65,-66,-88,-88,-88,-88,-88,-88,-80,-53,-69,-70,-73,-74,-75,-76,-86,]),'TO':([45,46,47,48,49,53,54,55,56,57,79,86,87,90,91,96,97,98,100,102,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,138,152,153,154,155,156,157,158,],[-57,-59,-88,-88,-88,-81,-82,-88,-84,-85,-60,-67,-68,-71,-72,-77,-78,-79,-83,-87,-56,-58,-61,-62,-63,-64,-65,-66,-88,-88,-88,-88,-88,-88,-80,160,-69,-70,-73,-74,-75,-76,-86,]),'DOWNTO':([45,46,47,48,49,53,54,55,56,57,79,86,87,90,91,96,97,98,100,102,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,138,152,153,154,155,156,157,158,],[-57,-59,-88,-88,-88,-81,-82,-88,-84,-85,-60,-67,-68,-71,-72,-77,-78,-79,-83,-87,-56,-58,-61,-62,-63,-64,-65,-66,-88,-88,-88,-88,-88,-88,-80,161,-69,-70,-73,-74,-75,-76,-86,]),'AND':([45,46,47,48,49,53,54,55,56,57,79,86,87,90,91,96,97,98,100,102,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,152,153,154,155,156,157,158,],[78,-59,-88,-88,-88,-81,-82,-88,-84,-85,-60,-67,-68,-71,-72,-77,-78,-79,-83,-87,78,-58,-61,-62,-63,-64,-65,-66,-88,-88,-88,-88,-88,-88,-80,-69,-70,-73,-74,-75,-76,-86,]),'LT':([47,48,49,53,54,55,56,57,87,90,91,96,97,98,100,102,126,127,128,129,130,131,132,152,153,154,155,156,157,158,],[80,-88,-88,-81,-82,-88,-84,-85,-68,-71,-72,-77,-78,-79,-83,-87,-88,-88,-88,-88,-88,-88,-80,-69,-70,-73,-74,-75,-76,-86,]),'GT':([47,48,49,53,54,55,56,57,87,90,91,96,97,98,100,102,126,127,128,129,130,131,132,152,153,154,155,156,157,158,],[81,-88,-88,-81,-82,-88,-84,-85,-68,-71,-72,-77,-78,-79,-83,-87,-88,-88,-88,-88,-88,-88,-80,-69,-70,-73,-74,-75,-76,-86,]),'LE':([47,48,49,53,54,55,56,57,87,90,91,96,97,98,100,102,126,127,128,129,130,131,132,152,153,154,155,156,157,158,],[82,-88,-88,-81,-82,-88,-84,-85,-68,-71,-72,-77,-78,-79,-83,-87,-88,-88,-88,-88,-88,-88,-80,-69,-70,-73,-74,-75,-76,-86,]),'GE':([47,48,49,53,54,55,56,57,87,90,91,96,97,98,100,102,126,127,128,129,130,131,132,152,153,154,155,156,157,158,],[83,-88,-88,-81,-82,-88,-84,-85,-68,-71,-72,-77,-78,-79,-83,-87,-88,-88,-88,-88,-88,-88,-80,-69,-70,-73,-74,-75,-76,-86,]),'NE':([47,48,49,53,54,55,56,57,87,90,91,96,97,98,100,102,126,127,128,129,130,131,132,152,153,154,155,156,157,158,],[84,-88,-88,-81,-82,-88,-84,-85,-68,-71,-72,-77,-78,-79,-83,-87,-88,-88,-88,-88,-88,-88,-80,-69,-70,-73,-74,-75,-76,-86,]),'EQUAL':([47,48,49,53,54,55,56,57,87,90,91,96,97,98,100,102,126,127,128,129,130,131,132,152,153,154,155,156,157,158,],[85,-88,-88,-81,-82,-88,-84,-85,-68,-71,-72,-77,-78,-79,-83,-87,-88,-88,-88,-88,-88,-88,-80,-69,-70,-73,-74,-75,-76,-86,]),'TIMES':([49,53,54,55,56,57,97,98,100,102,128,129,130,131,132,158,],[92,-81,-82,-88,-84,-85,-78,-79,-83,-87,92,92,92,92,-80,-86,]),'DIVIDE':([49,53,54,55,56,57,97,98,100,102,128,129,130,131,132,158,],[93,-81,-82,-88,-84,-85,-78,-79,-83,-87,93,93,93,93,-80,-86,]),'MOD':([49,53,54,55,56,57,97,98,100,102,128,129,130,131,132,158,],[94,-81,-82,-88,-84,-85,-78,-79,-83,-87,94,94,94,94,-80,-86,]),'REAL_DIVIDE':([49,53,54,55,56,57,97,98,100,102,128,129,130,131,132,158,],[95,-81,-82,-88,-84,-85,-78,-79,-83,-87,95,95,95,95,-80,-86,]),'DOT':([144,163,],[163,172,]),'OF':([162,],[171,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file':([0,],[1,]),'name':([2,],[3,]),'vars':([3,],[5,]),'empty':([3,6,10,12,15,17,33,47,48,49,55,67,76,103,105,114,115,117,126,127,128,129,130,131,],[7,13,18,13,30,34,18,86,90,96,102,30,116,137,142,149,149,18,90,90,96,96,96,96,]),'code':([5,],[9,]),'varstail':([6,12,],[11,26,]),'vardecl':([6,12,],[12,12,]),'idlist':([6,12,],[14,14,]),'expressions':([10,33,117,],[16,68,151,]),'statement':([10,33,76,103,105,117,148,],[17,17,115,136,141,17,167,]),'idlistTail':([15,67,],[28,108,]),'expressions_tail':([17,],[32,]),'identifier_assign_expression':([19,],[35,]),'write_statement':([20,21,],[38,40,]),'readln_statement':([22,],[41,]),'if_condition':([23,25,],[43,60,]),'expression':([23,24,25,36,37,39,42,52,101,104,111,145,160,161,],[44,59,44,70,72,70,70,99,133,138,70,70,169,170,]),'and_expression':([23,24,25,36,37,39,42,52,77,101,104,111,145,160,161,],[45,45,45,45,45,45,45,45,118,45,45,45,45,45,45,]),'relation_expression':([23,24,25,36,37,39,42,52,77,78,101,104,111,145,160,161,],[46,46,46,46,46,46,46,46,46,119,46,46,46,46,46,46,]),'simple_expression':([23,24,25,36,37,39,42,52,77,78,80,81,82,83,84,85,101,104,111,145,160,161,],[47,47,47,47,47,47,47,47,47,47,120,121,122,123,124,125,47,47,47,47,47,47,]),'term':([23,24,25,36,37,39,42,52,77,78,80,81,82,83,84,85,88,89,101,104,111,145,160,161,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,126,127,48,48,48,48,48,48,]),'factor':([23,24,25,36,37,39,42,50,51,52,77,78,80,81,82,83,84,85,88,89,92,93,94,95,101,104,111,145,160,161,],[49,49,49,49,49,49,49,97,98,49,49,49,49,49,49,49,49,49,49,49,128,129,130,131,49,49,49,49,49,49,]),'for_condition':([24,],[58,]),'type':([27,171,],[61,173,]),'assign_expression':([36,39,42,111,145,],[69,74,74,74,164,]),'string_statement':([39,42,111,],[73,75,146,]),'expression_tail':([47,],[79,]),'simple_expression_tail':([48,126,127,],[87,152,153,]),'term_tail':([49,128,129,130,131,],[91,154,155,156,157,]),'identifier_expression':([55,],[100,]),'if_code':([76,],[113,]),'dotless_code':([76,103,105,148,],[114,135,140,166,]),'for_code':([103,],[134,]),'while_code':([105,],[139,]),'arraytypes':([107,],[143,]),'opt_else':([114,115,],[147,150,]),'to_expression':([138,],[159,]),'code_or_statement':([148,],[165,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file","S'",1,None,None,None),
  ('file -> PROGRAM name vars code','file',4,'p_file','yacc.py',24),
  ('name -> IDENTIFIER SEMICOLON','name',2,'p_name','yacc.py',32),
  ('vars -> VAR varstail','vars',2,'p_vars','yacc.py',38),
  ('vars -> empty','vars',1,'p_vars','yacc.py',39),
  ('varstail -> vardecl varstail','varstail',2,'p_varstail','yacc.py',50),
  ('varstail -> empty','varstail',1,'p_varstail','yacc.py',51),
  ('vardecl -> idlist COLON type SEMICOLON','vardecl',4,'p_vardecl','yacc.py',63),
  ('idlist -> IDENTIFIER idlistTail','idlist',2,'p_idlist','yacc.py',100),
  ('idlistTail -> COMMA IDENTIFIER idlistTail','idlistTail',3,'p_idlistTail','yacc.py',108),
  ('idlistTail -> empty','idlistTail',1,'p_idlistTail','yacc.py',109),
  ('type -> TYPE_INTEGER','type',1,'p_type','yacc.py',120),
  ('type -> TYPE_REAL','type',1,'p_type','yacc.py',121),
  ('type -> BOOLEAN','type',1,'p_type','yacc.py',122),
  ('type -> TYPE_STRING','type',1,'p_type','yacc.py',123),
  ('type -> ARRAY LBRACKET arraytypes RBRACKET OF type','type',6,'p_type','yacc.py',124),
  ('arraytypes -> INTEGER','arraytypes',1,'p_array_types','yacc.py',131),
  ('arraytypes -> INTEGER DOT DOT INTEGER','arraytypes',4,'p_array_types','yacc.py',132),
  ('code -> BEGIN expressions END_DOT','code',3,'p_code','yacc.py',143),
  ('dotless_code -> BEGIN expressions END','dotless_code',3,'p_dotless_code','yacc.py',148),
  ('expressions -> statement expressions_tail','expressions',2,'p_expressions','yacc.py',156),
  ('expressions -> empty','expressions',1,'p_expressions','yacc.py',157),
  ('expressions_tail -> SEMICOLON expressions','expressions_tail',2,'p_expressions_tail','yacc.py',168),
  ('expressions_tail -> empty','expressions_tail',1,'p_expressions_tail','yacc.py',169),
  ('statement -> IDENTIFIER identifier_assign_expression','statement',2,'p_statement','yacc.py',183),
  ('statement -> WRITELN write_statement','statement',2,'p_statement','yacc.py',184),
  ('statement -> WRITE write_statement','statement',2,'p_statement','yacc.py',185),
  ('statement -> READLN readln_statement','statement',2,'p_statement','yacc.py',186),
  ('statement -> IF if_condition THEN if_code','statement',4,'p_statement','yacc.py',187),
  ('statement -> FOR for_condition DO for_code','statement',4,'p_statement','yacc.py',188),
  ('statement -> WHILE if_condition DO while_code','statement',4,'p_statement','yacc.py',189),
  ('identifier_assign_expression -> ASSIGN assign_expression','identifier_assign_expression',2,'p_identifier_assign_expression','yacc.py',299),
  ('identifier_assign_expression -> LBRACKET expression RBRACKET ASSIGN assign_expression','identifier_assign_expression',5,'p_identifier_assign_expression','yacc.py',300),
  ('while_code -> dotless_code','while_code',1,'p_while_code','yacc.py',332),
  ('while_code -> statement','while_code',1,'p_while_code','yacc.py',333),
  ('while_code -> empty','while_code',1,'p_while_code','yacc.py',334),
  ('if_code -> dotless_code opt_else','if_code',2,'p_if_code','yacc.py',348),
  ('if_code -> statement opt_else','if_code',2,'p_if_code','yacc.py',349),
  ('if_code -> empty','if_code',1,'p_if_code','yacc.py',350),
  ('for_condition -> expression ASSIGN expression to_expression','for_condition',4,'p_for_condition','yacc.py',362),
  ('to_expression -> TO expression','to_expression',2,'p_to_expression','yacc.py',390),
  ('to_expression -> DOWNTO expression','to_expression',2,'p_to_expression','yacc.py',391),
  ('for_code -> dotless_code','for_code',1,'p_for_code','yacc.py',408),
  ('for_code -> statement','for_code',1,'p_for_code','yacc.py',409),
  ('for_code -> empty','for_code',1,'p_for_code','yacc.py',410),
  ('opt_else -> ELSE code_or_statement','opt_else',2,'p_opt_else','yacc.py',426),
  ('opt_else -> empty','opt_else',1,'p_opt_else','yacc.py',427),
  ('code_or_statement -> dotless_code','code_or_statement',1,'p_code_or_statement','yacc.py',434),
  ('code_or_statement -> statement','code_or_statement',1,'p_code_or_statement','yacc.py',435),
  ('if_condition -> expression','if_condition',1,'p_if_condition','yacc.py',441),
  ('write_statement -> LPAREN string_statement RPAREN','write_statement',3,'p_write_statement','yacc.py',459),
  ('readln_statement -> LPAREN string_statement RPAREN','readln_statement',3,'p_readln_statement','yacc.py',544),
  ('string_statement -> assign_expression','string_statement',1,'p_string_statement','yacc.py',620),
  ('string_statement -> assign_expression COMMA string_statement','string_statement',3,'p_string_statement','yacc.py',621),
  ('assign_expression -> expression','assign_expression',1,'p_assign_expression','yacc.py',628),
  ('assign_expression -> STRING','assign_expression',1,'p_assign_expression','yacc.py',629),
  ('expression -> expression OR and_expression','expression',3,'p_expression','yacc.py',639),
  ('expression -> and_expression','expression',1,'p_expression','yacc.py',640),
  ('and_expression -> and_expression AND relation_expression','and_expression',3,'p_and_expression','yacc.py',652),
  ('and_expression -> relation_expression','and_expression',1,'p_and_expression','yacc.py',653),
  ('relation_expression -> simple_expression expression_tail','relation_expression',2,'p_relation_expression','yacc.py',664),
  ('expression_tail -> LT simple_expression','expression_tail',2,'p_expression_tail','yacc.py',712),
  ('expression_tail -> GT simple_expression','expression_tail',2,'p_expression_tail','yacc.py',713),
  ('expression_tail -> LE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',714),
  ('expression_tail -> GE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',715),
  ('expression_tail -> NE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',716),
  ('expression_tail -> EQUAL simple_expression','expression_tail',2,'p_expression_tail','yacc.py',717),
  ('expression_tail -> empty','expression_tail',1,'p_expression_tail','yacc.py',718),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','yacc.py',729),
  ('simple_expression_tail -> PLUS term simple_expression_tail','simple_expression_tail',3,'p_simple_expression_tail','yacc.py',750),
  ('simple_expression_tail -> MINUS term simple_expression_tail','simple_expression_tail',3,'p_simple_expression_tail','yacc.py',751),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','yacc.py',752),
  ('term -> factor term_tail','term',2,'p_term','yacc.py',804),
  ('term_tail -> TIMES factor term_tail','term_tail',3,'p_term_tail','yacc.py',826),
  ('term_tail -> DIVIDE factor term_tail','term_tail',3,'p_term_tail','yacc.py',827),
  ('term_tail -> MOD factor term_tail','term_tail',3,'p_term_tail','yacc.py',828),
  ('term_tail -> REAL_DIVIDE factor term_tail','term_tail',3,'p_term_tail','yacc.py',829),
  ('term_tail -> empty','term_tail',1,'p_term_tail','yacc.py',830),
  ('factor -> PLUS factor','factor',2,'p_factor','yacc.py',861),
  ('factor -> MINUS factor','factor',2,'p_factor','yacc.py',862),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','yacc.py',863),
  ('factor -> INTEGER','factor',1,'p_factor','yacc.py',864),
  ('factor -> REAL','factor',1,'p_factor','yacc.py',865),
  ('factor -> IDENTIFIER identifier_expression','factor',2,'p_factor','yacc.py',866),
  ('factor -> TRUE','factor',1,'p_factor','yacc.py',867),
  ('factor -> FALSE','factor',1,'p_factor','yacc.py',868),
  ('identifier_expression -> LBRACKET expression RBRACKET','identifier_expression',3,'p_identifier_expression','yacc.py',943),
  ('identifier_expression -> empty','identifier_expression',1,'p_identifier_expression','yacc.py',944),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',973),
]
