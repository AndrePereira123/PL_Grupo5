
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN BEGIN BOOLEAN COLON COMMA DIVIDE DO DOT DOWNTO ELSE END END_DOT EQUAL FALSE FOR FUNCTION GE GT IDENTIFIER IF INTEGER LBRACKET LE LPAREN LT MINUS MOD NE NOT OF OR PLUS PROCEDURE PROGRAM RBRACKET READLN REAL REAL_DIVIDE RPAREN SEMICOLON STRING THEN TIMES TO TRUE TYPE_INTEGER TYPE_REAL TYPE_STRING VAR WHILE WRITE WRITELNfile : PROGRAM name vars codename : IDENTIFIER SEMICOLONvars : VAR varstail\n| emptyvarstail : vardecl varstail\n| emptyvardecl : idlist COLON type SEMICOLONidlist : IDENTIFIER idlistTailidlistTail : COMMA IDENTIFIER idlistTail\n| emptytype : TYPE_INTEGER\n| TYPE_REAL\n| BOOLEAN\n| TYPE_STRING\n| ARRAY LBRACKET arraytypes RBRACKET OF typearraytypes : INTEGER\n| INTEGER DOT DOT INTEGER  \ncode : BEGIN expressions END_DOTdotless_code : BEGIN expressions ENDexpressions : statement expressions_tail\n| emptyexpressions_tail : SEMICOLON expressions\n| emptystatement : open_statement\n| closed_statementopen_statement : IF if_condition THEN code_or_statement\n| IF if_condition THEN code_or_statement ELSE open_statement\n| WHILE if_condition DO open_statement\n| FOR for_condition DO open_statement closed_statement : IDENTIFIER identifier_assign_expression  \n| WRITELN write_statement \n| WRITE write_statement \n| READLN readln_statement \n| IF if_condition THEN code_or_statement ELSE code_or_statement\n| FOR for_condition DO code_or_statement\n| WHILE if_condition DO code_or_statementidentifier_assign_expression : ASSIGN assign_expression  \n| LBRACKET expression RBRACKET ASSIGN assign_expression\nfor_condition : expression ASSIGN expression to_expressionto_expression : TO expression\n| DOWNTO expressioncode_or_statement : dotless_code\n| closed_statementif_condition : expressionwrite_statement : LPAREN string_statement RPARENreadln_statement : LPAREN string_statement RPARENstring_statement : assign_expression\n| assign_expression COMMA string_statementassign_expression : expression expression : expression OR and_expression\n| and_expressionand_expression : and_expression AND relation_expression          \n| relation_expressionrelation_expression : simple_expression expression_tail\n| NOT simple_expression expression_tailexpression_tail : LT simple_expression \n| GT simple_expression \n| LE simple_expression \n| GE simple_expression \n| NE simple_expression \n| EQUAL simple_expression\n| emptysimple_expression : term simple_expression_tailsimple_expression_tail : PLUS term simple_expression_tail\n| MINUS term simple_expression_tail\n| emptyterm : factor term_tailterm_tail : TIMES factor term_tail\n| DIVIDE factor term_tail\n| MOD factor term_tail\n| REAL_DIVIDE factor term_tail\n| emptyfactor : PLUS factor\n| MINUS factor\n| LPAREN expression RPAREN\n| INTEGER\n| REAL\n| IDENTIFIER identifier_expression\n| IDENTIFIER length_expression\n| TRUE\n| STRING\n| FALSElength_expression : LPAREN IDENTIFIER RPAREN\nidentifier_expression : LBRACKET expression RBRACKET\n                      | empty\nempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,9,33,],[0,-1,-18,]),'IDENTIFIER':([2,6,10,12,21,22,23,31,35,42,45,46,47,58,59,61,64,73,74,75,77,78,79,80,81,82,86,87,90,91,92,93,100,102,103,104,105,112,115,119,120,121,147,152,165,166,167,171,175,176,185,],[4,15,24,15,50,50,50,71,24,50,50,50,50,50,50,50,50,24,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,139,24,24,50,-7,50,24,50,50,50,24,50,50,50,24,24,24,24,]),'VAR':([3,8,],[6,-2,]),'BEGIN':([3,5,6,7,8,11,12,13,28,73,103,104,112,152,171,175,176,185,],[-86,10,-86,-4,-2,-3,-86,-6,-5,119,119,119,-7,119,119,119,119,119,]),'SEMICOLON':([4,17,19,20,39,40,41,43,44,48,49,50,51,52,53,57,60,62,63,65,66,67,68,69,76,83,84,85,88,89,94,95,96,98,99,101,106,107,116,117,118,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,140,141,142,143,146,148,156,157,158,159,160,161,162,163,172,173,174,179,183,],[8,35,-24,-25,-51,-53,-86,-86,-86,-76,-77,-86,-80,-81,-82,-30,-31,-32,-33,112,-11,-12,-13,-14,-54,-62,-86,-63,-66,-67,-72,-73,-74,-78,-79,-85,-37,-49,-26,-42,-43,-50,-52,-56,-57,-58,-59,-60,-61,-55,-86,-86,-86,-86,-86,-86,-75,-28,-36,-29,-35,-45,-46,-64,-65,-68,-69,-70,-71,-84,-83,-34,-27,-19,-38,-15,]),'END_DOT':([10,16,17,18,19,20,34,35,36,39,40,41,43,44,48,49,50,51,52,53,57,60,62,63,72,76,83,84,85,88,89,94,95,96,98,99,101,106,107,116,117,118,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,140,141,142,143,146,148,156,157,158,159,160,161,162,163,172,173,174,179,],[-86,33,-86,-21,-24,-25,-20,-86,-23,-51,-53,-86,-86,-86,-76,-77,-86,-80,-81,-82,-30,-31,-32,-33,-22,-54,-62,-86,-63,-66,-67,-72,-73,-74,-78,-79,-85,-37,-49,-26,-42,-43,-50,-52,-56,-57,-58,-59,-60,-61,-55,-86,-86,-86,-86,-86,-86,-75,-28,-36,-29,-35,-45,-46,-64,-65,-68,-69,-70,-71,-84,-83,-34,-27,-19,-38,]),'IF':([10,35,73,103,104,119,152,171,175,176,185,],[21,21,115,21,21,21,21,115,115,115,115,]),'WHILE':([10,35,73,103,104,119,152,171,175,176,185,],[22,22,121,22,22,22,22,121,121,121,121,]),'FOR':([10,35,73,103,104,119,152,171,175,176,185,],[23,23,120,23,23,23,23,120,120,120,120,]),'WRITELN':([10,35,73,103,104,119,152,171,175,176,185,],[25,25,25,25,25,25,25,25,25,25,25,]),'WRITE':([10,35,73,103,104,119,152,171,175,176,185,],[26,26,26,26,26,26,26,26,26,26,26,]),'READLN':([10,35,73,103,104,119,152,171,175,176,185,],[27,27,27,27,27,27,27,27,27,27,27,]),'COLON':([14,15,30,32,71,114,],[29,-86,-8,-10,-86,-9,]),'COMMA':([15,39,40,41,43,44,48,49,50,51,52,53,71,76,83,84,85,88,89,94,95,96,98,99,101,107,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,156,157,158,159,160,161,162,163,],[31,-51,-53,-86,-86,-86,-76,-77,-86,-80,-81,-82,31,-54,-62,-86,-63,-66,-67,-72,-73,-74,-78,-79,-85,-49,147,-50,-52,-56,-57,-58,-59,-60,-61,-55,-86,-86,-86,-86,-86,-86,-75,-64,-65,-68,-69,-70,-71,-84,-83,]),'END':([17,18,19,20,34,35,36,39,40,41,43,44,48,49,50,51,52,53,57,60,62,63,72,76,83,84,85,88,89,94,95,96,98,99,101,106,107,116,117,118,119,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,140,141,142,143,146,148,153,156,157,158,159,160,161,162,163,172,173,174,179,],[-86,-21,-24,-25,-20,-86,-23,-51,-53,-86,-86,-86,-76,-77,-86,-80,-81,-82,-30,-31,-32,-33,-22,-54,-62,-86,-63,-66,-67,-72,-73,-74,-78,-79,-85,-37,-49,-26,-42,-43,-86,-50,-52,-56,-57,-58,-59,-60,-61,-55,-86,-86,-86,-86,-86,-86,-75,-28,-36,-29,-35,-45,-46,174,-64,-65,-68,-69,-70,-71,-84,-83,-34,-27,-19,-38,]),'NOT':([21,22,23,47,58,59,61,64,74,75,100,105,115,120,121,147,165,166,167,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'PLUS':([21,22,23,42,43,44,45,46,47,48,49,50,51,52,53,58,59,61,64,74,75,77,78,79,80,81,82,86,87,89,90,91,92,93,94,95,96,98,99,100,101,105,115,120,121,131,132,133,134,135,136,137,147,158,159,160,161,162,163,165,166,167,],[45,45,45,45,86,-86,45,45,45,-76,-77,-86,-80,-81,-82,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-67,45,45,45,45,-72,-73,-74,-78,-79,45,-85,45,45,45,45,86,86,-86,-86,-86,-86,-75,45,-68,-69,-70,-71,-84,-83,45,45,45,]),'MINUS':([21,22,23,42,43,44,45,46,47,48,49,50,51,52,53,58,59,61,64,74,75,77,78,79,80,81,82,86,87,89,90,91,92,93,94,95,96,98,99,100,101,105,115,120,121,131,132,133,134,135,136,137,147,158,159,160,161,162,163,165,166,167,],[46,46,46,46,87,-86,46,46,46,-76,-77,-86,-80,-81,-82,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-67,46,46,46,46,-72,-73,-74,-78,-79,46,-85,46,46,46,46,87,87,-86,-86,-86,-86,-75,46,-68,-69,-70,-71,-84,-83,46,46,46,]),'LPAREN':([21,22,23,25,26,27,42,45,46,47,50,58,59,61,64,74,75,77,78,79,80,81,82,86,87,90,91,92,93,100,105,115,120,121,147,165,166,167,],[47,47,47,61,61,64,47,47,47,47,102,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'INTEGER':([21,22,23,42,45,46,47,58,59,61,64,74,75,77,78,79,80,81,82,86,87,90,91,92,93,100,105,113,115,120,121,147,165,166,167,181,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,150,48,48,48,48,48,48,48,184,]),'REAL':([21,22,23,42,45,46,47,58,59,61,64,74,75,77,78,79,80,81,82,86,87,90,91,92,93,100,105,115,120,121,147,165,166,167,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'TRUE':([21,22,23,42,45,46,47,58,59,61,64,74,75,77,78,79,80,81,82,86,87,90,91,92,93,100,105,115,120,121,147,165,166,167,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'STRING':([21,22,23,42,45,46,47,58,59,61,64,74,75,77,78,79,80,81,82,86,87,90,91,92,93,100,105,115,120,121,147,165,166,167,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'FALSE':([21,22,23,42,45,46,47,58,59,61,64,74,75,77,78,79,80,81,82,86,87,90,91,92,93,100,105,115,120,121,147,165,166,167,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'ASSIGN':([24,39,40,41,43,44,48,49,50,51,52,53,56,76,83,84,85,88,89,94,95,96,98,99,101,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,145,156,157,158,159,160,161,162,163,],[58,-51,-53,-86,-86,-86,-76,-77,-86,-80,-81,-82,105,-54,-62,-86,-63,-66,-67,-72,-73,-74,-78,-79,-85,-50,-52,-56,-57,-58,-59,-60,-61,-55,-86,-86,-86,-86,-86,-86,-75,167,-64,-65,-68,-69,-70,-71,-84,-83,]),'LBRACKET':([24,50,70,],[59,100,113,]),'TYPE_INTEGER':([29,180,],[66,66,]),'TYPE_REAL':([29,180,],[67,67,]),'BOOLEAN':([29,180,],[68,68,]),'TYPE_STRING':([29,180,],[69,69,]),'ARRAY':([29,180,],[70,70,]),'THEN':([37,38,39,40,41,43,44,48,49,50,51,52,53,76,83,84,85,88,89,94,95,96,98,99,101,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,151,156,157,158,159,160,161,162,163,],[73,-44,-51,-53,-86,-86,-86,-76,-77,-86,-80,-81,-82,-54,-62,-86,-63,-66,-67,-72,-73,-74,-78,-79,-85,-50,-52,-56,-57,-58,-59,-60,-61,-55,-86,-86,-86,-86,-86,-86,-75,171,-64,-65,-68,-69,-70,-71,-84,-83,]),'DO':([38,39,40,41,43,44,48,49,50,51,52,53,54,55,76,83,84,85,88,89,94,95,96,98,99,101,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,154,155,156,157,158,159,160,161,162,163,164,177,178,],[-44,-51,-53,-86,-86,-86,-76,-77,-86,-80,-81,-82,103,104,-54,-62,-86,-63,-66,-67,-72,-73,-74,-78,-79,-85,-50,-52,-56,-57,-58,-59,-60,-61,-55,-86,-86,-86,-86,-86,-86,-75,175,176,-64,-65,-68,-69,-70,-71,-84,-83,-39,-40,-41,]),'OR':([38,39,40,41,43,44,48,49,50,51,52,53,56,76,83,84,85,88,89,94,95,96,97,98,99,101,107,108,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,144,156,157,158,159,160,161,162,163,177,178,],[74,-51,-53,-86,-86,-86,-76,-77,-86,-80,-81,-82,74,-54,-62,-86,-63,-66,-67,-72,-73,-74,74,-78,-79,-85,74,74,-50,-52,-56,-57,-58,-59,-60,-61,-55,-86,-86,-86,-86,-86,-86,-75,74,74,-64,-65,-68,-69,-70,-71,-84,-83,74,74,]),'RPAREN':([39,40,41,43,44,48,49,50,51,52,53,76,83,84,85,88,89,94,95,96,97,98,99,101,107,109,110,111,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,139,156,157,158,159,160,161,162,163,168,],[-51,-53,-86,-86,-86,-76,-77,-86,-80,-81,-82,-54,-62,-86,-63,-66,-67,-72,-73,-74,137,-78,-79,-85,-49,146,-47,148,-50,-52,-56,-57,-58,-59,-60,-61,-55,-86,-86,-86,-86,-86,-86,-75,163,-64,-65,-68,-69,-70,-71,-84,-83,-48,]),'ELSE':([39,40,41,43,44,48,49,50,51,52,53,57,60,62,63,76,83,84,85,88,89,94,95,96,98,99,101,106,107,116,117,118,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,141,143,146,148,156,157,158,159,160,161,162,163,172,174,179,182,],[-51,-53,-86,-86,-86,-76,-77,-86,-80,-81,-82,-30,-31,-32,-33,-54,-62,-86,-63,-66,-67,-72,-73,-74,-78,-79,-85,-37,-49,152,-42,-43,-50,-52,-56,-57,-58,-59,-60,-61,-55,-86,-86,-86,-86,-86,-86,-75,-36,-35,-45,-46,-64,-65,-68,-69,-70,-71,-84,-83,-34,-19,-38,185,]),'RBRACKET':([39,40,41,43,44,48,49,50,51,52,53,76,83,84,85,88,89,94,95,96,98,99,101,108,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,149,150,156,157,158,159,160,161,162,163,184,],[-51,-53,-86,-86,-86,-76,-77,-86,-80,-81,-82,-54,-62,-86,-63,-66,-67,-72,-73,-74,-78,-79,-85,145,-50,-52,-56,-57,-58,-59,-60,-61,-55,-86,-86,-86,-86,-86,-86,-75,162,169,-16,-64,-65,-68,-69,-70,-71,-84,-83,-17,]),'TO':([39,40,41,43,44,48,49,50,51,52,53,76,83,84,85,88,89,94,95,96,98,99,101,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,144,156,157,158,159,160,161,162,163,],[-51,-53,-86,-86,-86,-76,-77,-86,-80,-81,-82,-54,-62,-86,-63,-66,-67,-72,-73,-74,-78,-79,-85,-50,-52,-56,-57,-58,-59,-60,-61,-55,-86,-86,-86,-86,-86,-86,-75,165,-64,-65,-68,-69,-70,-71,-84,-83,]),'DOWNTO':([39,40,41,43,44,48,49,50,51,52,53,76,83,84,85,88,89,94,95,96,98,99,101,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,144,156,157,158,159,160,161,162,163,],[-51,-53,-86,-86,-86,-76,-77,-86,-80,-81,-82,-54,-62,-86,-63,-66,-67,-72,-73,-74,-78,-79,-85,-50,-52,-56,-57,-58,-59,-60,-61,-55,-86,-86,-86,-86,-86,-86,-75,166,-64,-65,-68,-69,-70,-71,-84,-83,]),'AND':([39,40,41,43,44,48,49,50,51,52,53,76,83,84,85,88,89,94,95,96,98,99,101,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,156,157,158,159,160,161,162,163,],[75,-53,-86,-86,-86,-76,-77,-86,-80,-81,-82,-54,-62,-86,-63,-66,-67,-72,-73,-74,-78,-79,-85,75,-52,-56,-57,-58,-59,-60,-61,-55,-86,-86,-86,-86,-86,-86,-75,-64,-65,-68,-69,-70,-71,-84,-83,]),'LT':([41,43,44,48,49,50,51,52,53,84,85,88,89,94,95,96,98,99,101,131,132,133,134,135,136,137,156,157,158,159,160,161,162,163,],[77,-86,-86,-76,-77,-86,-80,-81,-82,77,-63,-66,-67,-72,-73,-74,-78,-79,-85,-86,-86,-86,-86,-86,-86,-75,-64,-65,-68,-69,-70,-71,-84,-83,]),'GT':([41,43,44,48,49,50,51,52,53,84,85,88,89,94,95,96,98,99,101,131,132,133,134,135,136,137,156,157,158,159,160,161,162,163,],[78,-86,-86,-76,-77,-86,-80,-81,-82,78,-63,-66,-67,-72,-73,-74,-78,-79,-85,-86,-86,-86,-86,-86,-86,-75,-64,-65,-68,-69,-70,-71,-84,-83,]),'LE':([41,43,44,48,49,50,51,52,53,84,85,88,89,94,95,96,98,99,101,131,132,133,134,135,136,137,156,157,158,159,160,161,162,163,],[79,-86,-86,-76,-77,-86,-80,-81,-82,79,-63,-66,-67,-72,-73,-74,-78,-79,-85,-86,-86,-86,-86,-86,-86,-75,-64,-65,-68,-69,-70,-71,-84,-83,]),'GE':([41,43,44,48,49,50,51,52,53,84,85,88,89,94,95,96,98,99,101,131,132,133,134,135,136,137,156,157,158,159,160,161,162,163,],[80,-86,-86,-76,-77,-86,-80,-81,-82,80,-63,-66,-67,-72,-73,-74,-78,-79,-85,-86,-86,-86,-86,-86,-86,-75,-64,-65,-68,-69,-70,-71,-84,-83,]),'NE':([41,43,44,48,49,50,51,52,53,84,85,88,89,94,95,96,98,99,101,131,132,133,134,135,136,137,156,157,158,159,160,161,162,163,],[81,-86,-86,-76,-77,-86,-80,-81,-82,81,-63,-66,-67,-72,-73,-74,-78,-79,-85,-86,-86,-86,-86,-86,-86,-75,-64,-65,-68,-69,-70,-71,-84,-83,]),'EQUAL':([41,43,44,48,49,50,51,52,53,84,85,88,89,94,95,96,98,99,101,131,132,133,134,135,136,137,156,157,158,159,160,161,162,163,],[82,-86,-86,-76,-77,-86,-80,-81,-82,82,-63,-66,-67,-72,-73,-74,-78,-79,-85,-86,-86,-86,-86,-86,-86,-75,-64,-65,-68,-69,-70,-71,-84,-83,]),'TIMES':([44,48,49,50,51,52,53,95,96,98,99,101,133,134,135,136,137,162,163,],[90,-76,-77,-86,-80,-81,-82,-73,-74,-78,-79,-85,90,90,90,90,-75,-84,-83,]),'DIVIDE':([44,48,49,50,51,52,53,95,96,98,99,101,133,134,135,136,137,162,163,],[91,-76,-77,-86,-80,-81,-82,-73,-74,-78,-79,-85,91,91,91,91,-75,-84,-83,]),'MOD':([44,48,49,50,51,52,53,95,96,98,99,101,133,134,135,136,137,162,163,],[92,-76,-77,-86,-80,-81,-82,-73,-74,-78,-79,-85,92,92,92,92,-75,-84,-83,]),'REAL_DIVIDE':([44,48,49,50,51,52,53,95,96,98,99,101,133,134,135,136,137,162,163,],[93,-76,-77,-86,-80,-81,-82,-73,-74,-78,-79,-85,93,93,93,93,-75,-84,-83,]),'DOT':([150,170,],[170,181,]),'OF':([169,],[180,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file':([0,],[1,]),'name':([2,],[3,]),'vars':([3,],[5,]),'empty':([3,6,10,12,15,17,35,41,43,44,50,71,84,119,131,132,133,134,135,136,],[7,13,18,13,32,36,18,83,88,94,101,32,83,18,88,88,94,94,94,94,]),'code':([5,],[9,]),'varstail':([6,12,],[11,28,]),'vardecl':([6,12,],[12,12,]),'idlist':([6,12,],[14,14,]),'expressions':([10,35,119,],[16,72,153,]),'statement':([10,35,119,],[17,17,17,]),'open_statement':([10,35,103,104,119,152,],[19,19,140,142,19,173,]),'closed_statement':([10,35,73,103,104,119,152,171,175,176,185,],[20,20,118,118,118,20,118,118,118,118,118,]),'idlistTail':([15,71,],[30,114,]),'expressions_tail':([17,],[34,]),'if_condition':([21,22,115,121,],[37,54,151,155,]),'expression':([21,22,23,47,58,59,61,64,100,105,115,120,121,147,165,166,167,],[38,38,56,97,107,108,107,107,138,144,38,56,38,107,177,178,107,]),'and_expression':([21,22,23,47,58,59,61,64,74,100,105,115,120,121,147,165,166,167,],[39,39,39,39,39,39,39,39,122,39,39,39,39,39,39,39,39,39,]),'relation_expression':([21,22,23,47,58,59,61,64,74,75,100,105,115,120,121,147,165,166,167,],[40,40,40,40,40,40,40,40,40,123,40,40,40,40,40,40,40,40,40,]),'simple_expression':([21,22,23,42,47,58,59,61,64,74,75,77,78,79,80,81,82,100,105,115,120,121,147,165,166,167,],[41,41,41,84,41,41,41,41,41,41,41,124,125,126,127,128,129,41,41,41,41,41,41,41,41,41,]),'term':([21,22,23,42,47,58,59,61,64,74,75,77,78,79,80,81,82,86,87,100,105,115,120,121,147,165,166,167,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,131,132,43,43,43,43,43,43,43,43,43,]),'factor':([21,22,23,42,45,46,47,58,59,61,64,74,75,77,78,79,80,81,82,86,87,90,91,92,93,100,105,115,120,121,147,165,166,167,],[44,44,44,44,95,96,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,133,134,135,136,44,44,44,44,44,44,44,44,44,]),'for_condition':([23,120,],[55,154,]),'identifier_assign_expression':([24,],[57,]),'write_statement':([25,26,],[60,62,]),'readln_statement':([27,],[63,]),'type':([29,180,],[65,183,]),'expression_tail':([41,84,],[76,130,]),'simple_expression_tail':([43,131,132,],[85,156,157,]),'term_tail':([44,133,134,135,136,],[89,158,159,160,161,]),'identifier_expression':([50,],[98,]),'length_expression':([50,],[99,]),'assign_expression':([58,61,64,147,167,],[106,110,110,110,179,]),'string_statement':([61,64,147,],[109,111,168,]),'code_or_statement':([73,103,104,152,171,175,176,185,],[116,141,143,172,182,143,141,172,]),'dotless_code':([73,103,104,152,171,175,176,185,],[117,117,117,117,117,117,117,117,]),'arraytypes':([113,],[149,]),'to_expression':([144,],[164,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file","S'",1,None,None,None),
  ('file -> PROGRAM name vars code','file',4,'p_file','yacc.py',21),
  ('name -> IDENTIFIER SEMICOLON','name',2,'p_name','yacc.py',29),
  ('vars -> VAR varstail','vars',2,'p_vars','yacc.py',35),
  ('vars -> empty','vars',1,'p_vars','yacc.py',36),
  ('varstail -> vardecl varstail','varstail',2,'p_varstail','yacc.py',47),
  ('varstail -> empty','varstail',1,'p_varstail','yacc.py',48),
  ('vardecl -> idlist COLON type SEMICOLON','vardecl',4,'p_vardecl','yacc.py',60),
  ('idlist -> IDENTIFIER idlistTail','idlist',2,'p_idlist','yacc.py',97),
  ('idlistTail -> COMMA IDENTIFIER idlistTail','idlistTail',3,'p_idlistTail','yacc.py',105),
  ('idlistTail -> empty','idlistTail',1,'p_idlistTail','yacc.py',106),
  ('type -> TYPE_INTEGER','type',1,'p_type','yacc.py',117),
  ('type -> TYPE_REAL','type',1,'p_type','yacc.py',118),
  ('type -> BOOLEAN','type',1,'p_type','yacc.py',119),
  ('type -> TYPE_STRING','type',1,'p_type','yacc.py',120),
  ('type -> ARRAY LBRACKET arraytypes RBRACKET OF type','type',6,'p_type','yacc.py',121),
  ('arraytypes -> INTEGER','arraytypes',1,'p_array_types','yacc.py',128),
  ('arraytypes -> INTEGER DOT DOT INTEGER','arraytypes',4,'p_array_types','yacc.py',129),
  ('code -> BEGIN expressions END_DOT','code',3,'p_code','yacc.py',140),
  ('dotless_code -> BEGIN expressions END','dotless_code',3,'p_dotless_code','yacc.py',145),
  ('expressions -> statement expressions_tail','expressions',2,'p_expressions','yacc.py',153),
  ('expressions -> empty','expressions',1,'p_expressions','yacc.py',154),
  ('expressions_tail -> SEMICOLON expressions','expressions_tail',2,'p_expressions_tail','yacc.py',165),
  ('expressions_tail -> empty','expressions_tail',1,'p_expressions_tail','yacc.py',166),
  ('statement -> open_statement','statement',1,'p_statement','yacc.py',180),
  ('statement -> closed_statement','statement',1,'p_statement','yacc.py',181),
  ('open_statement -> IF if_condition THEN code_or_statement','open_statement',4,'p_open_statement','yacc.py',188),
  ('open_statement -> IF if_condition THEN code_or_statement ELSE open_statement','open_statement',6,'p_open_statement','yacc.py',189),
  ('open_statement -> WHILE if_condition DO open_statement','open_statement',4,'p_open_statement','yacc.py',190),
  ('open_statement -> FOR for_condition DO open_statement','open_statement',4,'p_open_statement','yacc.py',191),
  ('closed_statement -> IDENTIFIER identifier_assign_expression','closed_statement',2,'p_closed_statement','yacc.py',247),
  ('closed_statement -> WRITELN write_statement','closed_statement',2,'p_closed_statement','yacc.py',248),
  ('closed_statement -> WRITE write_statement','closed_statement',2,'p_closed_statement','yacc.py',249),
  ('closed_statement -> READLN readln_statement','closed_statement',2,'p_closed_statement','yacc.py',250),
  ('closed_statement -> IF if_condition THEN code_or_statement ELSE code_or_statement','closed_statement',6,'p_closed_statement','yacc.py',251),
  ('closed_statement -> FOR for_condition DO code_or_statement','closed_statement',4,'p_closed_statement','yacc.py',252),
  ('closed_statement -> WHILE if_condition DO code_or_statement','closed_statement',4,'p_closed_statement','yacc.py',253),
  ('identifier_assign_expression -> ASSIGN assign_expression','identifier_assign_expression',2,'p_identifier_assign_expression','yacc.py',377),
  ('identifier_assign_expression -> LBRACKET expression RBRACKET ASSIGN assign_expression','identifier_assign_expression',5,'p_identifier_assign_expression','yacc.py',378),
  ('for_condition -> expression ASSIGN expression to_expression','for_condition',4,'p_for_condition','yacc.py',409),
  ('to_expression -> TO expression','to_expression',2,'p_to_expression','yacc.py',437),
  ('to_expression -> DOWNTO expression','to_expression',2,'p_to_expression','yacc.py',438),
  ('code_or_statement -> dotless_code','code_or_statement',1,'p_code_or_statement','yacc.py',455),
  ('code_or_statement -> closed_statement','code_or_statement',1,'p_code_or_statement','yacc.py',456),
  ('if_condition -> expression','if_condition',1,'p_if_condition','yacc.py',463),
  ('write_statement -> LPAREN string_statement RPAREN','write_statement',3,'p_write_statement','yacc.py',481),
  ('readln_statement -> LPAREN string_statement RPAREN','readln_statement',3,'p_readln_statement','yacc.py',572),
  ('string_statement -> assign_expression','string_statement',1,'p_string_statement','yacc.py',649),
  ('string_statement -> assign_expression COMMA string_statement','string_statement',3,'p_string_statement','yacc.py',650),
  ('assign_expression -> expression','assign_expression',1,'p_assign_expression','yacc.py',657),
  ('expression -> expression OR and_expression','expression',3,'p_expression','yacc.py',664),
  ('expression -> and_expression','expression',1,'p_expression','yacc.py',665),
  ('and_expression -> and_expression AND relation_expression','and_expression',3,'p_and_expression','yacc.py',677),
  ('and_expression -> relation_expression','and_expression',1,'p_and_expression','yacc.py',678),
  ('relation_expression -> simple_expression expression_tail','relation_expression',2,'p_relation_expression','yacc.py',689),
  ('relation_expression -> NOT simple_expression expression_tail','relation_expression',3,'p_relation_expression','yacc.py',690),
  ('expression_tail -> LT simple_expression','expression_tail',2,'p_expression_tail','yacc.py',763),
  ('expression_tail -> GT simple_expression','expression_tail',2,'p_expression_tail','yacc.py',764),
  ('expression_tail -> LE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',765),
  ('expression_tail -> GE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',766),
  ('expression_tail -> NE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',767),
  ('expression_tail -> EQUAL simple_expression','expression_tail',2,'p_expression_tail','yacc.py',768),
  ('expression_tail -> empty','expression_tail',1,'p_expression_tail','yacc.py',769),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','yacc.py',780),
  ('simple_expression_tail -> PLUS term simple_expression_tail','simple_expression_tail',3,'p_simple_expression_tail','yacc.py',801),
  ('simple_expression_tail -> MINUS term simple_expression_tail','simple_expression_tail',3,'p_simple_expression_tail','yacc.py',802),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','yacc.py',803),
  ('term -> factor term_tail','term',2,'p_term','yacc.py',855),
  ('term_tail -> TIMES factor term_tail','term_tail',3,'p_term_tail','yacc.py',877),
  ('term_tail -> DIVIDE factor term_tail','term_tail',3,'p_term_tail','yacc.py',878),
  ('term_tail -> MOD factor term_tail','term_tail',3,'p_term_tail','yacc.py',879),
  ('term_tail -> REAL_DIVIDE factor term_tail','term_tail',3,'p_term_tail','yacc.py',880),
  ('term_tail -> empty','term_tail',1,'p_term_tail','yacc.py',881),
  ('factor -> PLUS factor','factor',2,'p_factor','yacc.py',912),
  ('factor -> MINUS factor','factor',2,'p_factor','yacc.py',913),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','yacc.py',914),
  ('factor -> INTEGER','factor',1,'p_factor','yacc.py',915),
  ('factor -> REAL','factor',1,'p_factor','yacc.py',916),
  ('factor -> IDENTIFIER identifier_expression','factor',2,'p_factor','yacc.py',917),
  ('factor -> IDENTIFIER length_expression','factor',2,'p_factor','yacc.py',918),
  ('factor -> TRUE','factor',1,'p_factor','yacc.py',919),
  ('factor -> STRING','factor',1,'p_factor','yacc.py',920),
  ('factor -> FALSE','factor',1,'p_factor','yacc.py',921),
  ('length_expression -> LPAREN IDENTIFIER RPAREN','length_expression',3,'p_length_expression','yacc.py',1002),
  ('identifier_expression -> LBRACKET expression RBRACKET','identifier_expression',3,'p_identifier_expression','yacc.py',1033),
  ('identifier_expression -> empty','identifier_expression',1,'p_identifier_expression','yacc.py',1034),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',1063),
]
