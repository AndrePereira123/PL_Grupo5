
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN BEGIN BOOLEAN COLON COMMA COMMENT DIVIDE DO DOT DOWNTO ELSE END END_DOT EQUAL FALSE FOR FUNCTION GE GT IDENTIFIER IF INTEGER LBRACKET LE LPAREN LT MINUS MOD NE NOT OF OR PLUS PROCEDURE PROGRAM RBRACKET READLN REAL REAL_DIVIDE RPAREN SEMICOLON STRING THEN TIMES TO TRUE TYPE_INTEGER TYPE_REAL TYPE_STRING VAR WHILE WRITE WRITELNfile : PROGRAM name vars codename : IDENTIFIER SEMICOLONvars : VAR varstail\n           | emptyvarstail : vardecl varstail\n                | emptyvardecl : idlist COLON type SEMICOLONidlist : IDENTIFIER idlistTailidlistTail : COMMA IDENTIFIER idlistTail\n           | emptytype : TYPE_INTEGER\n           | TYPE_REAL\n           | BOOLEAN\n           | TYPE_STRING\n           | ARRAY LBRACKET INTEGER RBRACKET OF typecode : BEGIN expressions END_DOTdotless_code : BEGIN expressions ENDexpressions : statement expressions_tail\n                   | emptyexpressions_tail : SEMICOLON expressions\n                        | emptystatement : IDENTIFIER ASSIGN assign_expression  \n                | WRITELN write_statement \n                | WRITE write_statement \n                | READLN readln_statement \n                | IF if_condition THEN if_code \n                | FOR for_condition DO for_code\n                | WHILE if_condition DO while_codewhile_code : dotless_code \n                | statement \n                | emptyif_code : dotless_code opt_else\n               | statement opt_else\n               | emptyfor_condition : expression ASSIGN expression to_expressionto_expression : TO expression\n                     | DOWNTO expressionfor_code : dotless_code \n               | statement \n               | emptyopt_else : ELSE code_or_statement\n                | emptycode_or_statement : dotless_code\n                         | statementif_condition : expression if_condition_tailif_condition_tail : OR if_condition_tail_2\n                         | if_condition_tail_2if_condition_tail_2 : AND if_condition\n                           | emptywrite_statement : LPAREN string_statement RPARENreadln_statement : LPAREN string_statement RPARENstring_statement : assign_expression\n                        | assign_expression COMMA string_statementassign_expression : expression\n                         | STRING expression : expression OR and_expression\n                  | and_expressionand_expression : and_expression AND relation_expression          \n                      | relation_expressionrelation_expression : simple_expression expression_tailexpression_tail : LT simple_expression \n                        | GT simple_expression \n                        | LE simple_expression \n                        | GE simple_expression \n                        | NE simple_expression \n                        | EQUAL simple_expression\n                        | emptysimple_expression : term simple_expression_tailsimple_expression_tail : PLUS term simple_expression_tail\n                             | MINUS term simple_expression_tail\n                             | emptyterm : factor term_tailterm_tail : TIMES factor term_tail\n                 | DIVIDE factor term_tail\n                 | MOD factor term_tail\n                 | REAL_DIVIDE factor term_tail\n                 | emptyfactor : PLUS factor\n              | MINUS factor\n              | LPAREN expression RPAREN\n              | INTEGER\n              | REAL\n              | IDENTIFIER\n              | TRUE\n              | FALSEempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,9,31,],[0,-1,-16,]),'IDENTIFIER':([2,6,10,12,23,24,25,29,33,35,37,40,48,49,50,73,75,77,79,81,82,83,84,85,86,89,90,93,94,95,96,101,102,103,104,105,109,115,145,156,157,],[4,15,19,15,53,53,53,65,19,53,53,53,53,53,53,19,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,19,53,53,19,-7,53,19,19,53,53,]),'VAR':([3,8,],[6,-2,]),'BEGIN':([3,5,6,7,8,11,12,13,26,73,101,104,105,145,],[-86,10,-86,-4,-2,-3,-86,-6,-5,115,115,115,-7,115,]),'SEMICOLON':([4,17,36,38,39,43,44,45,46,47,51,52,53,54,55,59,60,61,62,63,67,68,69,73,80,87,88,91,92,97,98,99,101,104,108,110,111,112,113,114,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,140,141,144,146,147,149,150,151,152,153,154,159,160,161,162,166,],[8,33,-23,-24,-25,-57,-59,-86,-86,-86,-81,-82,-83,-84,-85,105,-11,-12,-13,-14,-22,-54,-55,-86,-60,-67,-68,-71,-72,-77,-78,-79,-86,-86,-50,-51,-26,-86,-86,-34,-56,-58,-61,-62,-63,-64,-65,-66,-86,-86,-86,-86,-86,-86,-80,-27,-38,-39,-40,-28,-29,-30,-31,-32,-42,-33,-69,-70,-73,-74,-75,-76,-41,-43,-44,-17,-15,]),'WRITELN':([10,33,73,101,104,115,145,],[20,20,20,20,20,20,20,]),'WRITE':([10,33,73,101,104,115,145,],[21,21,21,21,21,21,21,]),'READLN':([10,33,73,101,104,115,145,],[22,22,22,22,22,22,22,]),'IF':([10,33,73,101,104,115,145,],[23,23,23,23,23,23,23,]),'FOR':([10,33,73,101,104,115,145,],[24,24,24,24,24,24,24,]),'WHILE':([10,33,73,101,104,115,145,],[25,25,25,25,25,25,25,]),'END_DOT':([10,16,17,18,32,33,34,36,38,39,43,44,45,46,47,51,52,53,54,55,66,67,68,69,73,80,87,88,91,92,97,98,99,101,104,108,110,111,112,113,114,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,140,141,144,146,147,149,150,151,152,153,154,159,160,161,162,],[-86,31,-86,-19,-18,-86,-21,-23,-24,-25,-57,-59,-86,-86,-86,-81,-82,-83,-84,-85,-20,-22,-54,-55,-86,-60,-67,-68,-71,-72,-77,-78,-79,-86,-86,-50,-51,-26,-86,-86,-34,-56,-58,-61,-62,-63,-64,-65,-66,-86,-86,-86,-86,-86,-86,-80,-27,-38,-39,-40,-28,-29,-30,-31,-32,-42,-33,-69,-70,-73,-74,-75,-76,-41,-43,-44,-17,]),'COLON':([14,15,28,30,65,107,],[27,-86,-8,-10,-86,-9,]),'COMMA':([15,43,44,45,46,47,51,52,53,54,55,65,68,69,71,80,87,88,91,92,97,98,99,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,149,150,151,152,153,154,],[29,-57,-59,-86,-86,-86,-81,-82,-83,-84,-85,29,-54,-55,109,-60,-67,-68,-71,-72,-77,-78,-79,-56,-58,-61,-62,-63,-64,-65,-66,-86,-86,-86,-86,-86,-86,-80,-69,-70,-73,-74,-75,-76,]),'END':([17,18,32,33,34,36,38,39,43,44,45,46,47,51,52,53,54,55,66,67,68,69,73,80,87,88,91,92,97,98,99,101,104,108,110,111,112,113,114,115,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,140,141,144,146,147,148,149,150,151,152,153,154,159,160,161,162,],[-86,-19,-18,-86,-21,-23,-24,-25,-57,-59,-86,-86,-86,-81,-82,-83,-84,-85,-20,-22,-54,-55,-86,-60,-67,-68,-71,-72,-77,-78,-79,-86,-86,-50,-51,-26,-86,-86,-34,-86,-56,-58,-61,-62,-63,-64,-65,-66,-86,-86,-86,-86,-86,-86,-80,-27,-38,-39,-40,-28,-29,-30,-31,-32,-42,-33,162,-69,-70,-73,-74,-75,-76,-41,-43,-44,-17,]),'ASSIGN':([19,43,44,45,46,47,51,52,53,54,55,57,80,87,88,91,92,97,98,99,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,149,150,151,152,153,154,],[35,-57,-59,-86,-86,-86,-81,-82,-83,-84,-85,102,-60,-67,-68,-71,-72,-77,-78,-79,-56,-58,-61,-62,-63,-64,-65,-66,-86,-86,-86,-86,-86,-86,-80,-69,-70,-73,-74,-75,-76,]),'LPAREN':([20,21,22,23,24,25,35,37,40,48,49,50,75,77,79,81,82,83,84,85,86,89,90,93,94,95,96,102,103,109,156,157,],[37,37,40,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'PLUS':([23,24,25,35,37,40,46,47,48,49,50,51,52,53,54,55,75,77,79,81,82,83,84,85,86,89,90,92,93,94,95,96,97,98,99,102,103,109,126,127,128,129,130,131,132,151,152,153,154,156,157,],[48,48,48,48,48,48,89,-86,48,48,48,-81,-82,-83,-84,-85,48,48,48,48,48,48,48,48,48,48,48,-72,48,48,48,48,-77,-78,-79,48,48,48,89,89,-86,-86,-86,-86,-80,-73,-74,-75,-76,48,48,]),'MINUS':([23,24,25,35,37,40,46,47,48,49,50,51,52,53,54,55,75,77,79,81,82,83,84,85,86,89,90,92,93,94,95,96,97,98,99,102,103,109,126,127,128,129,130,131,132,151,152,153,154,156,157,],[49,49,49,49,49,49,90,-86,49,49,49,-81,-82,-83,-84,-85,49,49,49,49,49,49,49,49,49,49,49,-72,49,49,49,49,-77,-78,-79,49,49,49,90,90,-86,-86,-86,-86,-80,-73,-74,-75,-76,49,49,]),'INTEGER':([23,24,25,35,37,40,48,49,50,75,77,79,81,82,83,84,85,86,89,90,93,94,95,96,102,103,106,109,156,157,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,142,51,51,51,]),'REAL':([23,24,25,35,37,40,48,49,50,75,77,79,81,82,83,84,85,86,89,90,93,94,95,96,102,103,109,156,157,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'TRUE':([23,24,25,35,37,40,48,49,50,75,77,79,81,82,83,84,85,86,89,90,93,94,95,96,102,103,109,156,157,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'FALSE':([23,24,25,35,37,40,48,49,50,75,77,79,81,82,83,84,85,86,89,90,93,94,95,96,102,103,109,156,157,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'TYPE_INTEGER':([27,165,],[60,60,]),'TYPE_REAL':([27,165,],[61,61,]),'BOOLEAN':([27,165,],[62,62,]),'TYPE_STRING':([27,165,],[63,63,]),'ARRAY':([27,165,],[64,64,]),'STRING':([35,37,40,109,],[69,69,69,69,]),'ELSE':([36,38,39,43,44,45,46,47,51,52,53,54,55,67,68,69,73,80,87,88,91,92,97,98,99,101,104,108,110,111,112,113,114,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,140,141,144,146,147,149,150,151,152,153,154,159,160,161,162,],[-23,-24,-25,-57,-59,-86,-86,-86,-81,-82,-83,-84,-85,-22,-54,-55,-86,-60,-67,-68,-71,-72,-77,-78,-79,-86,-86,-50,-51,-26,145,145,-34,-56,-58,-61,-62,-63,-64,-65,-66,-86,-86,-86,-86,-86,-86,-80,-27,-38,-39,-40,-28,-29,-30,-31,-32,-42,-33,-69,-70,-73,-74,-75,-76,-41,-43,-44,-17,]),'THEN':([41,42,43,44,45,46,47,51,52,53,54,55,74,75,76,78,80,87,88,91,92,97,98,99,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,149,150,151,152,153,154,],[73,-86,-57,-59,-86,-86,-86,-81,-82,-83,-84,-85,-45,-86,-47,-49,-60,-67,-68,-71,-72,-77,-78,-79,-56,-46,-48,-58,-61,-62,-63,-64,-65,-66,-86,-86,-86,-86,-86,-86,-80,-69,-70,-73,-74,-75,-76,]),'OR':([42,43,44,45,46,47,51,52,53,54,55,57,68,80,87,88,91,92,97,98,99,100,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,137,149,150,151,152,153,154,163,164,],[75,-57,-59,-86,-86,-86,-81,-82,-83,-84,-85,103,103,-60,-67,-68,-71,-72,-77,-78,-79,103,-56,-58,-61,-62,-63,-64,-65,-66,-86,-86,-86,-86,-86,-86,-80,103,-69,-70,-73,-74,-75,-76,103,103,]),'AND':([42,43,44,45,46,47,51,52,53,54,55,75,80,87,88,91,92,97,98,99,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,149,150,151,152,153,154,],[77,79,-59,-86,-86,-86,-81,-82,-83,-84,-85,77,-60,-67,-68,-71,-72,-77,-78,-79,79,-58,-61,-62,-63,-64,-65,-66,-86,-86,-86,-86,-86,-86,-80,-69,-70,-73,-74,-75,-76,]),'DO':([42,43,44,45,46,47,51,52,53,54,55,56,58,74,75,76,78,80,87,88,91,92,97,98,99,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,149,150,151,152,153,154,155,163,164,],[-86,-57,-59,-86,-86,-86,-81,-82,-83,-84,-85,101,104,-45,-86,-47,-49,-60,-67,-68,-71,-72,-77,-78,-79,-56,-46,-48,-58,-61,-62,-63,-64,-65,-66,-86,-86,-86,-86,-86,-86,-80,-69,-70,-73,-74,-75,-76,-35,-36,-37,]),'RPAREN':([43,44,45,46,47,51,52,53,54,55,68,69,70,71,72,80,87,88,91,92,97,98,99,100,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,143,149,150,151,152,153,154,],[-57,-59,-86,-86,-86,-81,-82,-83,-84,-85,-54,-55,108,-52,110,-60,-67,-68,-71,-72,-77,-78,-79,132,-56,-58,-61,-62,-63,-64,-65,-66,-86,-86,-86,-86,-86,-86,-80,-53,-69,-70,-73,-74,-75,-76,]),'TO':([43,44,45,46,47,51,52,53,54,55,80,87,88,91,92,97,98,99,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,137,149,150,151,152,153,154,],[-57,-59,-86,-86,-86,-81,-82,-83,-84,-85,-60,-67,-68,-71,-72,-77,-78,-79,-56,-58,-61,-62,-63,-64,-65,-66,-86,-86,-86,-86,-86,-86,-80,156,-69,-70,-73,-74,-75,-76,]),'DOWNTO':([43,44,45,46,47,51,52,53,54,55,80,87,88,91,92,97,98,99,116,119,120,121,122,123,124,125,126,127,128,129,130,131,132,137,149,150,151,152,153,154,],[-57,-59,-86,-86,-86,-81,-82,-83,-84,-85,-60,-67,-68,-71,-72,-77,-78,-79,-56,-58,-61,-62,-63,-64,-65,-66,-86,-86,-86,-86,-86,-86,-80,157,-69,-70,-73,-74,-75,-76,]),'LT':([45,46,47,51,52,53,54,55,88,91,92,97,98,99,126,127,128,129,130,131,132,149,150,151,152,153,154,],[81,-86,-86,-81,-82,-83,-84,-85,-68,-71,-72,-77,-78,-79,-86,-86,-86,-86,-86,-86,-80,-69,-70,-73,-74,-75,-76,]),'GT':([45,46,47,51,52,53,54,55,88,91,92,97,98,99,126,127,128,129,130,131,132,149,150,151,152,153,154,],[82,-86,-86,-81,-82,-83,-84,-85,-68,-71,-72,-77,-78,-79,-86,-86,-86,-86,-86,-86,-80,-69,-70,-73,-74,-75,-76,]),'LE':([45,46,47,51,52,53,54,55,88,91,92,97,98,99,126,127,128,129,130,131,132,149,150,151,152,153,154,],[83,-86,-86,-81,-82,-83,-84,-85,-68,-71,-72,-77,-78,-79,-86,-86,-86,-86,-86,-86,-80,-69,-70,-73,-74,-75,-76,]),'GE':([45,46,47,51,52,53,54,55,88,91,92,97,98,99,126,127,128,129,130,131,132,149,150,151,152,153,154,],[84,-86,-86,-81,-82,-83,-84,-85,-68,-71,-72,-77,-78,-79,-86,-86,-86,-86,-86,-86,-80,-69,-70,-73,-74,-75,-76,]),'NE':([45,46,47,51,52,53,54,55,88,91,92,97,98,99,126,127,128,129,130,131,132,149,150,151,152,153,154,],[85,-86,-86,-81,-82,-83,-84,-85,-68,-71,-72,-77,-78,-79,-86,-86,-86,-86,-86,-86,-80,-69,-70,-73,-74,-75,-76,]),'EQUAL':([45,46,47,51,52,53,54,55,88,91,92,97,98,99,126,127,128,129,130,131,132,149,150,151,152,153,154,],[86,-86,-86,-81,-82,-83,-84,-85,-68,-71,-72,-77,-78,-79,-86,-86,-86,-86,-86,-86,-80,-69,-70,-73,-74,-75,-76,]),'TIMES':([47,51,52,53,54,55,98,99,128,129,130,131,132,],[93,-81,-82,-83,-84,-85,-78,-79,93,93,93,93,-80,]),'DIVIDE':([47,51,52,53,54,55,98,99,128,129,130,131,132,],[94,-81,-82,-83,-84,-85,-78,-79,94,94,94,94,-80,]),'MOD':([47,51,52,53,54,55,98,99,128,129,130,131,132,],[95,-81,-82,-83,-84,-85,-78,-79,95,95,95,95,-80,]),'REAL_DIVIDE':([47,51,52,53,54,55,98,99,128,129,130,131,132,],[96,-81,-82,-83,-84,-85,-78,-79,96,96,96,96,-80,]),'LBRACKET':([64,],[106,]),'RBRACKET':([142,],[158,]),'OF':([158,],[165,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file':([0,],[1,]),'name':([2,],[3,]),'vars':([3,],[5,]),'empty':([3,6,10,12,15,17,33,42,45,46,47,65,73,75,101,104,112,113,115,126,127,128,129,130,131,],[7,13,18,13,30,34,18,78,87,91,97,30,114,78,136,141,146,146,18,91,91,97,97,97,97,]),'code':([5,],[9,]),'varstail':([6,12,],[11,26,]),'vardecl':([6,12,],[12,12,]),'idlist':([6,12,],[14,14,]),'expressions':([10,33,115,],[16,66,148,]),'statement':([10,33,73,101,104,115,145,],[17,17,113,135,140,17,161,]),'idlistTail':([15,65,],[28,107,]),'expressions_tail':([17,],[32,]),'write_statement':([20,21,],[36,38,]),'readln_statement':([22,],[39,]),'if_condition':([23,25,77,],[41,58,118,]),'expression':([23,24,25,35,37,40,50,77,102,109,156,157,],[42,57,42,68,68,68,100,42,137,68,163,164,]),'and_expression':([23,24,25,35,37,40,50,75,77,102,103,109,156,157,],[43,43,43,43,43,43,43,116,43,43,116,43,43,43,]),'relation_expression':([23,24,25,35,37,40,50,75,77,79,102,103,109,156,157,],[44,44,44,44,44,44,44,44,44,119,44,44,44,44,44,]),'simple_expression':([23,24,25,35,37,40,50,75,77,79,81,82,83,84,85,86,102,103,109,156,157,],[45,45,45,45,45,45,45,45,45,45,120,121,122,123,124,125,45,45,45,45,45,]),'term':([23,24,25,35,37,40,50,75,77,79,81,82,83,84,85,86,89,90,102,103,109,156,157,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,126,127,46,46,46,46,46,]),'factor':([23,24,25,35,37,40,48,49,50,75,77,79,81,82,83,84,85,86,89,90,93,94,95,96,102,103,109,156,157,],[47,47,47,47,47,47,98,99,47,47,47,47,47,47,47,47,47,47,47,47,128,129,130,131,47,47,47,47,47,]),'for_condition':([24,],[56,]),'type':([27,165,],[59,166,]),'assign_expression':([35,37,40,109,],[67,71,71,71,]),'string_statement':([37,40,109,],[70,72,143,]),'if_condition_tail':([42,],[74,]),'if_condition_tail_2':([42,75,],[76,117,]),'expression_tail':([45,],[80,]),'simple_expression_tail':([46,126,127,],[88,149,150,]),'term_tail':([47,128,129,130,131,],[92,151,152,153,154,]),'if_code':([73,],[111,]),'dotless_code':([73,101,104,145,],[112,134,139,160,]),'for_code':([101,],[133,]),'while_code':([104,],[138,]),'opt_else':([112,113,],[144,147,]),'to_expression':([137,],[155,]),'code_or_statement':([145,],[159,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file","S'",1,None,None,None),
  ('file -> PROGRAM name vars code','file',4,'p_file','yacc.py',16),
  ('name -> IDENTIFIER SEMICOLON','name',2,'p_name','yacc.py',24),
  ('vars -> VAR varstail','vars',2,'p_vars','yacc.py',30),
  ('vars -> empty','vars',1,'p_vars','yacc.py',31),
  ('varstail -> vardecl varstail','varstail',2,'p_varstail','yacc.py',42),
  ('varstail -> empty','varstail',1,'p_varstail','yacc.py',43),
  ('vardecl -> idlist COLON type SEMICOLON','vardecl',4,'p_vardecl','yacc.py',55),
  ('idlist -> IDENTIFIER idlistTail','idlist',2,'p_idlist','yacc.py',77),
  ('idlistTail -> COMMA IDENTIFIER idlistTail','idlistTail',3,'p_idlistTail','yacc.py',85),
  ('idlistTail -> empty','idlistTail',1,'p_idlistTail','yacc.py',86),
  ('type -> TYPE_INTEGER','type',1,'p_type','yacc.py',97),
  ('type -> TYPE_REAL','type',1,'p_type','yacc.py',98),
  ('type -> BOOLEAN','type',1,'p_type','yacc.py',99),
  ('type -> TYPE_STRING','type',1,'p_type','yacc.py',100),
  ('type -> ARRAY LBRACKET INTEGER RBRACKET OF type','type',6,'p_type','yacc.py',101),
  ('code -> BEGIN expressions END_DOT','code',3,'p_code','yacc.py',109),
  ('dotless_code -> BEGIN expressions END','dotless_code',3,'p_dotless_code','yacc.py',114),
  ('expressions -> statement expressions_tail','expressions',2,'p_expressions','yacc.py',122),
  ('expressions -> empty','expressions',1,'p_expressions','yacc.py',123),
  ('expressions_tail -> SEMICOLON expressions','expressions_tail',2,'p_expressions_tail','yacc.py',134),
  ('expressions_tail -> empty','expressions_tail',1,'p_expressions_tail','yacc.py',135),
  ('statement -> IDENTIFIER ASSIGN assign_expression','statement',3,'p_statement','yacc.py',149),
  ('statement -> WRITELN write_statement','statement',2,'p_statement','yacc.py',150),
  ('statement -> WRITE write_statement','statement',2,'p_statement','yacc.py',151),
  ('statement -> READLN readln_statement','statement',2,'p_statement','yacc.py',152),
  ('statement -> IF if_condition THEN if_code','statement',4,'p_statement','yacc.py',153),
  ('statement -> FOR for_condition DO for_code','statement',4,'p_statement','yacc.py',154),
  ('statement -> WHILE if_condition DO while_code','statement',4,'p_statement','yacc.py',155),
  ('while_code -> dotless_code','while_code',1,'p_while_code','yacc.py',232),
  ('while_code -> statement','while_code',1,'p_while_code','yacc.py',233),
  ('while_code -> empty','while_code',1,'p_while_code','yacc.py',234),
  ('if_code -> dotless_code opt_else','if_code',2,'p_if_code','yacc.py',248),
  ('if_code -> statement opt_else','if_code',2,'p_if_code','yacc.py',249),
  ('if_code -> empty','if_code',1,'p_if_code','yacc.py',250),
  ('for_condition -> expression ASSIGN expression to_expression','for_condition',4,'p_for_condition','yacc.py',262),
  ('to_expression -> TO expression','to_expression',2,'p_to_expression','yacc.py',291),
  ('to_expression -> DOWNTO expression','to_expression',2,'p_to_expression','yacc.py',292),
  ('for_code -> dotless_code','for_code',1,'p_for_code','yacc.py',309),
  ('for_code -> statement','for_code',1,'p_for_code','yacc.py',310),
  ('for_code -> empty','for_code',1,'p_for_code','yacc.py',311),
  ('opt_else -> ELSE code_or_statement','opt_else',2,'p_opt_else','yacc.py',327),
  ('opt_else -> empty','opt_else',1,'p_opt_else','yacc.py',328),
  ('code_or_statement -> dotless_code','code_or_statement',1,'p_code_or_statement','yacc.py',335),
  ('code_or_statement -> statement','code_or_statement',1,'p_code_or_statement','yacc.py',336),
  ('if_condition -> expression if_condition_tail','if_condition',2,'p_if_condition','yacc.py',342),
  ('if_condition_tail -> OR if_condition_tail_2','if_condition_tail',2,'p_if_condition_tail','yacc.py',362),
  ('if_condition_tail -> if_condition_tail_2','if_condition_tail',1,'p_if_condition_tail','yacc.py',363),
  ('if_condition_tail_2 -> AND if_condition','if_condition_tail_2',2,'p_if_condition_tail_2','yacc.py',373),
  ('if_condition_tail_2 -> empty','if_condition_tail_2',1,'p_if_condition_tail_2','yacc.py',374),
  ('write_statement -> LPAREN string_statement RPAREN','write_statement',3,'p_write_statement','yacc.py',385),
  ('readln_statement -> LPAREN string_statement RPAREN','readln_statement',3,'p_readln_statement','yacc.py',413),
  ('string_statement -> assign_expression','string_statement',1,'p_string_statement','yacc.py',430),
  ('string_statement -> assign_expression COMMA string_statement','string_statement',3,'p_string_statement','yacc.py',431),
  ('assign_expression -> expression','assign_expression',1,'p_assign_expression','yacc.py',438),
  ('assign_expression -> STRING','assign_expression',1,'p_assign_expression','yacc.py',439),
  ('expression -> expression OR and_expression','expression',3,'p_expression','yacc.py',446),
  ('expression -> and_expression','expression',1,'p_expression','yacc.py',447),
  ('and_expression -> and_expression AND relation_expression','and_expression',3,'p_and_expression','yacc.py',459),
  ('and_expression -> relation_expression','and_expression',1,'p_and_expression','yacc.py',460),
  ('relation_expression -> simple_expression expression_tail','relation_expression',2,'p_relation_expression','yacc.py',471),
  ('expression_tail -> LT simple_expression','expression_tail',2,'p_expression_tail','yacc.py',519),
  ('expression_tail -> GT simple_expression','expression_tail',2,'p_expression_tail','yacc.py',520),
  ('expression_tail -> LE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',521),
  ('expression_tail -> GE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',522),
  ('expression_tail -> NE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',523),
  ('expression_tail -> EQUAL simple_expression','expression_tail',2,'p_expression_tail','yacc.py',524),
  ('expression_tail -> empty','expression_tail',1,'p_expression_tail','yacc.py',525),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','yacc.py',536),
  ('simple_expression_tail -> PLUS term simple_expression_tail','simple_expression_tail',3,'p_simple_expression_tail','yacc.py',557),
  ('simple_expression_tail -> MINUS term simple_expression_tail','simple_expression_tail',3,'p_simple_expression_tail','yacc.py',558),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','yacc.py',559),
  ('term -> factor term_tail','term',2,'p_term','yacc.py',587),
  ('term_tail -> TIMES factor term_tail','term_tail',3,'p_term_tail','yacc.py',609),
  ('term_tail -> DIVIDE factor term_tail','term_tail',3,'p_term_tail','yacc.py',610),
  ('term_tail -> MOD factor term_tail','term_tail',3,'p_term_tail','yacc.py',611),
  ('term_tail -> REAL_DIVIDE factor term_tail','term_tail',3,'p_term_tail','yacc.py',612),
  ('term_tail -> empty','term_tail',1,'p_term_tail','yacc.py',613),
  ('factor -> PLUS factor','factor',2,'p_factor','yacc.py',644),
  ('factor -> MINUS factor','factor',2,'p_factor','yacc.py',645),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','yacc.py',646),
  ('factor -> INTEGER','factor',1,'p_factor','yacc.py',647),
  ('factor -> REAL','factor',1,'p_factor','yacc.py',648),
  ('factor -> IDENTIFIER','factor',1,'p_factor','yacc.py',649),
  ('factor -> TRUE','factor',1,'p_factor','yacc.py',650),
  ('factor -> FALSE','factor',1,'p_factor','yacc.py',651),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',707),
]
