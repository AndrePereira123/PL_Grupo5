
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN BEGIN BOOLEAN COLON COMMA COMMENT DIVIDE DO DOT DOWNTO ELSE END EQUAL FALSE FOR FUNCTION GE GT IDENTIFIER IF INTEGER LBRACKET LE LPAREN LT MINUS NE NOT OF OR PLUS PROCEDURE PROGRAM RBRACKET READLN REAL REAL_DIVIDE RPAREN SEMICOLON STRING THEN TIMES TO TRUE TYPE_INTEGER TYPE_REAL TYPE_STRING VAR WHILE WRITE WRITELNfile : PROGRAM name vars codename : IDENTIFIER SEMICOLONvars : VAR varstail\n           | emptyvarstail : vardecl varstail\n                | emptyvardecl : idlist COLON type SEMICOLONidlist : IDENTIFIER idlistTailidlistTail : COMMA IDENTIFIER idlistTail\n           | emptytype : TYPE_INTEGER\n           | TYPE_REAL\n           | BOOLEAN\n           | TYPE_STRING\n           | ARRAY LBRACKET INTEGER RBRACKET OF typecode : BEGIN expressions ENDexpressions : statement expressions_tail\n                   | emptyexpressions_tail : SEMICOLON expressions\n                        | emptystatement : IDENTIFIER ASSIGN assign_expression  \n                | WRITELN write_statement \n                | WRITE write_statement \n                | READLN readln_statement \n                | IF if_condition THEN if_code \n                | FOR \n                | WHILE if_code : code opt_else\n               | statement opt_else\n               | emptyopt_else : ELSE code_or_statement\n                | emptycode_or_statement : code\n                         | statementif_condition : expression if_condition_tailif_condition_tail : OR if_condition_tail_2\n                         | if_condition_tail_2if_condition_tail_2 : AND if_condition\n                           | emptywrite_statement : LPAREN string_statement RPARENreadln_statement : LPAREN string_statement RPARENstring_statement : assign_expression\n                        | assign_expression COMMA string_statementassign_expression : expression\n                         | STRING expression : expression OR and_expression\n                  | and_expressionand_expression : and_expression AND relation_expression          \n                      | relation_expressionrelation_expression : simple_expression expression_tailexpression_tail : LT simple_expression \n                        | GT simple_expression \n                        | LE simple_expression \n                        | GE simple_expression \n                        | NE simple_expression \n                        | EQUAL simple_expression\n                        | emptysimple_expression : term simple_expression_tailsimple_expression_tail : PLUS term simple_expression_tail\n                             | MINUS term simple_expression_tail\n                             | emptyterm : factor term_tailterm_tail : TIMES factor term_tail\n                 | DIVIDE factor term_tail\n                 | REAL_DIVIDE factor term_tail\n                 | emptyfactor : PLUS factor\n              | MINUS factor\n              | LPAREN expression RPAREN\n              | INTEGER\n              | REAL\n              | IDENTIFIERempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,9,31,],[0,-1,-16,]),'IDENTIFIER':([2,6,10,12,23,29,33,35,37,40,48,49,50,68,70,72,74,76,77,78,79,80,81,84,85,88,89,90,95,98,100,125,],[4,15,19,15,53,60,19,53,53,53,53,53,53,19,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-7,53,53,19,]),'VAR':([3,8,],[6,-2,]),'BEGIN':([3,5,6,7,8,11,12,13,26,68,95,125,],[-73,10,-73,-4,-2,-3,-73,-6,-5,10,-7,10,]),'SEMICOLON':([4,17,24,25,31,36,38,39,43,44,45,46,47,51,52,53,54,55,56,57,58,62,63,64,68,75,82,83,86,87,91,92,93,99,101,102,103,104,105,106,109,110,111,112,113,114,115,116,117,118,119,120,121,124,126,127,128,129,130,131,132,134,135,136,138,],[8,33,-26,-27,-16,-22,-23,-24,-47,-49,-73,-73,-73,-70,-71,-72,95,-11,-12,-13,-14,-21,-44,-45,-73,-50,-57,-58,-61,-62,-66,-67,-68,-40,-41,-25,-73,-73,-30,-46,-48,-51,-52,-53,-54,-55,-56,-73,-73,-73,-73,-73,-69,-28,-32,-29,-59,-60,-63,-64,-65,-31,-33,-34,-15,]),'WRITELN':([10,33,68,125,],[20,20,20,20,]),'WRITE':([10,33,68,125,],[21,21,21,21,]),'READLN':([10,33,68,125,],[22,22,22,22,]),'IF':([10,33,68,125,],[23,23,23,23,]),'FOR':([10,33,68,125,],[24,24,24,24,]),'WHILE':([10,33,68,125,],[25,25,25,25,]),'END':([10,16,17,18,24,25,31,32,33,34,36,38,39,43,44,45,46,47,51,52,53,61,62,63,64,68,75,82,83,86,87,91,92,93,99,101,102,103,104,105,106,109,110,111,112,113,114,115,116,117,118,119,120,121,124,126,127,128,129,130,131,132,134,135,136,],[-73,31,-73,-18,-26,-27,-16,-17,-73,-20,-22,-23,-24,-47,-49,-73,-73,-73,-70,-71,-72,-19,-21,-44,-45,-73,-50,-57,-58,-61,-62,-66,-67,-68,-40,-41,-25,-73,-73,-30,-46,-48,-51,-52,-53,-54,-55,-56,-73,-73,-73,-73,-73,-69,-28,-32,-29,-59,-60,-63,-64,-65,-31,-33,-34,]),'COLON':([14,15,28,30,60,97,],[27,-73,-8,-10,-73,-9,]),'COMMA':([15,43,44,45,46,47,51,52,53,60,63,64,66,75,82,83,86,87,91,92,93,106,109,110,111,112,113,114,115,116,117,118,119,120,121,128,129,130,131,132,],[29,-47,-49,-73,-73,-73,-70,-71,-72,29,-44,-45,100,-50,-57,-58,-61,-62,-66,-67,-68,-46,-48,-51,-52,-53,-54,-55,-56,-73,-73,-73,-73,-73,-69,-59,-60,-63,-64,-65,]),'ASSIGN':([19,],[35,]),'LPAREN':([20,21,22,23,35,37,40,48,49,50,70,72,74,76,77,78,79,80,81,84,85,88,89,90,98,100,],[37,37,40,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'PLUS':([23,35,37,40,46,47,48,49,50,51,52,53,70,72,74,76,77,78,79,80,81,84,85,87,88,89,90,91,92,93,98,100,116,117,118,119,120,121,130,131,132,],[48,48,48,48,84,-73,48,48,48,-70,-71,-72,48,48,48,48,48,48,48,48,48,48,48,-62,48,48,48,-66,-67,-68,48,48,84,84,-73,-73,-73,-69,-63,-64,-65,]),'MINUS':([23,35,37,40,46,47,48,49,50,51,52,53,70,72,74,76,77,78,79,80,81,84,85,87,88,89,90,91,92,93,98,100,116,117,118,119,120,121,130,131,132,],[49,49,49,49,85,-73,49,49,49,-70,-71,-72,49,49,49,49,49,49,49,49,49,49,49,-62,49,49,49,-66,-67,-68,49,49,85,85,-73,-73,-73,-69,-63,-64,-65,]),'INTEGER':([23,35,37,40,48,49,50,70,72,74,76,77,78,79,80,81,84,85,88,89,90,96,98,100,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,122,51,51,]),'REAL':([23,35,37,40,48,49,50,70,72,74,76,77,78,79,80,81,84,85,88,89,90,98,100,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'ELSE':([24,25,31,36,38,39,43,44,45,46,47,51,52,53,62,63,64,68,75,82,83,86,87,91,92,93,99,101,102,103,104,105,106,109,110,111,112,113,114,115,116,117,118,119,120,121,124,126,127,128,129,130,131,132,134,135,136,],[-26,-27,-16,-22,-23,-24,-47,-49,-73,-73,-73,-70,-71,-72,-21,-44,-45,-73,-50,-57,-58,-61,-62,-66,-67,-68,-40,-41,-25,125,125,-30,-46,-48,-51,-52,-53,-54,-55,-56,-73,-73,-73,-73,-73,-69,-28,-32,-29,-59,-60,-63,-64,-65,-31,-33,-34,]),'TYPE_INTEGER':([27,137,],[55,55,]),'TYPE_REAL':([27,137,],[56,56,]),'BOOLEAN':([27,137,],[57,57,]),'TYPE_STRING':([27,137,],[58,58,]),'ARRAY':([27,137,],[59,59,]),'STRING':([35,37,40,100,],[64,64,64,64,]),'THEN':([41,42,43,44,45,46,47,51,52,53,69,70,71,73,75,82,83,86,87,91,92,93,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,128,129,130,131,132,],[68,-73,-47,-49,-73,-73,-73,-70,-71,-72,-35,-73,-37,-39,-50,-57,-58,-61,-62,-66,-67,-68,-46,-36,-38,-48,-51,-52,-53,-54,-55,-56,-73,-73,-73,-73,-73,-69,-59,-60,-63,-64,-65,]),'OR':([42,43,44,45,46,47,51,52,53,63,75,82,83,86,87,91,92,93,94,106,109,110,111,112,113,114,115,116,117,118,119,120,121,128,129,130,131,132,],[70,-47,-49,-73,-73,-73,-70,-71,-72,98,-50,-57,-58,-61,-62,-66,-67,-68,98,-46,-48,-51,-52,-53,-54,-55,-56,-73,-73,-73,-73,-73,-69,-59,-60,-63,-64,-65,]),'AND':([42,43,44,45,46,47,51,52,53,70,75,82,83,86,87,91,92,93,106,109,110,111,112,113,114,115,116,117,118,119,120,121,128,129,130,131,132,],[72,74,-49,-73,-73,-73,-70,-71,-72,72,-50,-57,-58,-61,-62,-66,-67,-68,74,-48,-51,-52,-53,-54,-55,-56,-73,-73,-73,-73,-73,-69,-59,-60,-63,-64,-65,]),'RPAREN':([43,44,45,46,47,51,52,53,63,64,65,66,67,75,82,83,86,87,91,92,93,94,106,109,110,111,112,113,114,115,116,117,118,119,120,121,123,128,129,130,131,132,],[-47,-49,-73,-73,-73,-70,-71,-72,-44,-45,99,-42,101,-50,-57,-58,-61,-62,-66,-67,-68,121,-46,-48,-51,-52,-53,-54,-55,-56,-73,-73,-73,-73,-73,-69,-43,-59,-60,-63,-64,-65,]),'LT':([45,46,47,51,52,53,83,86,87,91,92,93,116,117,118,119,120,121,128,129,130,131,132,],[76,-73,-73,-70,-71,-72,-58,-61,-62,-66,-67,-68,-73,-73,-73,-73,-73,-69,-59,-60,-63,-64,-65,]),'GT':([45,46,47,51,52,53,83,86,87,91,92,93,116,117,118,119,120,121,128,129,130,131,132,],[77,-73,-73,-70,-71,-72,-58,-61,-62,-66,-67,-68,-73,-73,-73,-73,-73,-69,-59,-60,-63,-64,-65,]),'LE':([45,46,47,51,52,53,83,86,87,91,92,93,116,117,118,119,120,121,128,129,130,131,132,],[78,-73,-73,-70,-71,-72,-58,-61,-62,-66,-67,-68,-73,-73,-73,-73,-73,-69,-59,-60,-63,-64,-65,]),'GE':([45,46,47,51,52,53,83,86,87,91,92,93,116,117,118,119,120,121,128,129,130,131,132,],[79,-73,-73,-70,-71,-72,-58,-61,-62,-66,-67,-68,-73,-73,-73,-73,-73,-69,-59,-60,-63,-64,-65,]),'NE':([45,46,47,51,52,53,83,86,87,91,92,93,116,117,118,119,120,121,128,129,130,131,132,],[80,-73,-73,-70,-71,-72,-58,-61,-62,-66,-67,-68,-73,-73,-73,-73,-73,-69,-59,-60,-63,-64,-65,]),'EQUAL':([45,46,47,51,52,53,83,86,87,91,92,93,116,117,118,119,120,121,128,129,130,131,132,],[81,-73,-73,-70,-71,-72,-58,-61,-62,-66,-67,-68,-73,-73,-73,-73,-73,-69,-59,-60,-63,-64,-65,]),'TIMES':([47,51,52,53,92,93,118,119,120,121,],[88,-70,-71,-72,-67,-68,88,88,88,-69,]),'DIVIDE':([47,51,52,53,92,93,118,119,120,121,],[89,-70,-71,-72,-67,-68,89,89,89,-69,]),'REAL_DIVIDE':([47,51,52,53,92,93,118,119,120,121,],[90,-70,-71,-72,-67,-68,90,90,90,-69,]),'LBRACKET':([59,],[96,]),'RBRACKET':([122,],[133,]),'OF':([133,],[137,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file':([0,],[1,]),'name':([2,],[3,]),'vars':([3,],[5,]),'empty':([3,6,10,12,15,17,33,42,45,46,47,60,68,70,103,104,116,117,118,119,120,],[7,13,18,13,30,34,18,73,82,86,91,30,105,73,126,126,86,86,91,91,91,]),'code':([5,68,125,],[9,103,135,]),'varstail':([6,12,],[11,26,]),'vardecl':([6,12,],[12,12,]),'idlist':([6,12,],[14,14,]),'expressions':([10,33,],[16,61,]),'statement':([10,33,68,125,],[17,17,104,136,]),'idlistTail':([15,60,],[28,97,]),'expressions_tail':([17,],[32,]),'write_statement':([20,21,],[36,38,]),'readln_statement':([22,],[39,]),'if_condition':([23,72,],[41,108,]),'expression':([23,35,37,40,50,72,100,],[42,63,63,63,94,42,63,]),'and_expression':([23,35,37,40,50,70,72,98,100,],[43,43,43,43,43,106,43,106,43,]),'relation_expression':([23,35,37,40,50,70,72,74,98,100,],[44,44,44,44,44,44,44,109,44,44,]),'simple_expression':([23,35,37,40,50,70,72,74,76,77,78,79,80,81,98,100,],[45,45,45,45,45,45,45,45,110,111,112,113,114,115,45,45,]),'term':([23,35,37,40,50,70,72,74,76,77,78,79,80,81,84,85,98,100,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,116,117,46,46,]),'factor':([23,35,37,40,48,49,50,70,72,74,76,77,78,79,80,81,84,85,88,89,90,98,100,],[47,47,47,47,92,93,47,47,47,47,47,47,47,47,47,47,47,47,118,119,120,47,47,]),'type':([27,137,],[54,138,]),'assign_expression':([35,37,40,100,],[62,66,66,66,]),'string_statement':([37,40,100,],[65,67,123,]),'if_condition_tail':([42,],[69,]),'if_condition_tail_2':([42,70,],[71,107,]),'expression_tail':([45,],[75,]),'simple_expression_tail':([46,116,117,],[83,128,129,]),'term_tail':([47,118,119,120,],[87,130,131,132,]),'if_code':([68,],[102,]),'opt_else':([103,104,],[124,127,]),'code_or_statement':([125,],[134,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file","S'",1,None,None,None),
  ('file -> PROGRAM name vars code','file',4,'p_file','yacc.py',13),
  ('name -> IDENTIFIER SEMICOLON','name',2,'p_name','yacc.py',21),
  ('vars -> VAR varstail','vars',2,'p_vars','yacc.py',27),
  ('vars -> empty','vars',1,'p_vars','yacc.py',28),
  ('varstail -> vardecl varstail','varstail',2,'p_varstail','yacc.py',39),
  ('varstail -> empty','varstail',1,'p_varstail','yacc.py',40),
  ('vardecl -> idlist COLON type SEMICOLON','vardecl',4,'p_vardecl','yacc.py',52),
  ('idlist -> IDENTIFIER idlistTail','idlist',2,'p_idlist','yacc.py',74),
  ('idlistTail -> COMMA IDENTIFIER idlistTail','idlistTail',3,'p_idlistTail','yacc.py',82),
  ('idlistTail -> empty','idlistTail',1,'p_idlistTail','yacc.py',83),
  ('type -> TYPE_INTEGER','type',1,'p_type','yacc.py',94),
  ('type -> TYPE_REAL','type',1,'p_type','yacc.py',95),
  ('type -> BOOLEAN','type',1,'p_type','yacc.py',96),
  ('type -> TYPE_STRING','type',1,'p_type','yacc.py',97),
  ('type -> ARRAY LBRACKET INTEGER RBRACKET OF type','type',6,'p_type','yacc.py',98),
  ('code -> BEGIN expressions END','code',3,'p_code','yacc.py',106),
  ('expressions -> statement expressions_tail','expressions',2,'p_expressions','yacc.py',111),
  ('expressions -> empty','expressions',1,'p_expressions','yacc.py',112),
  ('expressions_tail -> SEMICOLON expressions','expressions_tail',2,'p_expressions_tail','yacc.py',123),
  ('expressions_tail -> empty','expressions_tail',1,'p_expressions_tail','yacc.py',124),
  ('statement -> IDENTIFIER ASSIGN assign_expression','statement',3,'p_statement','yacc.py',137),
  ('statement -> WRITELN write_statement','statement',2,'p_statement','yacc.py',138),
  ('statement -> WRITE write_statement','statement',2,'p_statement','yacc.py',139),
  ('statement -> READLN readln_statement','statement',2,'p_statement','yacc.py',140),
  ('statement -> IF if_condition THEN if_code','statement',4,'p_statement','yacc.py',141),
  ('statement -> FOR','statement',1,'p_statement','yacc.py',142),
  ('statement -> WHILE','statement',1,'p_statement','yacc.py',143),
  ('if_code -> code opt_else','if_code',2,'p_if_code','yacc.py',194),
  ('if_code -> statement opt_else','if_code',2,'p_if_code','yacc.py',195),
  ('if_code -> empty','if_code',1,'p_if_code','yacc.py',196),
  ('opt_else -> ELSE code_or_statement','opt_else',2,'p_opt_else','yacc.py',207),
  ('opt_else -> empty','opt_else',1,'p_opt_else','yacc.py',208),
  ('code_or_statement -> code','code_or_statement',1,'p_code_or_statement','yacc.py',215),
  ('code_or_statement -> statement','code_or_statement',1,'p_code_or_statement','yacc.py',216),
  ('if_condition -> expression if_condition_tail','if_condition',2,'p_if_condition','yacc.py',222),
  ('if_condition_tail -> OR if_condition_tail_2','if_condition_tail',2,'p_if_condition_tail','yacc.py',242),
  ('if_condition_tail -> if_condition_tail_2','if_condition_tail',1,'p_if_condition_tail','yacc.py',243),
  ('if_condition_tail_2 -> AND if_condition','if_condition_tail_2',2,'p_if_condition_tail_2','yacc.py',253),
  ('if_condition_tail_2 -> empty','if_condition_tail_2',1,'p_if_condition_tail_2','yacc.py',254),
  ('write_statement -> LPAREN string_statement RPAREN','write_statement',3,'p_write_statement','yacc.py',265),
  ('readln_statement -> LPAREN string_statement RPAREN','readln_statement',3,'p_readln_statement','yacc.py',294),
  ('string_statement -> assign_expression','string_statement',1,'p_string_statement','yacc.py',311),
  ('string_statement -> assign_expression COMMA string_statement','string_statement',3,'p_string_statement','yacc.py',312),
  ('assign_expression -> expression','assign_expression',1,'p_assign_expression','yacc.py',319),
  ('assign_expression -> STRING','assign_expression',1,'p_assign_expression','yacc.py',320),
  ('expression -> expression OR and_expression','expression',3,'p_expression','yacc.py',327),
  ('expression -> and_expression','expression',1,'p_expression','yacc.py',328),
  ('and_expression -> and_expression AND relation_expression','and_expression',3,'p_and_expression','yacc.py',340),
  ('and_expression -> relation_expression','and_expression',1,'p_and_expression','yacc.py',341),
  ('relation_expression -> simple_expression expression_tail','relation_expression',2,'p_relation_expression','yacc.py',352),
  ('expression_tail -> LT simple_expression','expression_tail',2,'p_expression_tail','yacc.py',400),
  ('expression_tail -> GT simple_expression','expression_tail',2,'p_expression_tail','yacc.py',401),
  ('expression_tail -> LE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',402),
  ('expression_tail -> GE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',403),
  ('expression_tail -> NE simple_expression','expression_tail',2,'p_expression_tail','yacc.py',404),
  ('expression_tail -> EQUAL simple_expression','expression_tail',2,'p_expression_tail','yacc.py',405),
  ('expression_tail -> empty','expression_tail',1,'p_expression_tail','yacc.py',406),
  ('simple_expression -> term simple_expression_tail','simple_expression',2,'p_simple_expression','yacc.py',417),
  ('simple_expression_tail -> PLUS term simple_expression_tail','simple_expression_tail',3,'p_simple_expression_tail','yacc.py',438),
  ('simple_expression_tail -> MINUS term simple_expression_tail','simple_expression_tail',3,'p_simple_expression_tail','yacc.py',439),
  ('simple_expression_tail -> empty','simple_expression_tail',1,'p_simple_expression_tail','yacc.py',440),
  ('term -> factor term_tail','term',2,'p_term','yacc.py',469),
  ('term_tail -> TIMES factor term_tail','term_tail',3,'p_term_tail','yacc.py',491),
  ('term_tail -> DIVIDE factor term_tail','term_tail',3,'p_term_tail','yacc.py',492),
  ('term_tail -> REAL_DIVIDE factor term_tail','term_tail',3,'p_term_tail','yacc.py',493),
  ('term_tail -> empty','term_tail',1,'p_term_tail','yacc.py',494),
  ('factor -> PLUS factor','factor',2,'p_factor','yacc.py',523),
  ('factor -> MINUS factor','factor',2,'p_factor','yacc.py',524),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','yacc.py',525),
  ('factor -> INTEGER','factor',1,'p_factor','yacc.py',526),
  ('factor -> REAL','factor',1,'p_factor','yacc.py',527),
  ('factor -> IDENTIFIER','factor',1,'p_factor','yacc.py',528),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',571),
]
