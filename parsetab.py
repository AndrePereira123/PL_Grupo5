
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN BEGIN BOOLEAN COLON COMMA COMMENT DIVIDE DO DOT DOWNTO ELSE END EQUAL FALSE FOR FUNCTION GE GT IDENTIFIER IF INTEGER LBRACKET LE LPAREN LT MINUS NE NOT OF OR PLUS PROCEDURE PROGRAM RBRACKET READ READLN REAL RPAREN SEMICOLON STRING THEN TIMES TO TRUE TYPE_INTEGER TYPE_REAL TYPE_STRING VAR WHILE WRITE WRITELNfile : PROGRAM name vars codename : IDENTIFIER SEMICOLONvars : VAR varstail\n           | emptyvarstail : vardecl varstail\n                | emptyvardecl : idlist COLON type SEMICOLONidlist : IDENTIFIER idlistTailidlistTail : COMMA IDENTIFIER idlistTail\n           | emptytype : TYPE_INTEGER\n           | TYPE_REAL\n           | BOOLEAN\n           | TYPE_STRING\n           | ARRAY LBRACKET INTEGER RBRACKET OF typecode : BEGIN expressions ENDexpressions : statement expressions\n                   | emptystatement : IDENTIFIER ASSIGN assign_expression SEMICOLON \n                | WRITELN writeln_statement SEMICOLON\n                | WRITE write_statement SEMICOLON\n                | READLN \n                | READ \n                | IF            \n                | FOR \n                | WHILE writeln_statement : LPAREN string_statement RPARENwrite_statement : LPAREN string_statement RPARENstring_statement : assign_expression\n                        | assign_expression COMMA string_statementassign_expression : INTEGER\n                         | REAL\n                         | IDENTIFIER       \n                         | STRING\n                         | expression expression : emptyempty :'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,9,32,],[0,-1,-16,]),'IDENTIFIER':([2,6,10,12,17,22,23,24,25,26,30,34,36,38,53,56,58,61,63,],[4,15,19,15,19,-22,-23,-24,-25,-26,45,46,46,46,-20,-21,-7,-19,46,]),'VAR':([3,8,],[6,-2,]),'BEGIN':([3,5,6,7,8,11,12,13,27,58,],[-37,10,-37,-4,-2,-3,-37,-6,-5,-7,]),'SEMICOLON':([4,34,35,37,39,40,41,42,43,46,47,48,49,50,51,52,62,64,69,],[8,-37,53,56,58,-11,-12,-13,-14,-33,61,-31,-32,-34,-35,-36,-27,-28,-15,]),'WRITELN':([10,17,22,23,24,25,26,53,56,61,],[20,20,-22,-23,-24,-25,-26,-20,-21,-19,]),'WRITE':([10,17,22,23,24,25,26,53,56,61,],[21,21,-22,-23,-24,-25,-26,-20,-21,-19,]),'READLN':([10,17,22,23,24,25,26,53,56,61,],[22,22,-22,-23,-24,-25,-26,-20,-21,-19,]),'READ':([10,17,22,23,24,25,26,53,56,61,],[23,23,-22,-23,-24,-25,-26,-20,-21,-19,]),'IF':([10,17,22,23,24,25,26,53,56,61,],[24,24,-22,-23,-24,-25,-26,-20,-21,-19,]),'FOR':([10,17,22,23,24,25,26,53,56,61,],[25,25,-22,-23,-24,-25,-26,-20,-21,-19,]),'WHILE':([10,17,22,23,24,25,26,53,56,61,],[26,26,-22,-23,-24,-25,-26,-20,-21,-19,]),'END':([10,16,17,18,22,23,24,25,26,33,53,56,61,],[-37,32,-37,-18,-22,-23,-24,-25,-26,-17,-20,-21,-19,]),'COLON':([14,15,29,31,45,60,],[28,-37,-8,-10,-37,-9,]),'COMMA':([15,36,38,45,46,48,49,50,51,52,55,63,],[30,-37,-37,30,-33,-31,-32,-34,-35,-36,63,-37,]),'ASSIGN':([19,],[34,]),'LPAREN':([20,21,],[36,38,]),'TYPE_INTEGER':([28,68,],[40,40,]),'TYPE_REAL':([28,68,],[41,41,]),'BOOLEAN':([28,68,],[42,42,]),'TYPE_STRING':([28,68,],[43,43,]),'ARRAY':([28,68,],[44,44,]),'INTEGER':([34,36,38,59,63,],[48,48,48,65,48,]),'REAL':([34,36,38,63,],[49,49,49,49,]),'STRING':([34,36,38,63,],[50,50,50,50,]),'RPAREN':([36,38,46,48,49,50,51,52,54,55,57,63,66,],[-37,-37,-33,-31,-32,-34,-35,-36,62,-29,64,-37,-30,]),'LBRACKET':([44,],[59,]),'RBRACKET':([65,],[67,]),'OF':([67,],[68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'file':([0,],[1,]),'name':([2,],[3,]),'vars':([3,],[5,]),'empty':([3,6,10,12,15,17,34,36,38,45,63,],[7,13,18,13,31,18,52,52,52,31,52,]),'code':([5,],[9,]),'varstail':([6,12,],[11,27,]),'vardecl':([6,12,],[12,12,]),'idlist':([6,12,],[14,14,]),'expressions':([10,17,],[16,33,]),'statement':([10,17,],[17,17,]),'idlistTail':([15,45,],[29,60,]),'writeln_statement':([20,],[35,]),'write_statement':([21,],[37,]),'type':([28,68,],[39,69,]),'assign_expression':([34,36,38,63,],[47,55,55,55,]),'expression':([34,36,38,63,],[51,51,51,51,]),'string_statement':([36,38,63,],[54,57,66,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> file","S'",1,None,None,None),
  ('file -> PROGRAM name vars code','file',4,'p_file','yacc.py',11),
  ('name -> IDENTIFIER SEMICOLON','name',2,'p_name','yacc.py',19),
  ('vars -> VAR varstail','vars',2,'p_vars','yacc.py',25),
  ('vars -> empty','vars',1,'p_vars','yacc.py',26),
  ('varstail -> vardecl varstail','varstail',2,'p_varstail','yacc.py',37),
  ('varstail -> empty','varstail',1,'p_varstail','yacc.py',38),
  ('vardecl -> idlist COLON type SEMICOLON','vardecl',4,'p_vardecl','yacc.py',50),
  ('idlist -> IDENTIFIER idlistTail','idlist',2,'p_idlist','yacc.py',72),
  ('idlistTail -> COMMA IDENTIFIER idlistTail','idlistTail',3,'p_idlistTail','yacc.py',80),
  ('idlistTail -> empty','idlistTail',1,'p_idlistTail','yacc.py',81),
  ('type -> TYPE_INTEGER','type',1,'p_type','yacc.py',92),
  ('type -> TYPE_REAL','type',1,'p_type','yacc.py',93),
  ('type -> BOOLEAN','type',1,'p_type','yacc.py',94),
  ('type -> TYPE_STRING','type',1,'p_type','yacc.py',95),
  ('type -> ARRAY LBRACKET INTEGER RBRACKET OF type','type',6,'p_type','yacc.py',96),
  ('code -> BEGIN expressions END','code',3,'p_code','yacc.py',104),
  ('expressions -> statement expressions','expressions',2,'p_expressions','yacc.py',109),
  ('expressions -> empty','expressions',1,'p_expressions','yacc.py',110),
  ('statement -> IDENTIFIER ASSIGN assign_expression SEMICOLON','statement',4,'p_statement','yacc.py',123),
  ('statement -> WRITELN writeln_statement SEMICOLON','statement',3,'p_statement','yacc.py',124),
  ('statement -> WRITE write_statement SEMICOLON','statement',3,'p_statement','yacc.py',125),
  ('statement -> READLN','statement',1,'p_statement','yacc.py',126),
  ('statement -> READ','statement',1,'p_statement','yacc.py',127),
  ('statement -> IF','statement',1,'p_statement','yacc.py',128),
  ('statement -> FOR','statement',1,'p_statement','yacc.py',129),
  ('statement -> WHILE','statement',1,'p_statement','yacc.py',130),
  ('writeln_statement -> LPAREN string_statement RPAREN','writeln_statement',3,'p_writeln_statement','yacc.py',148),
  ('write_statement -> LPAREN string_statement RPAREN','write_statement',3,'p_write_statement','yacc.py',185),
  ('string_statement -> assign_expression','string_statement',1,'p_string_statement','yacc.py',189),
  ('string_statement -> assign_expression COMMA string_statement','string_statement',3,'p_string_statement','yacc.py',190),
  ('assign_expression -> INTEGER','assign_expression',1,'p_assign_expression','yacc.py',197),
  ('assign_expression -> REAL','assign_expression',1,'p_assign_expression','yacc.py',198),
  ('assign_expression -> IDENTIFIER','assign_expression',1,'p_assign_expression','yacc.py',199),
  ('assign_expression -> STRING','assign_expression',1,'p_assign_expression','yacc.py',200),
  ('assign_expression -> expression','assign_expression',1,'p_assign_expression','yacc.py',201),
  ('expression -> empty','expression',1,'p_expression','yacc.py',205),
  ('empty -> <empty>','empty',0,'p_empty','yacc.py',217),
]
